{"version":3,"sources":["nws/enums/distance-unit.ts","nws/enums/forecast-type.ts","nws/enums/pressure-unit.ts","nws/enums/speed-unit.ts","nws/enums/temperature-unit.ts","nws/exceptions/unexpected-unit-code.exceptions.ts","nws/services/nws.service.ts","common/services/local-storage.service.ts","dashboard/reducers/forecast-reducer.ts","dashboard/components/menu.tsx","dashboard/pages/dashboard.page.styles.tsx","common/components/image.tsx","dashboard/components/hourly-forecast.styles.tsx","dashboard/enums/nws-icon-size.ts","dashboard/utils/temperature.utils.ts","dashboard/components/hourly-forecast.tsx","dashboard/utils/speed.utils.ts","dashboard/components/weather-card.styles.ts","dashboard/components/weather-card.tsx","dashboard/pages/hourly-forecast.page.tsx","settings/constants/default-settings.ts","settings/contexts/settings.context.tsx","dashboard/pages/daily-forecast.page.styles.tsx","dashboard/pages/daily-forecast.page.tsx","arcgis-geocoding/services/arcgis-geocoding.service.ts","arcgis-geocoding/components/search.tsx","common/hooks/use-debounced-value.tsx","common/services/geolocation.service.ts","dashboard/components/app-bar.styles.tsx","dashboard/components/app-bar.tsx","dashboard/components/alert-accordion.styles.tsx","dashboard/components/alert-info-grid-item.styles.tsx","dashboard/components/alert-info-grid-item.tsx","dashboard/components/alert-info-grid.styles.tsx","dashboard/components/alert-info-grid.tsx","dashboard/components/alert-accordion.tsx","dashboard/pages/alerts.page.tsx","dashboard/pages/dashboard.page.tsx","common/hooks/use-serialize-value.tsx","common/hooks/use-network-status.tsx","settings/components/unit-menu.tsx","settings/contexts/settings-update.context.tsx","settings/utils/speed-unit.utils.ts","settings/utils/temperature-unit.utils.ts","settings/pages/settings.page.styles.tsx","settings/pages/settings.page.tsx","settings/reducers/settings.reducer.ts","settings/services/settings.service.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["DistanceUnit","ForecastType","PressureUnit","SpeedUnit","TemperatureUnit","UnexpectedUnitCodeException","unitCode","Error","captureStackTrace","name","nwsService","apiClient","params","a","this","get","data","getActiveAlertsRaw","features","map","properties","id","sent","effective","onset","expires","ends","status","messageType","severity","certainty","urgency","rest","convertToDateIfNotNull","toLowerCase","latitude","longitude","getPointInfoRaw","rawPointInfo","coordinates","geometry","gridId","gridX","gridY","timeZone","radarStation","relativeLocation","city","state","wfo","x","y","convertForecastResponseToForecast","getRawForecast","getRawHourlyForecast","getRawStations","stationIdentifier","stationId","queryParams","getRawStationObservations","station","timestamp","Date","description","textDescription","icon","temperature","convertTemperature","windDirection","value","undefined","windSpeed","convertSpeed","windGust","barometricPressure","convertPressure","seaLevelPressure","visibility","convertDistance","maxTemperatureLast24Hours","minTemperatureLast24Hours","precipitationLastHour","precipitationLast3Hours","precipitationLast6Hours","relativeHumidity","convertRelativeHumidity","windChill","heatIndex","axios","create","baseURL","headers","Accept","date","convertRawPeriodToPeriod","rawPeriod","startTime","endTime","isDayTime","isDaytime","temperatureUnit","shortForecast","detailedForecast","updatedTime","updateTime","type","Daily","periods","unit","Inch","Meter","Kilometer","KilometersPerHour","Celsius","Fahrenheit","Kelvin","Pascal","localStorageService","setItem","key","localStorage","JSON","stringify","getItem","reviver","parse","forecastReducer","action","payload","Menu","open","anchorEl","anchorOrigin","onClose","onRefreshClicked","onSettingsClicked","MenuItem","onClick","useStyles","makeStyles","theme","root","height","display","flexDirection","body","overflowY","flexGrow","main","hourlyForecastPage","gap","spacing","bottomNavigation","borderTop","borderColor","palette","divider","minHeight","Image","skeletonProps","className","imageProps","imageRef","useRef","useState","loaded","setLoaded","useLayoutEffect","current","complete","onload","onerror","Skeleton","variant","ref","style","NWSIconSize","alignItems","gridTemplateColumns","fontWeight","format","convert","targetUnit","kelvinValue","covertToKelvin","HourlyForecast","forecast","classes","Typography","toLocaleTimeString","hour","src","alt","Small","width","TemperatureUtils","toISOString","MetersPerSecond","MilesPerHour","speed","valueInMetersPerSecond","convertToMetersPerSecond","alignSelf","WeatherCard","Card","CardContent","Box","justifyContent","Medium","Math","round","SpeedUtils","toLocaleString","HourlyForecastPage","currentWeather","hourlyForecast","defaultSettings","speedUnit","SettingsContext","createContext","forecastTile","gridTemplateAreas","columnGap","forecastTileTitle","gridArea","justifySelf","forecastTileIcon","forecastTileDescription","forecastTileTemperature","DailyForecastPage","period","arcGISGeocodingService","suggestions","candidates","paramsSerializer","URLSearchParams","toString","Search","suggestParams","startAdornment","autocompleteProps","autoFocus","placeholder","onSelectionChange","setValue","inputValue","setInputValue","setSuggestions","debouncedInputValue","timeout","debouncedValue","setDebouncedValue","lastFired","now","useEffect","handle","setTimeout","clearTimeout","useDebouncedValue","inputChangeReason","length","suggest","text","f","then","Autocomplete","options","getOptionLabel","option","getOptionSelected","isCollection","magicKey","onInputChange","_e","reason","onChange","findAddressCandidates","SingeLine","maxLocations","outFields","renderInput","TextField","InputProps","InputAdornment","position","geolocationService","getCurrentPosition","Promise","res","rej","navigator","geolocation","searchContainer","backgroundColor","background","paper","padding","borderRadius","shape","searchOrLocateContainer","searchExitButton","spacer","AppBar","location","onShowMenu","onLocationChange","showSearch","setShowSearch","Toolbar","autoHighlight","fullWidth","IconButton","ArrowBack","category","countryCode","color","coords","MyLocation","edge","MoreVert","alertSummary","alertDetails","rowGap","textAlign","preformattedElement","whiteSpace","alertInfoGridHeadingCell","typography","fontWeightBold","alertInfoGridDataCell","AlertInfoGridItem","heading","alertInfoGrid","AlertInfoGrid","alert","rows","senderName","row","AlertAccordion","Accordion","AccordionSummary","expandIcon","ExpandMore","mapSeverityToIcon","event","AccordionDetails","headline","instruction","Warning","Info","Help","AlertsPage","alerts","initializeForecastState","upperCasedKey","toLocaleUpperCase","includes","observations","getPointInfo","getForecast","getHourlyForecast","getStations","stations","getStationObservations","limit","getActiveAlerts","point","reject","DashboardPage","history","useHistory","useContext","isOnline","window","onLine","setIsOnline","setOffline","setOnline","addEventListener","removeEventListener","useNetworkStatus","loading","setLoading","useReducer","forecastState","forecastStateDispatch","updateForecast","useCallback","finally","transformTemperature","transformForecast","transformedForecast","useMemo","transformedHourlyForecast","currentDate","endDate","setDate","getDate","setHours","currentHourlyPeriods","filter","menuAnchor","setMenuAnchor","activeTab","setActiveTab","activeAlerts","TabContext","e","currentTarget","Boolean","push","routes","SETTINGS","LinearProgress","Alert","Link","href","TabPanel","BottomNavigation","showLabels","BottomNavigationAction","Schedule","label","CalendarToday","UnitMenu","children","SettingsUpdateContext","listSubHeader","primary","fontSize","body1","speedUnits","Object","keys","temperatureUnits","SettingsPage","updateSettings","speedUnitMenuAnchor","setSpeedUnitMenuAnchor","temperatureUnitMenuAnchor","setTemperatureUnitMenuAnchor","goBack","SpeedUnitUtils","TemperatureUnitUtils","List","ListSubheader","inset","ListItem","button","firstElementChild","ListItemText","secondary","settingsReducer","update","generateKey","settingsService","defaultValue","loadOrDefault","App","loadAllOrDefault","settingsState","settingsDispatch","Provider","forEach","save","path","DASHBOARD","exact","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6678e872.chunk.js","sourcesContent":["export enum DistanceUnit {\n  Inch = \"INCH\",\n  Meter = \"METER\",\n  Mile = \"MILE\",\n  Kilometer = \"KILOMETER\",\n}\n","export enum ForecastType {\n  Daily,\n  Hourly,\n}\n","export enum PressureUnit {\n  Pascal = \"PASCAL\",\n  NewtonPerSquareMeter = \"NEWTON_PER_SQUARE_METER\",\n  PoundsPerSquareInch = \"POUNDS_PER_SQUARE_INCH\",\n  Bar = \"BAR\",\n}\n","export enum SpeedUnit {\n  KilometersPerHour = \"KILOMETERS_PER_HOUR\",\n  MetersPerSecond = \"METERS_PER_SECOND\",\n  MilesPerHour = \"MILES_PER_HOUR\",\n}\n","export enum TemperatureUnit {\n  Celsius = \"CELSIUS\",\n  Fahrenheit = \"FAHRENHEIT\",\n  Kelvin = \"KELVIN\",\n}\n","export default class UnexpectedUnitCodeException extends Error {\n  constructor(public unitCode: string) {\n    super(`Unexpected unit code: ${unitCode}`);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, UnexpectedUnitCodeException);\n    }\n\n    this.name = \"UnexpectedUnitCodeException\";\n  }\n}\n","import axios, { AxiosInstance } from \"axios\";\nimport { DistanceUnit } from \"../enums/distance-unit\";\nimport { ForecastType } from \"../enums/forecast-type\";\nimport { PressureUnit } from \"../enums/pressure-unit\";\nimport { SpeedUnit } from \"../enums/speed-unit\";\nimport { TemperatureUnit } from \"../enums/temperature-unit\";\nimport UnexpectedUnitCodeException from \"../exceptions/unexpected-unit-code.exceptions\";\nimport Alert from \"../interfaces/alert\";\nimport AlertsResponse from \"../interfaces/alerts-response\";\nimport { Forecast, Period } from \"../interfaces/forecast\";\nimport ForecastResponse, {\n  Period as RawPeriod,\n} from \"../interfaces/forecast-response\";\nimport { Observation } from \"../interfaces/observation\";\nimport { PointInfo } from \"../interfaces/point-info\";\nimport PointInfoResponse from \"../interfaces/point-info-response\";\nimport { Station } from \"../interfaces/station\";\nimport StationObservationsResponse from \"../interfaces/station-observations-response\";\nimport StationsResponse from \"../interfaces/stations-response\";\nimport { Certainty } from \"../types/certainty\";\nimport { Distance } from \"../types/distance\";\nimport { GetActiveAlertsParams } from \"../types/get-active-alerts-params\";\nimport { MessageType } from \"../types/message-type\";\nimport { Pressure } from \"../types/pressure\";\nimport { Severity } from \"../types/severity\";\nimport { Speed } from \"../types/speed\";\nimport { Status } from \"../types/status\";\nimport { Temperature } from \"../types/temperature\";\nimport { Urgency } from \"../types/urgency\";\n\nclass NWSService {\n  constructor(private apiClient: AxiosInstance) {}\n\n  async getActiveAlertsRaw(\n    params: GetActiveAlertsParams\n  ): Promise<AlertsResponse> {\n    return (await this.apiClient.get(\"/alerts/active\", { params })).data;\n  }\n\n  async getActiveAlerts(params: GetActiveAlertsParams): Promise<Alert[]> {\n    return (await this.getActiveAlertsRaw(params)).features.map(\n      ({\n        properties: {\n          id,\n          sent,\n          effective,\n          onset,\n          expires,\n          ends,\n          status,\n          messageType,\n          severity,\n          certainty,\n          urgency,\n          ...rest\n        },\n      }) => ({\n        id,\n        sent: convertToDateIfNotNull(sent),\n        effective: convertToDateIfNotNull(effective),\n        onset: convertToDateIfNotNull(onset),\n        expires: convertToDateIfNotNull(expires),\n        ends: convertToDateIfNotNull(ends),\n        status: status.toLowerCase() as Status,\n        messageType: messageType.toLowerCase() as MessageType,\n        severity: severity.toLowerCase() as Severity,\n        certainty: certainty.toLowerCase() as Certainty,\n        urgency: urgency.toLowerCase() as Urgency,\n        ...rest,\n      })\n    );\n  }\n\n  async getPointInfoRaw(\n    latitude: number,\n    longitude: number\n  ): Promise<PointInfoResponse> {\n    return (await this.apiClient.get(`/points/${latitude},${longitude}`)).data;\n  }\n\n  async getPointInfo(latitude: number, longitude: number): Promise<PointInfo> {\n    const rawPointInfo = await this.getPointInfoRaw(latitude, longitude);\n    return {\n      coordinates: [\n        rawPointInfo.geometry.coordinates[0],\n        rawPointInfo.geometry.coordinates[1],\n      ],\n      gridId: rawPointInfo.properties.gridId,\n      gridX: rawPointInfo.properties.gridX,\n      gridY: rawPointInfo.properties.gridY,\n      timeZone: rawPointInfo.properties.timeZone,\n      radarStation: rawPointInfo.properties.timeZone,\n      relativeLocation: {\n        city: rawPointInfo.properties.relativeLocation.properties.city,\n        state: rawPointInfo.properties.relativeLocation.properties.state,\n      },\n    };\n  }\n\n  async getRawForecast({\n    wfo,\n    x,\n    y,\n  }: GridPointsParams): Promise<ForecastResponse> {\n    return (await this.apiClient.get(`/gridpoints/${wfo}/${x},${y}/forecast`))\n      .data;\n  }\n\n  async getForecast(params: GridPointsParams): Promise<Forecast> {\n    return convertForecastResponseToForecast(await this.getRawForecast(params));\n  }\n\n  async getRawHourlyForecast({\n    wfo,\n    x,\n    y,\n  }: GridPointsParams): Promise<ForecastResponse> {\n    return (\n      await this.apiClient.get(`/gridpoints/${wfo}/${x},${y}/forecast/hourly`)\n    ).data;\n  }\n\n  async getHourlyForecast(params: GridPointsParams): Promise<Forecast> {\n    return convertForecastResponseToForecast(\n      await this.getRawHourlyForecast(params)\n    );\n  }\n\n  async getRawStations({\n    wfo,\n    x,\n    y,\n  }: GridPointsParams): Promise<StationsResponse> {\n    return (await this.apiClient.get(`/gridpoints/${wfo}/${x},${y}/stations`))\n      .data;\n  }\n\n  async getStations(params: GridPointsParams): Promise<Station[]> {\n    const { features } = await this.getRawStations(params);\n    return features.map(({ properties }) => ({\n      id: properties.stationIdentifier,\n      name: properties.name,\n      timeZone: properties.timeZone,\n    }));\n  }\n\n  async getRawStationObservations({\n    stationId,\n    ...queryParams\n  }: GetStationObservationsParams): Promise<StationObservationsResponse> {\n    return (\n      await this.apiClient.get(`/stations/${stationId}/observations`, {\n        params: queryParams,\n      })\n    ).data;\n  }\n\n  async getStationObservations(\n    params: GetStationObservationsParams\n  ): Promise<Observation[]> {\n    const { features } = await this.getRawStationObservations(params);\n    return features.map(({ properties }) => ({\n      station: properties.station, // NOTE: Not ID\n      timestamp: new Date(properties.timestamp),\n      description: properties.textDescription,\n      icon: properties.icon,\n      temperature: convertTemperature(properties.temperature),\n      windDirection: properties.windDirection.value ?? undefined,\n      windSpeed: convertSpeed(properties.windSpeed),\n      windGust: convertSpeed(properties.windGust),\n      barometricPressure: convertPressure(properties.barometricPressure),\n      seaLevelPressure: convertPressure(properties.seaLevelPressure),\n      visibility: convertDistance(properties.visibility),\n      maxTemperatureLast24Hours: convertTemperature(\n        properties.maxTemperatureLast24Hours\n      ),\n      minTemperatureLast24Hours: convertTemperature(\n        properties.minTemperatureLast24Hours\n      ),\n      precipitationLastHour: convertDistance(properties.precipitationLastHour),\n      precipitationLast3Hours: convertDistance(\n        properties.precipitationLast3Hours\n      ),\n      precipitationLast6Hours: convertDistance(\n        properties.precipitationLast6Hours\n      ),\n      relativeHumidity: convertRelativeHumidity(properties.relativeHumidity),\n      windChill: convertTemperature(properties.windChill),\n      heatIndex: convertTemperature(properties.heatIndex),\n    }));\n  }\n}\n\ninterface GetStationObservationsParams {\n  stationId: string;\n  station?: string[];\n  start?: string;\n  end?: string;\n  limit?: number;\n}\n\ninterface GridPointsParams {\n  wfo: string;\n  x: number;\n  y: number;\n}\n\nconst nwsService = new NWSService(\n  axios.create({\n    baseURL: \"https://api.weather.gov\",\n    headers: { Accept: \"application/geo+json\" },\n  })\n);\n\nexport default nwsService;\n\n// Internal conversion functions\n\nfunction convertToDateIfNotNull(date: string): Date;\nfunction convertToDateIfNotNull(date: null): null;\nfunction convertToDateIfNotNull(date: string | null): Date | null;\nfunction convertToDateIfNotNull(date: string | null) {\n  if (date === null) {\n    return null;\n  }\n  return new Date(date);\n}\n\nfunction convertRawPeriodToPeriod(rawPeriod: RawPeriod): Period {\n  return {\n    name: rawPeriod.name,\n    startTime: new Date(rawPeriod.startTime),\n    endTime: new Date(rawPeriod.endTime),\n    isDayTime: rawPeriod.isDaytime,\n    temperature: convertTemperature({\n      value: rawPeriod.temperature,\n      unitCode: rawPeriod.temperatureUnit,\n    }),\n    icon: rawPeriod.icon,\n    shortForecast: rawPeriod.shortForecast,\n    detailedForecast: rawPeriod.detailedForecast,\n  };\n}\n\nfunction convertForecastResponseToForecast({\n  properties,\n}: ForecastResponse): Forecast {\n  return {\n    updatedTime: new Date(properties.updateTime),\n    type: ForecastType.Daily,\n    periods: properties.periods.map(convertRawPeriodToPeriod),\n  };\n}\n\nfunction convertDistance({\n  value,\n  unitCode,\n}: PossiblyNullValueWithUnitCode): Distance | undefined {\n  if (value === null) {\n    return undefined;\n  }\n  if (unitCode === \"unit:in\") {\n    return { value, unit: DistanceUnit.Inch };\n  }\n  if (unitCode === \"unit:m\") {\n    return { value, unit: DistanceUnit.Meter };\n  }\n  if (unitCode === \"unit:km\") {\n    return { value, unit: DistanceUnit.Kilometer };\n  }\n  throw new UnexpectedUnitCodeException(unitCode);\n}\n\nfunction convertRelativeHumidity({\n  value,\n  unitCode,\n}: PossiblyNullValueWithUnitCode): number | undefined {\n  if (value === null) {\n    return undefined;\n  }\n  if (unitCode === \"unit:percent\") {\n    return value;\n  }\n  throw new UnexpectedUnitCodeException(unitCode);\n}\n\nfunction convertSpeed({\n  value,\n  unitCode,\n}: PossiblyNullValueWithUnitCode): Speed | undefined {\n  if (value === null) {\n    return undefined;\n  }\n  if (unitCode === \"unit:km_h-1\") {\n    return { value, unit: SpeedUnit.KilometersPerHour };\n  }\n  throw new UnexpectedUnitCodeException(unitCode);\n}\n\nfunction convertTemperature(params: {\n  value: null;\n  unitCode: string;\n}): undefined;\nfunction convertTemperature(params: {\n  value: number;\n  unitCode: string;\n}): Temperature;\nfunction convertTemperature(\n  params: PossiblyNullValueWithUnitCode\n): Temperature | undefined;\nfunction convertTemperature({\n  value,\n  unitCode,\n}: PossiblyNullValueWithUnitCode): Temperature | undefined {\n  if (value === null) {\n    return undefined;\n  }\n  if (unitCode === \"C\" || unitCode === \"unit:degC\") {\n    return { value, unit: TemperatureUnit.Celsius };\n  }\n  if (unitCode === \"F\") {\n    return { value, unit: TemperatureUnit.Fahrenheit };\n  }\n  if (unitCode === \"K\") {\n    return { value, unit: TemperatureUnit.Kelvin };\n  }\n  throw new UnexpectedUnitCodeException(unitCode);\n}\n\nfunction convertPressure({\n  value,\n  unitCode,\n}: PossiblyNullValueWithUnitCode): Pressure | undefined {\n  if (value === null) {\n    return undefined;\n  }\n  if (unitCode === \"unit:Pa\") {\n    return { value, unit: PressureUnit.Pascal };\n  }\n  throw new UnexpectedUnitCodeException(unitCode);\n}\n\ntype PossiblyNullValueWithUnitCode = { value: number | null; unitCode: string };\n","/**\n * Calls `localStorage.setItem()` with `key` and the result of calling\n * `JSON.stringify()` with `value` for `value`.\n */\nfunction setItem(key: string, value: any) {\n  localStorage.setItem(key, JSON.stringify(value));\n}\n\n/**\n * Calls `localStorage.getItem()` with `key`. If the result is `null`, it gets\n * returned. Otherwise, the result of calling `JSON.parse()` with the value is\n * returned.\n */\nfunction getItem(\n  key: string,\n  reviver?: (this: any, key: string, value: any) => any\n): any | null {\n  const value = localStorage.getItem(key);\n  if (value === null) {\n    return null;\n  }\n  return JSON.parse(value, reviver);\n}\n\n/**\n * Provides convenience wrappers for functions of `localStorage`.\n */\nconst localStorageService = {\n  setItem,\n  getItem,\n};\n\nexport default localStorageService;\n","import ForecastState from \"../interfaces/forecast-state\";\n\ntype Action = { type: \"updateForecast\"; payload: Partial<ForecastState> };\n\nexport default function forecastReducer(\n  state: ForecastState,\n  action: Action\n): ForecastState {\n  switch (action.type) {\n    case \"updateForecast\":\n      return { ...state, ...action.payload };\n  }\n}\n","import {\n  Menu as MuiMenu,\n  MenuProps as MuiMenuProps,\n  MenuItem,\n} from \"@material-ui/core\";\n\ninterface MenuProps {\n  open?: boolean;\n  anchorEl?: MuiMenuProps[\"anchorEl\"];\n  anchorOrigin?: MuiMenuProps[\"anchorOrigin\"];\n  onClose?: MuiMenuProps[\"onClose\"];\n  onRefreshClicked?: () => void;\n  onSettingsClicked?: () => void;\n}\n\nexport default function Menu({\n  open = false,\n  anchorEl,\n  anchorOrigin,\n  onClose,\n  onRefreshClicked,\n  onSettingsClicked,\n}: MenuProps) {\n  return (\n    <MuiMenu\n      open={open}\n      anchorEl={anchorEl}\n      anchorOrigin={anchorOrigin}\n      onClose={onClose}\n    >\n      <MenuItem onClick={onRefreshClicked}>Refresh</MenuItem>\n      <MenuItem onClick={onSettingsClicked}>Settings</MenuItem>\n    </MuiMenu>\n  );\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  body: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    overflowY: \"auto\",\n    flexGrow: 1,\n  },\n  main: {\n    flexGrow: 1,\n  },\n  hourlyForecastPage: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: theme.spacing(1),\n  },\n  bottomNavigation: {\n    borderTop: \"1px solid\",\n    borderColor: theme.palette.divider,\n    // Prevent the navigation bar from changing height when changing tabs\n    minHeight: \"56px\",\n  },\n}));\n\nexport default useStyles;\n","/* eslint-disable jsx-a11y/alt-text */\nimport { Skeleton, SkeletonProps } from \"@material-ui/lab\";\nimport { ImgHTMLAttributes, useLayoutEffect, useRef, useState } from \"react\";\n\ninterface ImageProps extends ImgHTMLAttributes<HTMLImageElement> {\n  skeletonProps?: SkeletonProps;\n  className?: string;\n}\n\n/** A component which shows a placeholder until the image has loaded. */\nexport default function Image({\n  skeletonProps,\n  className,\n  ...imageProps\n}: ImageProps) {\n  const imageRef = useRef<HTMLImageElement>(null);\n  const [loaded, setLoaded] = useState(false);\n\n  useLayoutEffect(() => {\n    // Do not show the placeholder if the image has already completely loaded\n    if (imageRef.current === null) {\n      return;\n    }\n    if (imageRef.current.complete) {\n      setLoaded(true);\n    } else {\n      imageRef.current.onload = () => setLoaded(true);\n      imageRef.current.onerror = () => setLoaded(true);\n    }\n  }, []);\n\n  return (\n    <>\n      {!loaded && (\n        <Skeleton className={className} variant=\"rect\" {...skeletonProps} />\n      )}\n      <img\n        ref={imageRef}\n        className={className}\n        style={{ display: loaded ? undefined : \"none\" }}\n        {...imageProps}\n      />\n    </>\n  );\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"grid\",\n    alignItems: \"center\",\n    gridTemplateColumns: \"repeat(4, auto)\",\n    gap: theme.spacing(1),\n  },\n  temperature: {\n    fontWeight: \"bold\",\n  },\n}));\n\nexport default useStyles;\n","export enum NWSIconSize {\n  Small = 56,\n  Medium = 86,\n  large = 134,\n}\n","import { TemperatureUnit } from \"../../nws/enums/temperature-unit\";\nimport { Temperature } from \"../../nws/types/temperature\";\n\n/**\n * Returns a formatted temperature string.\n *\n * @param value - The temperature sans unit\n * @param unit - The unit\n * @returns The temperature formatted as a string\n */\nexport function format({ value, unit }: Temperature): string {\n  switch (unit) {\n    case TemperatureUnit.Celsius:\n      return `${value}℃`;\n    case TemperatureUnit.Fahrenheit:\n      return `${value}℉`;\n    case TemperatureUnit.Kelvin:\n      return `${value}K`;\n    default:\n      return `${value}`;\n  }\n}\n\n/**\n * Converts temperature to Kelvin.\n *\n * @returns A `Temperature` object in Kelvin\n */\nfunction covertToKelvin({ value, unit }: Temperature): Temperature {\n  switch (unit) {\n    case TemperatureUnit.Celsius:\n      return { value: value + 273.15, unit: TemperatureUnit.Kelvin };\n    case TemperatureUnit.Fahrenheit:\n      return {\n        value: ((value - 32) * 5) / 9 + 273.15,\n        unit: TemperatureUnit.Kelvin,\n      };\n    case TemperatureUnit.Kelvin:\n      return { value, unit };\n  }\n}\n\n/**\n * Converts a temperature to a specified unit.\n *\n * @param temperature - The temperature to convert\n * @param targetUnit - The target unit\n * @returns The `temperature` in `targetUnit`\n */\nexport function convert(\n  temperature: Temperature,\n  targetUnit: TemperatureUnit\n): Temperature {\n  const { value: kelvinValue } = covertToKelvin(temperature);\n  switch (targetUnit) {\n    case TemperatureUnit.Celsius:\n      return { value: kelvinValue - 273.15, unit: targetUnit };\n    case TemperatureUnit.Fahrenheit:\n      return {\n        value: ((kelvinValue - 273.15) * 9) / 5 + 32,\n        unit: targetUnit,\n      };\n    case TemperatureUnit.Kelvin:\n      return { value: kelvinValue, unit: targetUnit };\n  }\n}\n\n/**\n * Rounds a temperature to the nearest integer.\n *\n * @returns A `Temperature` object with value rounded to the nearest integer\n */\nexport function round({ value, ...rest }: Temperature): Temperature {\n  return { value: Math.round(value), ...rest };\n}\n","import { Typography } from \"@material-ui/core\";\nimport Image from \"../../common/components/image\";\nimport { Period } from \"../../nws/interfaces/forecast\";\nimport useStyles from \"./hourly-forecast.styles\";\nimport * as TemperatureUtils from \"../utils/temperature.utils\";\nimport { NWSIconSize } from \"../enums/nws-icon-size\";\nimport { Fragment } from \"react\";\n\ninterface HourlyForecastProps {\n  forecast: Period[];\n}\n\nexport default function HourlyForecast({ forecast }: HourlyForecastProps) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      {forecast.map(({ startTime, icon, shortForecast, temperature }) => (\n        <Fragment key={startTime.toISOString()}>\n          <Typography className={classes.temperature}>\n            {startTime.toLocaleTimeString(undefined, { hour: \"numeric\" })}\n          </Typography>\n          <Image\n            src={icon}\n            alt=\"\"\n            height={NWSIconSize.Small}\n            width={NWSIconSize.Small}\n            skeletonProps={{\n              height: NWSIconSize.Small,\n              width: NWSIconSize.Small,\n            }}\n          />\n          <Typography>{shortForecast}</Typography>\n          <Typography>{TemperatureUtils.format(temperature)}</Typography>\n        </Fragment>\n      ))}\n    </div>\n  );\n}\n","import { SpeedUnit } from \"../../nws/enums/speed-unit\";\nimport { Speed } from \"../../nws/types/speed\";\n\n/**\n * Returns a formatted speed string.\n *\n * @returns The speed formatted as a string\n */\nexport function format({ value, unit }: Speed): string {\n  switch (unit) {\n    case SpeedUnit.KilometersPerHour:\n      return `${value} km/h`;\n    case SpeedUnit.MetersPerSecond:\n      return `${value} m/s`;\n    case SpeedUnit.MilesPerHour:\n      return `${value} mph`;\n    default:\n      return `${value}`;\n  }\n}\n\n/**\n * Converts a `Speed` object to meters per second.\n *\n * @returns A `Speed` object with a value in meters per second\n */\nfunction convertToMetersPerSecond({ value, unit }: Speed): Speed {\n  switch (unit) {\n    case SpeedUnit.KilometersPerHour:\n      return { value: value / 3.6, unit: SpeedUnit.MetersPerSecond };\n    case SpeedUnit.MetersPerSecond:\n      return { value, unit };\n    case SpeedUnit.MilesPerHour:\n      return { value: value / 2.237, unit: SpeedUnit.MetersPerSecond };\n  }\n}\n\n/**\n * Converts a speed to the target unit.\n *\n * @param speed - The speed to convert\n * @param targetUnit - The unit to convert `speed` to\n * @returns The `Speed` object converted to `targetUnit`\n */\nexport function convert(speed: Speed, targetUnit: SpeedUnit): Speed {\n  const { value: valueInMetersPerSecond } = convertToMetersPerSecond(speed);\n  switch (targetUnit) {\n    case SpeedUnit.KilometersPerHour:\n      return { value: valueInMetersPerSecond * 3.6, unit: targetUnit };\n    case SpeedUnit.MetersPerSecond:\n      return { value: valueInMetersPerSecond, unit: targetUnit };\n    case SpeedUnit.MilesPerHour:\n      return { value: valueInMetersPerSecond * 2.237, unit: targetUnit };\n  }\n}\n\n/**\n * Rounds a speed to the nearest integer.\n *\n * @returns The `Speed` object with value rounded to the nearest integer\n */\nexport function round({ value, ...rest }: Speed): Speed {\n  return { value: Math.round(value), ...rest };\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  icon: {\n    alignSelf: \"flex-start\",\n  },\n});\n\nexport default useStyles;\n","import { Box, Card, CardContent, Typography } from \"@material-ui/core\";\nimport Image from \"../../common/components/image\";\nimport { Speed } from \"../../nws/types/speed\";\nimport { Temperature } from \"../../nws/types/temperature\";\nimport { NWSIconSize } from \"../enums/nws-icon-size\";\nimport * as SpeedUtils from \"../utils/speed.utils\";\nimport * as TemperatureUtils from \"../utils/temperature.utils\";\nimport useStyles from \"./weather-card.styles\";\n\nexport interface WeatherCardProps {\n  icon: string;\n  shortForecast: string;\n  temperature: Temperature;\n  windSpeed?: Speed;\n  relativeHumidity?: number;\n  updateTime?: Date;\n  station?: string;\n}\n\nexport default function WeatherCard({\n  icon,\n  shortForecast,\n  temperature,\n  windSpeed,\n  relativeHumidity,\n  updateTime,\n  station,\n}: WeatherCardProps) {\n  const classes = useStyles();\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\">{shortForecast}</Typography>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Image\n            className={classes.icon}\n            alt=\"\"\n            src={icon}\n            height={NWSIconSize.Medium}\n            width={NWSIconSize.Medium}\n            skeletonProps={{\n              height: NWSIconSize.Medium,\n              width: NWSIconSize.Medium,\n            }}\n          />\n          <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-end\">\n            <Typography variant=\"h3\">\n              {TemperatureUtils.format(temperature)}\n            </Typography>\n            {relativeHumidity !== undefined && (\n              <Typography>{`Humidity: ${Math.round(\n                relativeHumidity\n              )}%`}</Typography>\n            )}\n            {windSpeed !== undefined && (\n              <Typography>{`Wind: ${SpeedUtils.format(windSpeed)}`}</Typography>\n            )}\n            {updateTime && (\n              <Box display=\"flex\" justifyContent=\"flex-end\">\n                <Typography variant=\"caption\">\n                  {updateTime.toLocaleString()}\n                </Typography>\n              </Box>\n            )}\n            {updateTime && (\n              <Box display=\"flex\" justifyContent=\"flex-end\">\n                <Typography variant=\"caption\">{station}</Typography>\n              </Box>\n            )}\n          </Box>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n","import { Period } from \"../../nws/interfaces/forecast\";\nimport HourlyForecast from \"../components/hourly-forecast\";\nimport WeatherCard, { WeatherCardProps } from \"../components/weather-card\";\n\ninterface HourlyForecastPageProps {\n  currentWeather: Omit<WeatherCardProps, \"updateTime\" | \"station\">;\n  hourlyForecast: Period[];\n  updateTime: Date;\n  station: string;\n  className?: string;\n}\n\nexport default function HourlyForecastPage({\n  currentWeather,\n  hourlyForecast,\n  updateTime,\n  station,\n  className,\n}: HourlyForecastPageProps) {\n  return (\n    <div className={className}>\n      <WeatherCard\n        icon={currentWeather.icon}\n        shortForecast={currentWeather.shortForecast}\n        temperature={currentWeather.temperature}\n        windSpeed={currentWeather.windSpeed}\n        relativeHumidity={currentWeather.relativeHumidity}\n        updateTime={updateTime}\n        station={station}\n      />\n      <HourlyForecast forecast={hourlyForecast} />\n    </div>\n  );\n}\n","import { SpeedUnit } from \"../../nws/enums/speed-unit\";\nimport { TemperatureUnit } from \"../../nws/enums/temperature-unit\";\nimport Settings from \"../interfaces/settings\";\n\n/** The default settings to use when not set. */\nexport const defaultSettings: Settings = {\n  speedUnit: SpeedUnit.MilesPerHour,\n  temperatureUnit: TemperatureUnit.Fahrenheit,\n};\n","import { createContext } from \"react\";\nimport { defaultSettings } from \"../constants/default-settings\";\nimport Settings from \"../interfaces/settings\";\n\n/** Context for user settings. */\nexport const SettingsContext = createContext<Settings>(defaultSettings);\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: theme.spacing(2),\n  },\n  forecastTile: {\n    display: \"grid\",\n    gridTemplateAreas: `\n    \"forecastTileTitle forecastTileTitle forecastTileTitle\"\n    \"forecastTileIcon forecastTileDescription forecastTileTemperature\"\n    `,\n    alignItems: \"center\",\n    columnGap: theme.spacing(1),\n  },\n  forecastTileTitle: {\n    gridArea: \"forecastTileTitle\",\n    justifySelf: \"start\",\n  },\n  forecastTileIcon: {\n    gridArea: \"forecastTileIcon\",\n  },\n  forecastTileDescription: {\n    gridArea: \"forecastTileDescription\",\n  },\n  forecastTileTemperature: {\n    gridArea: \"forecastTileTemperature\",\n    justifySelf: \"end\",\n  },\n}));\n\nexport default useStyles;\n","import { Typography } from \"@material-ui/core\";\nimport { Period } from \"../../nws/interfaces/forecast\";\nimport useStyles from \"./daily-forecast.page.styles\";\nimport * as TemperatureUtils from \"../utils/temperature.utils\";\nimport Image from \"../../common/components/image\";\nimport { NWSIconSize } from \"../enums/nws-icon-size\";\n\ninterface DailyForecastPageProps {\n  forecast: Period[];\n}\n\nexport default function DailyForecastPage({\n  forecast,\n}: DailyForecastPageProps) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      {forecast.map((period) => (\n        <div\n          className={classes.forecastTile}\n          key={period.startTime.toISOString()}\n        >\n          <Typography className={classes.forecastTileTitle} variant=\"h6\">\n            {period.name}\n          </Typography>\n          <Image\n            className={classes.forecastTileIcon}\n            src={period.icon}\n            alt=\"\"\n            height={NWSIconSize.Medium}\n            width={NWSIconSize.Medium}\n            skeletonProps={{\n              height: NWSIconSize.Medium,\n              width: NWSIconSize.Medium,\n            }}\n          />\n          <Typography className={classes.forecastTileDescription}>\n            {period.shortForecast}\n          </Typography>\n          <Typography variant=\"h6\" className={classes.forecastTileTemperature}>\n            {TemperatureUtils.format(period.temperature)}\n          </Typography>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import axios, { AxiosInstance } from \"axios\";\nimport Candidate from \"../interfaces/candidate\";\nimport FindAddressCandidatesParams from \"../interfaces/find-address-candidates-params\";\nimport FindAddressCandidatesResponse from \"../interfaces/find-address-candidates-response\";\nimport SuggestParams from \"../interfaces/suggest-params\";\nimport SuggestResponse from \"../interfaces/suggest-response\";\nimport Suggestion from \"../interfaces/suggestion\";\n\nexport class ArcGISGeocodingService {\n  constructor(private apiClient: AxiosInstance) {}\n\n  async suggest(params: SuggestParams): Promise<Suggestion[]> {\n    const {\n      data: { suggestions },\n    } = await this.apiClient.get<SuggestResponse>(\"/suggest\", {\n      params,\n    });\n    return suggestions;\n  }\n\n  async findAddressCandidates(\n    params: FindAddressCandidatesParams\n  ): Promise<Candidate[]> {\n    const {\n      data: { candidates },\n    } = await this.apiClient.get<FindAddressCandidatesResponse>(\n      \"/findAddressCandidates\",\n      { params }\n    );\n    return candidates;\n  }\n}\n\nconst arcGISGeocodingService = new ArcGISGeocodingService(\n  axios.create({\n    baseURL:\n      \"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer\",\n    paramsSerializer: (params) => {\n      // Ensure array entries are converted to a format that the API expects\n      return new URLSearchParams(params).toString();\n    },\n  })\n);\n\nexport default arcGISGeocodingService;\n","import { InputAdornment, InputProps, TextField } from \"@material-ui/core\";\nimport { Autocomplete, AutocompleteProps } from \"@material-ui/lab\";\nimport { useEffect, useRef, useState } from \"react\";\nimport useDebouncedValue from \"../../common/hooks/use-debounced-value\";\nimport Candidate from \"../interfaces/candidate\";\nimport SuggestParams from \"../interfaces/suggest-params\";\nimport Suggestion from \"../interfaces/suggestion\";\nimport arcGISGeocodingService from \"../services/arcgis-geocoding.service\";\n\ninterface SearchProps {\n  suggestParams?: Omit<SuggestParams, \"text\" | \"f\">;\n  startAdornment?: InputProps[\"startAdornment\"];\n  autocompleteProps?: Omit<\n    AutocompleteProps<Suggestion, undefined, undefined, undefined>,\n    | \"options\"\n    | \"getOptionLabel\"\n    | \"getOptionSelected\"\n    | \"inputValue\"\n    | \"onInputChange\"\n    | \"value\"\n    | \"onChange\"\n    | \"renderInput\"\n  >;\n  autoFocus?: boolean;\n  placeholder?: string;\n  onSelectionChange?: (value: Candidate) => void;\n}\n\nexport default function Search({\n  suggestParams,\n  startAdornment,\n  autocompleteProps,\n  autoFocus,\n  placeholder,\n  onSelectionChange,\n}: SearchProps) {\n  const [value, setValue] = useState<Suggestion | null>(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);\n\n  const debouncedInputValue = useDebouncedValue(inputValue, 100);\n  const inputChangeReason = useRef(\"\");\n\n  useEffect(() => {\n    if (\n      debouncedInputValue.length > 0 &&\n      // Do not send a request if the reason inputValue changed was because a\n      // value was selected or the value was cleared\n      inputChangeReason.current === \"input\"\n    ) {\n      arcGISGeocodingService\n        .suggest({\n          text: debouncedInputValue,\n          f: \"json\",\n          ...suggestParams,\n        })\n        .then((suggestions) => setSuggestions(suggestions));\n    } else {\n      setSuggestions([]);\n    }\n  }, [debouncedInputValue, suggestParams]);\n\n  return (\n    <Autocomplete\n      options={suggestions}\n      getOptionLabel={(option) => option.text}\n      getOptionSelected={(option, value) => {\n        return (\n          option.isCollection === value.isCollection &&\n          option.magicKey === value.magicKey &&\n          option.text === value.text\n        );\n      }}\n      inputValue={inputValue}\n      onInputChange={(_e, value, reason) => {\n        inputChangeReason.current = reason;\n        setInputValue(value);\n      }}\n      value={value}\n      onChange={(_e, value) => {\n        setValue(value);\n        arcGISGeocodingService\n          .findAddressCandidates({\n            f: \"json\",\n            SingeLine: value?.text,\n            magicKey: value?.magicKey,\n            maxLocations: 1,\n            outFields: [\"City\", \"RegionAbbr\"],\n          })\n          .then((candidates) => onSelectionChange?.(candidates[0]));\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          InputProps={{\n            ...params.InputProps,\n            startAdornment: startAdornment ? (\n              <InputAdornment position=\"start\">{startAdornment}</InputAdornment>\n            ) : undefined,\n          }}\n          autoFocus={autoFocus}\n          placeholder={placeholder}\n        />\n      )}\n      {...autocompleteProps}\n    />\n  );\n}\n","import { useEffect, useRef, useState } from \"react\";\n\nexport default function useDebouncedValue<T>(value: T, timeout: number): T {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  const lastFired = useRef(Date.now());\n\n  useEffect(() => {\n    const handle = setTimeout(() => {\n      setDebouncedValue(value);\n      lastFired.current = Date.now();\n    }, timeout - (Date.now() - lastFired.current));\n    return () => clearTimeout(handle);\n  }, [value, timeout]);\n\n  return debouncedValue;\n}\n","/**\n * Wraps `navigator.geolocation.getCurrentPosition()` in a Promise.\n */\nfunction getCurrentPosition(): Promise<GeolocationPosition> {\n  return new Promise<GeolocationPosition>((res, rej) =>\n    navigator.geolocation.getCurrentPosition(res, rej)\n  );\n}\n\n/**\n * Provides convenience wrappers for function of `navigator.geolocation`.\n */\nconst geolocationService = {\n  getCurrentPosition,\n};\n\nexport default geolocationService;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  searchContainer: {\n    backgroundColor: theme.palette.background.paper,\n    width: \"100%\",\n    padding: `${theme.spacing(0.5)}px ${theme.spacing(1)}px`,\n    display: \"flex\",\n    alignItems: \"center\",\n    gap: theme.spacing(1),\n    borderRadius: theme.shape.borderRadius,\n    flexGrow: 1,\n  },\n  searchOrLocateContainer: {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    gap: theme.spacing(1),\n  },\n  searchExitButton: {\n    padding: 0,\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n}));\n\nexport default useStyles;\n","import {\n  AppBar as MuiAppBar,\n  Toolbar,\n  Typography,\n  IconButton,\n  Box,\n  IconButtonProps,\n} from \"@material-ui/core\";\nimport {\n  ArrowBack as ArrowBackIcon,\n  MoreVert as MoreVertIcon,\n  MyLocation as MyLocationIcon,\n  Search as SearchIcon,\n} from \"@material-ui/icons\";\nimport { useState } from \"react\";\nimport Search from \"../../arcgis-geocoding/components/search\";\nimport geolocationService from \"../../common/services/geolocation.service\";\nimport useStyles from \"./app-bar.styles\";\n\ninterface AppBarProps {\n  location?: string;\n  onShowMenu?: IconButtonProps[\"onClick\"];\n  onLocationChange?: (latitude: number, longitude: number) => void;\n}\n\nexport default function AppBar({\n  location,\n  onShowMenu,\n  onLocationChange,\n}: AppBarProps) {\n  const classes = useStyles();\n  const [showSearch, setShowSearch] = useState(false);\n  return (\n    <MuiAppBar position=\"sticky\">\n      <Toolbar>\n        {!showSearch ? (\n          <>\n            <Typography variant=\"h6\">{location ?? \"Unknown\"}</Typography>\n            <IconButton color=\"inherit\" onClick={() => setShowSearch(true)}>\n              <SearchIcon />\n            </IconButton>\n            <Box className={classes.spacer} />\n            <IconButton color=\"inherit\" edge=\"end\" onClick={onShowMenu}>\n              <MoreVertIcon />\n            </IconButton>\n          </>\n        ) : (\n          <div className={classes.searchOrLocateContainer}>\n            <div className={classes.searchContainer}>\n              <Search\n                autoFocus\n                placeholder=\"Search location\"\n                autocompleteProps={{\n                  autoHighlight: true,\n                  fullWidth: true,\n                }}\n                startAdornment={\n                  <IconButton\n                    className={classes.searchExitButton}\n                    onClick={() => setShowSearch(false)}\n                  >\n                    <ArrowBackIcon />\n                  </IconButton>\n                }\n                suggestParams={{\n                  category: [\"Postal\", \"Populated Place\"],\n                  countryCode: \"USA\",\n                }}\n                onSelectionChange={({ location: { x, y } }) => {\n                  setShowSearch(false);\n                  onLocationChange?.(y, x);\n                }}\n              />\n            </div>\n            <IconButton\n              color=\"inherit\"\n              className={classes.searchExitButton}\n              onClick={() => {\n                setShowSearch(false);\n                if (onLocationChange) {\n                  geolocationService.getCurrentPosition().then(({ coords }) => {\n                    onLocationChange(coords.latitude, coords.longitude);\n                  });\n                }\n              }}\n            >\n              <MyLocationIcon />\n            </IconButton>\n          </div>\n        )}\n      </Toolbar>\n    </MuiAppBar>\n  );\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  alertSummary: {\n    display: \"flex\",\n    alignItems: \"center\",\n    columnGap: theme.spacing(1),\n  },\n  alertDetails: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    rowGap: theme.spacing(2),\n    textAlign: \"start\",\n  },\n  preformattedElement: {\n    whiteSpace: \"pre-wrap\",\n  },\n}));\n\nexport default useStyles;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  alertInfoGridHeadingCell: {\n    justifySelf: \"end\",\n    fontWeight: theme.typography.fontWeightBold,\n  },\n  alertInfoGridDataCell: {\n    justifySelf: \"start\",\n  },\n}));\n\nexport default useStyles;\n","import useStyles from \"./alert-info-grid-item.styles\";\n\nexport interface AlertInfoGridItemProps {\n  heading: string;\n  data: string;\n}\n\nexport default function AlertInfoGridItem({\n  heading,\n  data,\n}: AlertInfoGridItemProps) {\n  const classes = useStyles();\n  return (\n    <>\n      <div className={classes.alertInfoGridHeadingCell}>{heading}</div>\n      <div className={classes.alertInfoGridDataCell}>{data}</div>\n    </>\n  );\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  alertInfoGrid: {\n    display: \"grid\",\n    columnGap: theme.spacing(1),\n    gridTemplateColumns: \"auto 1fr\",\n  },\n}));\n\nexport default useStyles;\n","import Alert from \"../../nws/interfaces/alert\";\nimport AlertInfoGridItem from \"./alert-info-grid-item\";\nimport useStyles from \"./alert-info-grid.styles\";\n\ninterface AlertInfoGridProps {\n  alert: Alert;\n}\n\nexport default function AlertInfoGrid({ alert }: AlertInfoGridProps) {\n  const classes = useStyles();\n  const rows = [\n    [\"Effective\", new Date(alert.effective).toLocaleString()],\n    [\"Expires\", new Date(alert.expires).toLocaleString()],\n    [\"Status\", alert.status],\n    [\"Message type\", alert.messageType],\n    [\"Category\", alert.category],\n    [\"Severity\", alert.severity],\n    [\"Urgency\", alert.urgency],\n    [\"Sender\", alert.senderName],\n  ];\n  return (\n    <div className={classes.alertInfoGrid}>\n      {rows.map((row) => (\n        <AlertInfoGridItem key={row[0]} heading={row[0]} data={row[1]} />\n      ))}\n    </div>\n  );\n}\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from \"@material-ui/core\";\nimport {\n  Error as ErrorIcon,\n  ExpandMore as ExpandMoreIcon,\n  Help as HelpIcon,\n  Info as InfoIcon,\n  Warning as WarningIcon,\n} from \"@material-ui/icons\";\nimport Alert from \"../../nws/interfaces/alert\";\nimport { Severity } from \"../../nws/types/severity\";\nimport useStyles from \"./alert-accordion.styles\";\nimport AlertInfoGrid from \"./alert-info-grid\";\n\ninterface AlertAccordionProps {\n  alert: Alert;\n}\n\nexport default function AlertAccordion({ alert }: AlertAccordionProps) {\n  const classes = useStyles();\n  return (\n    <Accordion>\n      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n        <div className={classes.alertSummary}>\n          {mapSeverityToIcon(alert.severity)}\n          <div>{alert.event}</div>\n        </div>\n      </AccordionSummary>\n      <AccordionDetails>\n        <div className={classes.alertDetails}>\n          <Typography variant=\"h6\">{alert.headline}</Typography>\n          <Typography className={classes.preformattedElement}>\n            {alert.description}\n          </Typography>\n          <Typography className={classes.preformattedElement}>\n            {alert.instruction}\n          </Typography>\n          <AlertInfoGrid alert={alert} />\n        </div>\n      </AccordionDetails>\n    </Accordion>\n  );\n}\n\nfunction mapSeverityToIcon(severity: Severity) {\n  switch (severity) {\n    case \"extreme\":\n    case \"severe\":\n      return <ErrorIcon />;\n    case \"moderate\":\n      return <WarningIcon />;\n    case \"minor\":\n      return <InfoIcon />;\n    default:\n      return <HelpIcon />;\n  }\n}\n","import Alert from \"../../nws/interfaces/alert\";\nimport AlertAccordion from \"../components/alert-accordion\";\n\ninterface AlertsPageProps {\n  alerts: Alert[];\n}\n\nexport default function AlertsPage({ alerts }: AlertsPageProps) {\n  return (\n    <>\n      {alerts.map((alert) => (\n        <AlertAccordion key={alert.id} alert={alert} />\n      ))}\n    </>\n  );\n}\n","import {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState,\n} from \"react\";\nimport {\n  BottomNavigation,\n  BottomNavigationAction,\n  LinearProgress,\n  Link,\n} from \"@material-ui/core\";\nimport {\n  CalendarToday as CalendarTodayIcon,\n  Schedule as ScheduleIcon,\n  Warning as WarningIcon,\n} from \"@material-ui/icons\";\nimport { Alert, TabContext, TabPanel } from \"@material-ui/lab\";\nimport nwsService from \"../../nws/services/nws.service\";\nimport localStorageService from \"../../common/services/local-storage.service\";\nimport useNetworkStatus from \"../../common/hooks/use-network-status\";\nimport forecastReducer from \"../reducers/forecast-reducer\";\nimport ForecastState from \"../interfaces/forecast-state\";\nimport useSerializeValue from \"../../common/hooks/use-serialize-value\";\nimport Menu from \"../components/menu\";\nimport Coordinates from \"../../common/interfaces/coordinates\";\nimport useStyles from \"./dashboard.page.styles\";\nimport HourlyForecastPage from \"./hourly-forecast.page\";\nimport { useHistory } from \"react-router\";\nimport routes from \"../../common/constants/routes.json\";\nimport * as TemperatureUtils from \"../utils/temperature.utils\";\nimport * as SpeedUtils from \"../utils/speed.utils\";\nimport { SettingsContext } from \"../../settings/contexts/settings.context\";\nimport DailyForecastPage from \"./daily-forecast.page\";\nimport { SpeedUnit } from \"../../nws/enums/speed-unit\";\nimport { TemperatureUnit } from \"../../nws/enums/temperature-unit\";\nimport { Speed } from \"../../nws/types/speed\";\nimport { Temperature } from \"../../nws/types/temperature\";\nimport { Forecast } from \"../../nws/interfaces/forecast\";\nimport AppBar from \"../components/app-bar\";\nimport AlertsPage from \"./alerts.page\";\n\nfunction initializeForecastState(): ForecastState {\n  return (\n    localStorageService.getItem(\"cachedForecast\", (key, value) => {\n      const upperCasedKey = key.toLocaleUpperCase();\n      if (upperCasedKey.includes(\"TIME\") || upperCasedKey.includes(\"DATE\")) {\n        return new Date(value);\n      }\n      return value;\n    }) ?? {\n      location: null,\n      city: null,\n      state: null,\n      forecast: null,\n      hourlyForecast: null,\n      stationId: null,\n      observations: null,\n    }\n  );\n}\n\n/**\n * Returns a new `ForecastState` based on `location`.\n *\n * @param location - The location to get the forecast for\n * @returns A `Promise` for the new `ForecastState`\n */\nasync function getForecast(location: Coordinates): Promise<ForecastState> {\n  try {\n    const {\n      relativeLocation: { city, state },\n      gridId: wfo,\n      gridX: x,\n      gridY: y,\n    } = await nwsService.getPointInfo(location.latitude, location.longitude);\n    const forecast = await nwsService.getForecast({ wfo, x, y });\n    const hourlyForecast = await nwsService.getHourlyForecast({\n      wfo,\n      x,\n      y,\n    });\n    const stations = await nwsService.getStations({ wfo, x, y });\n    const { id: stationId } = stations[0];\n    const observations = await nwsService.getStationObservations({\n      stationId,\n      limit: 1, // Only get the most recent observation\n    });\n    const alerts = await nwsService.getActiveAlerts({\n      point: `${location.latitude},${location.longitude}`,\n    });\n    return {\n      location,\n      city,\n      state,\n      forecast,\n      hourlyForecast,\n      stationId,\n      observations,\n      alerts,\n    };\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\nexport default function DashboardPage() {\n  const classes = useStyles();\n  const history = useHistory();\n  const { speedUnit, temperatureUnit } = useContext(SettingsContext);\n  const isOnline = useNetworkStatus();\n  const [loading, setLoading] = useState(false);\n  const [forecastState, forecastStateDispatch] = useReducer(\n    forecastReducer,\n    undefined,\n    initializeForecastState\n  );\n\n  const {\n    location,\n    city,\n    state,\n    forecast,\n    hourlyForecast,\n    observations,\n    stationId,\n    alerts,\n  } = forecastState;\n\n  const currentWeather = observations?.[0] ?? null;\n\n  const updateForecast = useCallback((location: Coordinates) => {\n    setLoading(true);\n    getForecast(location)\n      .then((state) =>\n        forecastStateDispatch({ type: \"updateForecast\", payload: state })\n      )\n      .finally(() => setLoading(false));\n  }, []);\n\n  // Fetch forecast data when the location gets updated\n  useEffect(() => {\n    if (!location || !isOnline) {\n      return;\n    }\n    updateForecast(location);\n  }, [isOnline, location, updateForecast]);\n\n  // Save information about the last location and forecast retrieved so it can\n  // be used after the application has been closed\n  useSerializeValue(\"cachedForecast\", forecastState);\n\n  const transformTemperature = useCallback(\n    (temperature: Temperature): Temperature =>\n      TemperatureUtils.round(\n        TemperatureUtils.convert(temperature, temperatureUnit)\n      ),\n    [temperatureUnit]\n  );\n\n  const transformSpeed = (speed: Speed): Speed =>\n    SpeedUtils.round(SpeedUtils.convert(speed, speedUnit));\n\n  const transformForecast = useCallback(\n    (forecast: Forecast): Forecast => {\n      return {\n        ...forecast,\n        periods: forecast.periods.map(({ temperature, ...rest }) => ({\n          temperature: transformTemperature(temperature),\n          ...rest,\n        })),\n      };\n    },\n    [transformTemperature]\n  );\n\n  const transformedForecast = useMemo(\n    () => (forecast !== null ? transformForecast(forecast) : null),\n    [forecast, transformForecast]\n  );\n\n  const transformedHourlyForecast = useMemo(\n    () => (hourlyForecast !== null ? transformForecast(hourlyForecast) : null),\n    [hourlyForecast, transformForecast]\n  );\n\n  const currentDate = new Date();\n  const endDate = new Date(currentDate);\n  endDate.setDate(endDate.getDate() + 1);\n  endDate.setHours(0, 0, 0, 0);\n  const currentHourlyPeriods = transformedHourlyForecast?.periods\n    .filter(\n      ({ endTime, startTime }) =>\n        new Date(endTime) > currentDate && new Date(startTime) < endDate\n    )\n    .map(({ temperature, ...rest }) => ({\n      temperature: transformTemperature(temperature),\n      ...rest,\n    }));\n\n  const updateLocation = (latitude: number, longitude: number) => {\n    forecastStateDispatch({\n      type: \"updateForecast\",\n      payload: {\n        location: { latitude, longitude },\n      },\n    });\n  };\n\n  const [menuAnchor, setMenuAnchor] = useState<null | HTMLElement>(null);\n\n  const [activeTab, setActiveTab] = useState(\"hourly\");\n\n  const activeAlerts = (alerts ?? []).filter(\n    ({ expires }) => expires > currentDate\n  );\n\n  return (\n    <div className={classes.root}>\n      <TabContext value={activeTab}>\n        <AppBar\n          location={\n            city || state\n              ? `${city ?? \"Unknown\"}, ${state ?? \"Unknown\"}`\n              : undefined\n          }\n          onShowMenu={(e) => setMenuAnchor(e.currentTarget)}\n          onLocationChange={updateLocation}\n        />\n        <Menu\n          anchorEl={menuAnchor}\n          open={Boolean(menuAnchor)}\n          onClose={() => setMenuAnchor(null)}\n          onRefreshClicked={() => {\n            setMenuAnchor(null);\n            if (!location || !isOnline) {\n              return;\n            }\n            updateForecast(location);\n          }}\n          onSettingsClicked={() => {\n            setMenuAnchor(null);\n            history.push(routes.SETTINGS);\n          }}\n        />\n        {loading && <LinearProgress color=\"secondary\" />}\n        <div className={classes.body}>\n          {activeTab !== \"alerts\" && activeAlerts.length > 0 && (\n            <Alert severity=\"error\">\n              <Link\n                href=\"#\"\n                color=\"inherit\"\n                onClick={() => setActiveTab(\"alerts\")}\n              >\n                Active alerts\n              </Link>\n            </Alert>\n          )}\n          <main className={classes.main}>\n            <TabPanel value=\"hourly\">\n              {currentWeather && currentHourlyPeriods?.length && (\n                <HourlyForecastPage\n                  className={classes.hourlyForecastPage}\n                  updateTime={new Date(currentWeather.timestamp)}\n                  station={stationId ?? \"\"}\n                  currentWeather={{\n                    icon: currentWeather.icon,\n                    shortForecast: currentWeather.description,\n                    temperature: transformTemperature({\n                      value: currentWeather.temperature?.value ?? 0,\n                      unit: TemperatureUnit.Celsius,\n                    }),\n                    windSpeed:\n                      currentWeather?.windSpeed !== undefined\n                        ? transformSpeed({\n                            value: currentWeather.windSpeed.value,\n                            unit: SpeedUnit.KilometersPerHour,\n                          })\n                        : undefined,\n                    relativeHumidity: currentWeather.relativeHumidity,\n                  }}\n                  hourlyForecast={currentHourlyPeriods}\n                />\n              )}\n            </TabPanel>\n            <TabPanel value=\"daily\">\n              <DailyForecastPage\n                forecast={transformedForecast?.periods ?? []}\n              />\n            </TabPanel>\n            <TabPanel value=\"alerts\">\n              <AlertsPage alerts={activeAlerts} />\n            </TabPanel>\n          </main>\n        </div>\n        <BottomNavigation\n          value={activeTab}\n          onChange={(e, value) => setActiveTab(value)}\n          showLabels\n          className={classes.bottomNavigation}\n        >\n          <BottomNavigationAction\n            icon={<ScheduleIcon />}\n            label=\"Hourly\"\n            value=\"hourly\"\n          />\n          <BottomNavigationAction\n            icon={<CalendarTodayIcon />}\n            label=\"Daily\"\n            value=\"daily\"\n          />\n          <BottomNavigationAction\n            icon={<WarningIcon />}\n            label=\"Alerts\"\n            value=\"alerts\"\n          />\n        </BottomNavigation>\n      </TabContext>\n    </div>\n  );\n}\n","import { useEffect } from \"react\";\nimport localStorageService from \"../services/local-storage.service\";\n\n/**\n * Writes a value to localStorage whenever the value changes.\n *\n * @param key - The key in localStorage to use\n * @param value - The value to store in localStorage\n */\nexport default function useSerializeValue(key: string, value: any) {\n  useEffect(() => {\n    localStorageService.setItem(key, value);\n  }, [key, value]);\n}\n","import { useEffect, useState } from \"react\";\n\n/**\n * Returns the browser's online status.\n */\nexport default function useNetworkStatus() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n  useEffect(() => {\n    function setOffline() {\n      setIsOnline(false);\n    }\n    function setOnline() {\n      setIsOnline(true);\n    }\n    window.addEventListener(\"offline\", setOffline);\n    window.addEventListener(\"online\", setOnline);\n\n    return () => {\n      window.removeEventListener(\"offline\", setOffline);\n      window.removeEventListener(\"online\", setOnline);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import { Menu, MenuProps } from \"@material-ui/core\";\nimport { ReactNode } from \"react\";\n\ninterface UnitMenuProps {\n  open?: boolean;\n  anchorEl?: MenuProps[\"anchorEl\"];\n  anchorOrigin?: MenuProps[\"anchorOrigin\"];\n  children?: ReactNode;\n  onClose?: MenuProps[\"onClose\"];\n}\n\nexport default function UnitMenu({\n  open = false,\n  anchorEl,\n  anchorOrigin,\n  children,\n  onClose,\n}: UnitMenuProps) {\n  return (\n    <Menu\n      open={open}\n      anchorEl={anchorEl}\n      anchorOrigin={anchorOrigin}\n      onClose={onClose}\n    >\n      {children}\n    </Menu>\n  );\n}\n","import { createContext } from \"react\";\nimport Settings from \"../interfaces/settings\";\n\n/** Context for passing a callback to update settings. */\nexport const SettingsUpdateContext = createContext<\n  (update: Partial<Settings>) => void\n>(() => {});\n","import { SpeedUnit } from \"../../nws/enums/speed-unit\";\n\nexport function toString(speedUnit: SpeedUnit): string {\n  switch (speedUnit) {\n    case SpeedUnit.KilometersPerHour:\n      return \"Kilometers per hour\";\n    case SpeedUnit.MetersPerSecond:\n      return \"Meters per second\";\n    case SpeedUnit.MilesPerHour:\n      return \"Miles per hour\";\n  }\n}\n","import { TemperatureUnit } from \"../../nws/enums/temperature-unit\";\n\nexport function toString(temperatureUnit: TemperatureUnit): string {\n  switch (temperatureUnit) {\n    case TemperatureUnit.Celsius:\n      return \"Celsius\";\n    case TemperatureUnit.Fahrenheit:\n      return \"Fahrenheit\";\n    case TemperatureUnit.Kelvin:\n      return \"Kelvin\";\n  }\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  listSubHeader: {\n    color: theme.palette.primary.main,\n    fontSize: theme.typography.body1.fontSize,\n    fontWeight: theme.typography.body1.fontWeight,\n    textAlign: \"start\",\n  },\n}));\n\nexport default useStyles;\n","import {\n  AppBar,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  ListSubheader,\n  MenuItem,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { ArrowBack as ArrowBackIcon } from \"@material-ui/icons\";\nimport { useContext, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { SpeedUnit } from \"../../nws/enums/speed-unit\";\nimport { TemperatureUnit } from \"../../nws/enums/temperature-unit\";\nimport UnitMenu from \"../components/unit-menu\";\nimport { SettingsUpdateContext } from \"../contexts/settings-update.context\";\nimport { SettingsContext } from \"../contexts/settings.context\";\nimport * as SpeedUnitUtils from \"../utils/speed-unit.utils\";\nimport * as TemperatureUnitUtils from \"../utils/temperature-unit.utils\";\nimport useStyles from \"./settings.page.styles\";\n\nconst speedUnits = Object.keys(SpeedUnit).map(\n  (key) => SpeedUnit[key as keyof typeof SpeedUnit]\n);\n\nconst temperatureUnits = Object.keys(TemperatureUnit).map(\n  (key) => TemperatureUnit[key as keyof typeof TemperatureUnit]\n);\n\nexport default function SettingsPage() {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const updateSettings = useContext(SettingsUpdateContext);\n\n  const [\n    speedUnitMenuAnchor,\n    setSpeedUnitMenuAnchor,\n  ] = useState<null | Element>(null);\n  const [\n    temperatureUnitMenuAnchor,\n    setTemperatureUnitMenuAnchor,\n  ] = useState<null | Element>(null);\n\n  const { speedUnit, temperatureUnit } = useContext(SettingsContext);\n\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={() => history.goBack()}\n          >\n            <ArrowBackIcon />\n          </IconButton>\n          <Typography variant=\"h6\">Settings</Typography>\n        </Toolbar>\n      </AppBar>\n      <UnitMenu\n        anchorEl={speedUnitMenuAnchor}\n        open={Boolean(speedUnitMenuAnchor)}\n        onClose={() => setSpeedUnitMenuAnchor(null)}\n      >\n        {speedUnits.map((unit) => (\n          <MenuItem\n            key={unit}\n            onClick={() => {\n              updateSettings({ speedUnit: unit });\n              setSpeedUnitMenuAnchor(null);\n            }}\n          >\n            {SpeedUnitUtils.toString(unit)}\n          </MenuItem>\n        ))}\n      </UnitMenu>\n      <UnitMenu\n        anchorEl={temperatureUnitMenuAnchor}\n        open={Boolean(temperatureUnitMenuAnchor)}\n        onClose={() => setTemperatureUnitMenuAnchor(null)}\n      >\n        {temperatureUnits.map((unit) => (\n          <MenuItem\n            key={unit}\n            onClick={() => {\n              updateSettings({ temperatureUnit: unit });\n              setTemperatureUnitMenuAnchor(null);\n            }}\n          >\n            {TemperatureUnitUtils.toString(unit)}\n          </MenuItem>\n        ))}\n      </UnitMenu>\n      <List>\n        <ListSubheader inset className={classes.listSubHeader}>\n          Units\n        </ListSubheader>\n        <ListItem\n          button\n          onClick={(e) =>\n            setSpeedUnitMenuAnchor(\n              // Align the menu to the top of the list item's primary text\n              e.currentTarget.firstElementChild?.firstElementChild ?? null\n            )\n          }\n        >\n          <ListItemText\n            inset\n            primary=\"Speed unit\"\n            secondary={SpeedUnitUtils.toString(speedUnit)}\n          />\n        </ListItem>\n        <ListItem\n          button\n          onClick={(e) =>\n            setTemperatureUnitMenuAnchor(\n              e.currentTarget.firstElementChild?.firstElementChild ?? null\n            )\n          }\n        >\n          <ListItemText\n            inset\n            primary=\"Temperature unit\"\n            secondary={TemperatureUnitUtils.toString(temperatureUnit)}\n          />\n        </ListItem>\n      </List>\n    </>\n  );\n}\n","import Settings from \"../interfaces/settings\";\n\nexport type Action = { type: \"update\"; update: Partial<Settings> };\n\nexport function settingsReducer(state: Settings, action: Action): Settings {\n  const { type, update } = action;\n  switch (type) {\n    case \"update\":\n      return { ...state, ...update };\n  }\n}\n","import localStorageService from \"../../common/services/local-storage.service\";\nimport { defaultSettings } from \"../constants/default-settings\";\nimport Settings from \"../interfaces/settings\";\n/**\n * Returns a key for loading and saving preferences.\n *\n * @param key - The key.\n * @returns The key to be used when saving and loading preferences.\n */\nfunction generateKey(key: string): string {\n  return `userPreferences::${key}`;\n}\n\n/**\n * Service for saving and loading settings.\n */\nexport class SettingsService {\n  /**\n   * Saves a setting.\n   *\n   * @param key - The key for the setting.\n   * @param value - The setting to save.\n   */\n  save<T>(key: string, value: T) {\n    localStorageService.setItem(generateKey(key), value);\n  }\n  /**\n   * Loads a setting.\n   *\n   * @param key - The key for the setting.\n   * @param defaultValue - The default value to use if `key` is not found.\n   * @returns The setting or null if it is not found.\n   */\n  load<T>(key: keyof Settings): T | null {\n    return localStorageService.getItem(generateKey(key)) ?? null;\n  }\n  /**\n   * Loads a setting.\n   *\n   * @param key - The key for the setting.\n   * @param defaultValue - The default value to use if `key` is not found.\n   * @returns The setting or null if it is not found.\n   */\n  loadOrDefault<T>(key: keyof Settings, defaultValue: T): T {\n    return localStorageService.getItem(generateKey(key)) ?? defaultValue;\n  }\n  /**\n   * Retrieves user settings.\n   *\n   * @returns All settings with either user set preferences or default values\n   */\n  loadAllOrDefault(): Settings {\n    return {\n      speedUnit: this.loadOrDefault(\"speedUnit\", defaultSettings.speedUnit),\n      temperatureUnit: this.loadOrDefault(\n        \"temperatureUnit\",\n        defaultSettings.temperatureUnit\n      ),\n    };\n  }\n}\n\nconst settingsService = new SettingsService();\nexport default settingsService;\n","import { HashRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport DashboardPage from \"./dashboard/pages/dashboard.page\";\nimport SettingsPage from \"./settings/pages/settings.page\";\nimport routes from \"./common/constants/routes.json\";\nimport { SettingsContext } from \"./settings/contexts/settings.context\";\nimport { useReducer } from \"react\";\nimport { settingsReducer } from \"./settings/reducers/settings.reducer\";\nimport { SettingsUpdateContext } from \"./settings/contexts/settings-update.context\";\nimport settingsService from \"./settings/services/settings.service\";\nimport Settings from \"./settings/interfaces/settings\";\n\nexport default function App() {\n  const [settingsState, settingsDispatch] = useReducer(\n    settingsReducer,\n    settingsService.loadAllOrDefault()\n  );\n\n  return (\n    <SettingsContext.Provider value={settingsState}>\n      <SettingsUpdateContext.Provider\n        value={(update) => {\n          Object.keys(update).forEach((key) => {\n            settingsService.save(key, update[key as keyof Settings]);\n          });\n          settingsDispatch({ type: \"update\", update });\n        }}\n      >\n        <div className=\"App\">\n          <HashRouter>\n            <Switch>\n              <Route path={routes.DASHBOARD} exact>\n                <DashboardPage />\n              </Route>\n              <Route path={routes.SETTINGS}>\n                <SettingsPage />\n              </Route>\n            </Switch>\n          </HashRouter>\n        </div>\n      </SettingsUpdateContext.Provider>\n    </SettingsContext.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}