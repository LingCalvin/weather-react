{"version":3,"sources":["common/services/geolocation.service.ts","common/utils/object.utils.ts","nws/services/nws.service.ts","common/services/localStorage.service.ts","dashboard/reducers/forecast-reducer.ts","common/hooks/use-serialize-value.tsx","dashboard/components/menu.tsx","dashboard/enums/temperature-unit.ts","dashboard/pages/dashboard.styles.tsx","dashboard/utils/temperature.utils.ts","dashboard/components/hourly-forecast-grid-list-item.styles.tsx","dashboard/components/hourly-forecast-grid-list-tile.tsx","dashboard/components/hourly-forecast-grid-list.styles.tsx","dashboard/enums/speed-unit.enum.ts","dashboard/components/hourly-forecast-grid-list.tsx","dashboard/utils/speed.utils.ts","dashboard/components/weather-card.tsx","dashboard/pages/hourly-forecast.page.tsx","settings/constants/default-settings.ts","settings/contexts/settings.context.tsx","dashboard/pages/dashboard.page.tsx","common/hooks/use-network-status.tsx","settings/components/unit-menu.tsx","settings/contexts/settings-update.context.tsx","settings/utils/speed-unit.utils.ts","settings/utils/temperature-unit.utils.ts","settings/pages/settings.page.styles.tsx","settings/pages/settings.page.tsx","settings/reducers/settings.reducer.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["geolocationService","getCurrentPosition","Promise","res","rej","navigator","geolocation","remapKeys","object","map","remappedObject","forEach","newKey","oldKey","hasOwnProperty","activeAlertParamsMap","Map","nwsService","apiClient","params","a","this","get","objectUtils","latitude","longitude","data","wfo","x","y","stationId","queryParams","axios","create","baseURL","headers","Accept","localStorageService","setItem","key","value","localStorage","JSON","stringify","getItem","parse","forecastReducer","state","action","type","payload","useSerializeValue","useEffect","Menu","open","anchorEl","anchorOrigin","onClose","onRefreshClicked","onSettingsClicked","MenuItem","onClick","TemperatureUnit","useStyles","makeStyles","theme","root","height","display","flexDirection","spacer","flexGrow","main","overflowY","hourlyForecastTab","gap","spacing","bottomNavigation","borderTop","borderColor","palette","divider","tabPanel","paddingLeft","paddingRight","format","unit","Celsius","Fahrenheit","Kelvin","convert","temperature","targetUnit","kelvinValue","covertToKelvin","alignItems","HourlyForecastGridListTile","time","icon","classes","className","Typography","toLocaleTimeString","src","alt","variant","temperatureUtils","SpeedUnit","gridListItemSpacing","gridList","gridAutoFlow","justifyItems","gridListContainer","overflowX","minWidth","HourlyForecastGridList","periods","Card","CardContent","index","temperatureUnit","startTime","Date","length","Divider","orientation","KilometersPerHour","MetersPerSecond","MilesPerHour","speed","valueInMetersPerSecond","convertToMetersPerSecond","WeatherCard","shortForecast","windSpeed","relativeHumidity","updateTime","station","Box","justifyContent","TemperatureUtils","undefined","Math","round","SpeedUtils","toLocaleString","HourlyForecastPage","currentWeather","hourlyForecast","defaultSettings","speedUnit","SettingsContext","createContext","initializeForecastState","location","city","forecast","observation","getPointInfo","properties","relativeLocation","gridId","gridX","gridY","getForecast","forecastRes","getHourlyForecast","hourlyForecastRes","getStations","stationsRes","features","stationIdentifier","getStationObservations","limit","observationRes","DashboardPage","history","useHistory","useContext","isOnline","useState","window","onLine","setIsOnline","setOffline","setOnline","addEventListener","removeEventListener","useNetworkStatus","loading","setLoading","useReducer","forecastState","forecastStateDispatch","updateForecast","useCallback","then","finally","currentDate","endDate","setDate","getDate","setHours","currentHourlyPeriods","filter","endTime","menuAnchor","setMenuAnchor","activeTab","setActiveTab","TabContext","AppBar","position","Toolbar","IconButton","color","coords","MyLocation","edge","e","currentTarget","MoreVert","Boolean","push","routes","SETTINGS","LinearProgress","TabPanel","clsx","timestamp","textDescription","rest","BottomNavigation","onChange","showLabels","BottomNavigationAction","Schedule","label","CalendarToday","UnitMenu","children","SettingsUpdateContext","toString","listSubHeader","primary","fontSize","typography","body1","fontWeight","textAlign","speedUnits","Object","keys","temperatureUnits","SettingsPage","updateSettings","speedUnitMenuAnchor","setSpeedUnitMenuAnchor","temperatureUnitMenuAnchor","setTemperatureUnitMenuAnchor","goBack","ArrowBack","SpeedUnitUtils","TemperatureUnitUtils","List","ListSubheader","inset","ListItem","button","firstElementChild","ListItemText","secondary","settingsReducer","update","App","settingsState","settingsDispatch","Provider","path","DASHBOARD","exact","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05117fb6.chunk.js","sourcesContent":["/**\n * Wraps `navigator.geolocation.getCurrentPosition()` in a Promise.\n */\nfunction getCurrentPosition(): Promise<GeolocationPosition> {\n  return new Promise<GeolocationPosition>((res, rej) =>\n    navigator.geolocation.getCurrentPosition(res, rej)\n  );\n}\n\n/**\n * Provides convenience wrappers for function of `navigator.geolocation`.\n */\nconst geolocationService = {\n  getCurrentPosition,\n};\n\nexport default geolocationService;\n","import { KeyofUnion } from \"../types/KeyofUnion\";\n\n/**\n * Returns an object with remapped keys.\n *\n * @param object - The object whose keys are to be remapped\n * @param map - The old to new key mapping\n * @returns A new object with the keys remapped based on `map`\n */\nexport function remapKeys<T, U>(\n  object: T,\n  map: Map<KeyofUnion<T>, KeyofUnion<U>>\n): U {\n  const remappedObject: any = { ...object };\n  map.forEach((newKey, oldKey) => {\n    if (\n      (oldKey as string) !== (newKey as string) &&\n      remappedObject.hasOwnProperty(oldKey)\n    ) {\n      remappedObject[newKey] = remappedObject[oldKey];\n      delete remappedObject[oldKey];\n    }\n  });\n  return remappedObject;\n}\n","import axios, { AxiosInstance } from \"axios\";\nimport ForecastResponse from \"../interfaces/forecast-response\";\nimport PointInfo from \"../interfaces/point-info\";\nimport StationObservationsResponse from \"../interfaces/station-observations-response\";\nimport StationsResponse from \"../interfaces/stations-response\";\nimport * as objectUtils from \"../../common/utils/object.utils\";\nimport { KeyofUnion } from \"../../common/types/KeyofUnion\";\n\nconst activeAlertParamsMap = new Map<KeyofUnion<GetActiveAlertsParams>, any>([\n  [\"messageType\", \"message_type\"],\n  [\"regionType\", \"region_type\"],\n]);\n\nclass NWSService {\n  constructor(private apiClient: AxiosInstance) {}\n\n  async getActiveAlerts(params: GetActiveAlertsParams) {\n    return await this.apiClient.get(\"/alerts/active\", {\n      params: objectUtils.remapKeys(params, activeAlertParamsMap),\n    });\n  }\n\n  async getPointInfo(latitude: number, longitude: number): Promise<PointInfo> {\n    return (await this.apiClient.get(`/points/${latitude},${longitude}`)).data;\n  }\n\n  async getForecast({\n    wfo,\n    x,\n    y,\n  }: GridPointsParams): Promise<ForecastResponse> {\n    return (await this.apiClient.get(`/gridpoints/${wfo}/${x},${y}/forecast`))\n      .data;\n  }\n\n  async getHourlyForecast({\n    wfo,\n    x,\n    y,\n  }: GridPointsParams): Promise<ForecastResponse> {\n    return (\n      await this.apiClient.get(`/gridpoints/${wfo}/${x},${y}/forecast/hourly`)\n    ).data;\n  }\n\n  async getStations({\n    wfo,\n    x,\n    y,\n  }: GridPointsParams): Promise<StationsResponse> {\n    return (await this.apiClient.get(`/gridpoints/${wfo}/${x},${y}/stations`))\n      .data;\n  }\n\n  async getStationObservations({\n    stationId,\n    ...queryParams\n  }: GetStationObservationsParams): Promise<StationObservationsResponse> {\n    return (\n      await this.apiClient.get(`/stations/${stationId}/observations`, {\n        params: queryParams,\n      })\n    ).data;\n  }\n}\n\ninterface GetActiveAlertsBaseParams {\n  status?: Array<\"actual\" | \"exercise\" | \"system\" | \"test\" | \"draft\">;\n  messageType?: Array<\"alert\" | \"update\" | \"cancel\">;\n  event?: string[];\n  code?: string[];\n  urgency?: Array<\"unknown\" | \"past\" | \"future\" | \"expected\" | \"immediate\">;\n  severity?: Array<\"unknown\" | \"minor\" | \"moderate\" | \"severe\" | \"extreme\">;\n  certainty?: Array<\n    \"unknown\" | \"unlikely\" | \"possible\" | \"likely\" | \"observed\"\n  >;\n  limit?: number;\n}\n\ntype GetActiveAlertsParams =\n  | GetActiveAlertsBaseParams\n  | GetActiveAlertsByRegionTypeParams\n  | GetActiveAlertsByPointParams\n  | GetActiveAlertsByRegion\n  | GetActiveAlertsByArea\n  | GetActiveAlertsByZone;\n\ninterface GetActiveAlertsByRegionTypeParams extends GetActiveAlertsBaseParams {\n  regionType: \"land\" | \"marine\";\n}\n\ninterface GetActiveAlertsByPointParams extends GetActiveAlertsBaseParams {\n  x: number;\n  y: number;\n}\n\ninterface GetActiveAlertsByRegion extends GetActiveAlertsBaseParams {\n  region: Array<\"AL\" | \"AT\" | \"GL\" | \"GM\" | \"PA\" | \"PI\">;\n}\n\ninterface GetActiveAlertsByArea extends GetActiveAlertsBaseParams {\n  area: Array<\n    | \"AL\"\n    | \"AK\"\n    | \"AS\"\n    | \"AR\"\n    | \"AZ\"\n    | \"CA\"\n    | \"CO\"\n    | \"CT\"\n    | \"DE\"\n    | \"DC\"\n    | \"FL\"\n    | \"GA\"\n    | \"GU\"\n    | \"HI\"\n    | \"ID\"\n    | \"IL\"\n    | \"IN\"\n    | \"IA\"\n    | \"KS\"\n    | \"KY\"\n    | \"LA\"\n    | \"ME\"\n    | \"MD\"\n    | \"MA\"\n    | \"MI\"\n    | \"MN\"\n    | \"MS\"\n    | \"MO\"\n    | \"MT\"\n    | \"NE\"\n    | \"NV\"\n    | \"NH\"\n    | \"NJ\"\n    | \"NM\"\n    | \"NY\"\n    | \"NC\"\n    | \"ND\"\n    | \"OH\"\n    | \"OK\"\n    | \"OR\"\n    | \"PA\"\n    | \"PR\"\n    | \"RI\"\n    | \"SC\"\n    | \"SD\"\n    | \"TN\"\n    | \"TX\"\n    | \"UT\"\n    | \"VT\"\n    | \"VI\"\n    | \"VA\"\n    | \"WA\"\n    | \"WV\"\n    | \"WI\"\n    | \"WY\"\n    | \"PZ\"\n    | \"PK\"\n    | \"PH\"\n    | \"PS\"\n    | \"PM\"\n    | \"AN\"\n    | \"AM\"\n    | \"GM\"\n    | \"LS\"\n    | \"LM\"\n    | \"LH\"\n    | \"LC\"\n    | \"LE\"\n    | \"LO\"\n  >;\n}\n\ninterface GetActiveAlertsByZone extends GetActiveAlertsBaseParams {\n  zone: string[];\n}\n\ninterface GetStationObservationsParams {\n  stationId: string;\n  station?: string[];\n  start?: string;\n  end?: string;\n  limit?: number;\n}\n\ninterface GridPointsParams {\n  wfo: string;\n  x: number;\n  y: number;\n}\n\nconst nwsService = new NWSService(\n  axios.create({\n    baseURL: \"https://api.weather.gov\",\n    headers: { Accept: \"application/geo+json\" },\n  })\n);\n\nexport default nwsService;\n","/**\n * Calls `localStorage.setItem()` with `key` and the result of calling\n * `JSON.stringify()` with `value` for `value`.\n */\nfunction setItem(key: string, value: any) {\n  localStorage.setItem(key, JSON.stringify(value));\n}\n\n/**\n * Calls `localStorage.getItem()` with `key`. If the result is `null`, it gets\n * returned. Otherwise, the result of calling `JSON.parse()` with the value is\n * returned.\n */\nfunction getItem(key: string): any | null {\n  const value = localStorage.getItem(key);\n  if (value === null) {\n    return null;\n  }\n  return JSON.parse(value);\n}\n\n/**\n * Provides convenience wrappers for functions of `localStorage`.\n */\nconst localStorageService = {\n  setItem,\n  getItem,\n};\n\nexport default localStorageService;\n","import ForecastState from \"../interfaces/forecast-state\";\n\ntype Action = { type: \"updateForecast\"; payload: Partial<ForecastState> };\n\nexport default function forecastReducer(\n  state: ForecastState,\n  action: Action\n): ForecastState {\n  switch (action.type) {\n    case \"updateForecast\":\n      return { ...state, ...action.payload };\n  }\n}\n","import { useEffect } from \"react\";\nimport localStorageService from \"../services/localStorage.service\";\n\n/**\n * Writes a value to localStorage whenever the value changes.\n *\n * @param key - The key in localStorage to use\n * @param value - The value to store in localStorage\n */\nexport default function useSerializeValue(key: string, value: any) {\n  useEffect(() => {\n    localStorageService.setItem(key, value);\n  }, [key, value]);\n}\n","import {\n  Menu as MuiMenu,\n  MenuProps as MuiMenuProps,\n  MenuItem,\n} from \"@material-ui/core\";\n\ninterface MenuProps {\n  open?: boolean;\n  anchorEl?: MuiMenuProps[\"anchorEl\"];\n  anchorOrigin?: MuiMenuProps[\"anchorOrigin\"];\n  onClose?: MuiMenuProps[\"onClose\"];\n  onRefreshClicked?: () => void;\n  onSettingsClicked?: () => void;\n}\n\nexport default function Menu({\n  open = false,\n  anchorEl,\n  anchorOrigin,\n  onClose,\n  onRefreshClicked,\n  onSettingsClicked,\n}: MenuProps) {\n  return (\n    <MuiMenu\n      open={open}\n      anchorEl={anchorEl}\n      anchorOrigin={anchorOrigin}\n      onClose={onClose}\n    >\n      <MenuItem onClick={onRefreshClicked}>Refresh</MenuItem>\n      <MenuItem onClick={onSettingsClicked}>Settings</MenuItem>\n    </MuiMenu>\n  );\n}\n","export enum TemperatureUnit {\n  Celsius = \"CELSIUS\",\n  Fahrenheit = \"FAHRENHEIT\",\n  Kelvin = \"KELVIN\",\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  main: {\n    overflowY: \"auto\",\n    flexGrow: 1,\n  },\n  hourlyForecastTab: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: theme.spacing(1),\n  },\n  bottomNavigation: {\n    borderTop: \"1px solid\",\n    borderColor: theme.palette.divider,\n  },\n  tabPanel: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","import { TemperatureUnit } from \"../enums/temperature-unit\";\nimport Temperature from \"../interfaces/temperature\";\n\n/**\n * Returns a formatted temperature string.\n *\n * @param value - The temperature sans unit\n * @param unit - The unit\n * @returns The temperature formatted as a string\n */\nexport function format({ value, unit }: Temperature): string {\n  switch (unit) {\n    case TemperatureUnit.Celsius:\n      return `${value}℃`;\n    case TemperatureUnit.Fahrenheit:\n      return `${value}℉`;\n    case TemperatureUnit.Kelvin:\n      return `${value}K`;\n    default:\n      return `${value}`;\n  }\n}\n\n/**\n * Converts temperature to Kelvin.\n *\n * @returns A `Temperature` object in Kelvin\n */\nfunction covertToKelvin({ value, unit }: Temperature): Temperature {\n  switch (unit) {\n    case TemperatureUnit.Celsius:\n      return { value: value + 273.15, unit: TemperatureUnit.Kelvin };\n    case TemperatureUnit.Fahrenheit:\n      return {\n        value: ((value - 32) * 5) / 9 + 273.15,\n        unit: TemperatureUnit.Kelvin,\n      };\n    case TemperatureUnit.Kelvin:\n      return { value, unit };\n  }\n}\n\n/**\n * Converts a temperature to a specified unit.\n *\n * @param temperature - The temperature to convert\n * @param targetUnit - The target unit\n * @returns The `temperature` in `targetUnit`\n */\nexport function convert(\n  temperature: Temperature,\n  targetUnit: TemperatureUnit\n): Temperature {\n  const { value: kelvinValue } = covertToKelvin(temperature);\n  switch (targetUnit) {\n    case TemperatureUnit.Celsius:\n      return { value: kelvinValue - 273.15, unit: targetUnit };\n    case TemperatureUnit.Fahrenheit:\n      return {\n        value: ((kelvinValue - 273.15) * 9) / 5 + 32,\n        unit: targetUnit,\n      };\n    case TemperatureUnit.Kelvin:\n      return { value: kelvinValue, unit: targetUnit };\n  }\n}\n\n/**\n * Rounds a temperature to the nearest integer.\n *\n * @returns A `Temperature` object with value rounded to the nearest integer\n */\nexport function round({ value, ...rest }: Temperature): Temperature {\n  return { value: Math.round(value), ...rest };\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(1),\n  },\n}));\n\nexport default useStyles;\n","import { Typography } from \"@material-ui/core\";\nimport Temperature from \"../interfaces/temperature\";\nimport * as temperatureUtils from \"../utils/temperature.utils\";\nimport useStyles from \"./hourly-forecast-grid-list-item.styles\";\n\ninterface HourlyForecastGridListTileProps {\n  temperature: Temperature;\n  time: Date;\n  icon: string;\n}\n\nexport default function HourlyForecastGridListTile({\n  temperature,\n  time,\n  icon,\n}: HourlyForecastGridListTileProps) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Typography>{time.toLocaleTimeString()}</Typography>\n      <img src={icon} alt=\"\" />\n      <Typography variant=\"h6\">\n        {temperatureUtils.format(temperature)}\n      </Typography>\n    </div>\n  );\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => {\n  const gridListItemSpacing = theme.spacing(2);\n  return {\n    gridList: {\n      display: \"grid\",\n      gridAutoFlow: \"column\",\n      justifyItems: \"center\",\n      gap: gridListItemSpacing,\n    },\n    gridListContainer: {\n      display: \"flex\",\n      overflowX: \"auto\",\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    spacer: {\n      display: \"inline-block\",\n      minWidth: gridListItemSpacing,\n    },\n  };\n});\n\nexport default useStyles;\n","export enum SpeedUnit {\n  KilometersPerHour = \"KILOMETERS_PER_HOUR\",\n  MetersPerSecond = \"METERS_PER_SECOND\",\n  MilesPerHour = \"MILES_PER_HOUR\",\n}\n","import { Card, CardContent, Divider } from \"@material-ui/core\";\nimport { Fragment } from \"react\";\nimport { Period } from \"../../nws/interfaces/forecast-response\";\nimport { TemperatureUnit } from \"../enums/temperature-unit\";\nimport HourlyForecastGridListTile from \"./hourly-forecast-grid-list-tile\";\nimport useStyles from \"./hourly-forecast-grid-list.styles\";\n\ninterface HourlyForecastGridListProps {\n  periods: Period[];\n}\n\nexport default function HourlyForecastGridList({\n  periods,\n}: HourlyForecastGridListProps) {\n  const classes = useStyles();\n  return (\n    <Card>\n      <CardContent className={classes.gridListContainer}>\n        {/*\n         * Maintain consistent spacing between tile and edge and tile and\n         * divider.\n         */}\n        <div className={classes.spacer} />\n        <div className={classes.gridList}>\n          {periods.map(\n            (\n              { temperature, temperatureUnit, startTime: time, icon },\n              index\n            ) => (\n              <Fragment key={time}>\n                <HourlyForecastGridListTile\n                  temperature={{\n                    value: temperature,\n                    unit: TemperatureUnit.Fahrenheit,\n                  }}\n                  time={new Date(time)}\n                  icon={icon}\n                />\n                {index !== periods.length - 1 && (\n                  <Divider orientation=\"vertical\" />\n                )}\n              </Fragment>\n            )\n          )}\n        </div>\n        <div className={classes.spacer} />\n      </CardContent>\n    </Card>\n  );\n}\n","import { SpeedUnit } from \"../enums/speed-unit.enum\";\nimport Speed from \"../interfaces/speed\";\n\n/**\n * Returns a formatted speed string.\n *\n * @returns The speed formatted as a string\n */\nexport function format({ value, unit }: Speed): string {\n  switch (unit) {\n    case SpeedUnit.KilometersPerHour:\n      return `${value} km/h`;\n    case SpeedUnit.MetersPerSecond:\n      return `${value} m/s`;\n    case SpeedUnit.MilesPerHour:\n      return `${value} mph`;\n    default:\n      return `${value}`;\n  }\n}\n\n/**\n * Converts a `Speed` object to meters per second.\n *\n * @returns A `Speed` object with a value in meters per second\n */\nfunction convertToMetersPerSecond({ value, unit }: Speed): Speed {\n  switch (unit) {\n    case SpeedUnit.KilometersPerHour:\n      return { value: value / 3.6, unit: SpeedUnit.MetersPerSecond };\n    case SpeedUnit.MetersPerSecond:\n      return { value, unit };\n    case SpeedUnit.MilesPerHour:\n      return { value: value / 2.237, unit: SpeedUnit.MetersPerSecond };\n  }\n}\n\n/**\n * Converts a speed to the target unit.\n *\n * @param speed - The speed to convert\n * @param targetUnit - The unit to convert `speed` to\n * @returns The `Speed` object converted to `targetUnit`\n */\nexport function convert(speed: Speed, targetUnit: SpeedUnit): Speed {\n  const { value: valueInMetersPerSecond } = convertToMetersPerSecond(speed);\n  switch (targetUnit) {\n    case SpeedUnit.KilometersPerHour:\n      return { value: valueInMetersPerSecond * 3.6, unit: targetUnit };\n    case SpeedUnit.MetersPerSecond:\n      return { value: valueInMetersPerSecond, unit: targetUnit };\n    case SpeedUnit.MilesPerHour:\n      return { value: valueInMetersPerSecond * 2.237, unit: targetUnit };\n  }\n}\n\n/**\n * Rounds a speed to the nearest integer.\n *\n * @returns The `Speed` object with value rounded to the nearest integer\n */\nexport function round({ value, ...rest }: Speed): Speed {\n  return { value: Math.round(value), ...rest };\n}\n","import { Box, Card, CardContent, Typography } from \"@material-ui/core\";\nimport Speed from \"../interfaces/speed\";\nimport Temperature from \"../interfaces/temperature\";\nimport * as SpeedUtils from \"../utils/speed.utils\";\nimport * as TemperatureUtils from \"../utils/temperature.utils\";\n\nexport interface WeatherCardProps {\n  icon: string;\n  shortForecast: string;\n  temperature: Temperature;\n  windSpeed?: Speed;\n  relativeHumidity?: number;\n  updateTime?: Date;\n  station?: string;\n}\n\nexport default function WeatherCard({\n  icon,\n  shortForecast,\n  temperature,\n  windSpeed,\n  relativeHumidity,\n  updateTime,\n  station,\n}: WeatherCardProps) {\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\">{shortForecast}</Typography>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <img alt=\"\" src={icon} />\n          <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-end\">\n            <Typography variant=\"h3\">\n              {TemperatureUtils.format(temperature)}\n            </Typography>\n            {relativeHumidity !== undefined && (\n              <Typography>{`Humidity: ${Math.round(\n                relativeHumidity\n              )}%`}</Typography>\n            )}\n            {windSpeed !== undefined && (\n              <Typography>{`Wind: ${SpeedUtils.format(windSpeed)}`}</Typography>\n            )}\n          </Box>\n        </Box>\n        {updateTime && (\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n            <Typography variant=\"caption\">\n              {updateTime.toLocaleString()}\n            </Typography>\n          </Box>\n        )}\n        {updateTime && (\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n            <Typography variant=\"caption\">{station}</Typography>\n          </Box>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","import { Period } from \"../../nws/interfaces/forecast-response\";\nimport HourlyForecastGridList from \"../components/hourly-forecast-grid-list\";\nimport WeatherCard, { WeatherCardProps } from \"../components/weather-card\";\n\ninterface HourlyForecastPageProps {\n  currentWeather: Omit<WeatherCardProps, \"updateTime\" | \"station\">;\n  hourlyForecast: Period[];\n  updateTime: Date;\n  station: string;\n}\n\nexport default function HourlyForecastPage({\n  currentWeather,\n  hourlyForecast,\n  updateTime,\n  station,\n}: HourlyForecastPageProps) {\n  return (\n    <>\n      <WeatherCard\n        icon={currentWeather.icon}\n        shortForecast={currentWeather.shortForecast}\n        temperature={currentWeather.temperature}\n        windSpeed={currentWeather.windSpeed}\n        relativeHumidity={currentWeather.relativeHumidity}\n        updateTime={updateTime}\n        station={station}\n      />\n      <HourlyForecastGridList periods={hourlyForecast} />\n    </>\n  );\n}\n","import { SpeedUnit } from \"../../dashboard/enums/speed-unit.enum\";\nimport { TemperatureUnit } from \"../../dashboard/enums/temperature-unit\";\nimport Settings from \"../interfaces/settings\";\n\n/** The default settings to use when not set. */\nexport const defaultSettings: Settings = {\n  speedUnit: SpeedUnit.MilesPerHour,\n  temperatureUnit: TemperatureUnit.Fahrenheit,\n};\n","import { createContext } from \"react\";\nimport { defaultSettings } from \"../constants/default-settings\";\nimport Settings from \"../interfaces/settings\";\n\n/** Context for user settings. */\nexport const SettingsContext = createContext<Settings>(defaultSettings);\n","import {\n  useCallback,\n  useContext,\n  useEffect,\n  useReducer,\n  useState,\n} from \"react\";\nimport {\n  AppBar,\n  BottomNavigation,\n  BottomNavigationAction,\n  Box,\n  IconButton,\n  LinearProgress,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport {\n  MoreVert as MoreVertIcon,\n  MyLocation as MyLocationIcon,\n  Schedule as ScheduleIcon,\n  CalendarToday as CalendarTodayIcon,\n} from \"@material-ui/icons\";\nimport { TabContext, TabPanel } from \"@material-ui/lab\";\nimport geolocationService from \"../../common/services/geolocation.service\";\nimport nwsService from \"../../nws/services/nws.service\";\nimport localStorageService from \"../../common/services/localStorage.service\";\nimport useNetworkStatus from \"../../common/hooks/use-network-status\";\nimport forecastReducer from \"../reducers/forecast-reducer\";\nimport ForecastState from \"../interfaces/forecast-state\";\nimport useSerializeValue from \"../../common/hooks/use-serialize-value\";\nimport Menu from \"../components/menu\";\nimport Coordinates from \"../../common/interfaces/coordinates\";\nimport useStyles from \"./dashboard.styles\";\nimport HourlyForecastPage from \"./hourly-forecast.page\";\nimport clsx from \"clsx\";\nimport { SpeedUnit } from \"../enums/speed-unit.enum\";\nimport { useHistory } from \"react-router\";\nimport routes from \"../../common/constants/routes.json\";\nimport { TemperatureUnit } from \"../enums/temperature-unit\";\nimport * as TemperatureUtils from \"../utils/temperature.utils\";\nimport * as SpeedUtils from \"../utils/speed.utils\";\nimport { SettingsContext } from \"../../settings/contexts/settings.context\";\nimport Temperature from \"../interfaces/temperature\";\nimport Speed from \"../interfaces/speed\";\n\nfunction initializeForecastState(): ForecastState {\n  return {\n    location: localStorageService.getItem(\"location\"),\n    city: localStorageService.getItem(\"city\"),\n    state: localStorageService.getItem(\"state\"),\n    forecast: localStorageService.getItem(\"forecast\"),\n    hourlyForecast: localStorageService.getItem(\"hourlyForecast\"),\n    stationId: localStorageService.getItem(\"stationId\"),\n    observation: localStorageService.getItem(\"observation\"),\n  };\n}\n\n/**\n * Returns a new `ForecastState` based on `location`.\n *\n * @param location - The location to get the forecast for\n * @returns A `Promise` for the new `ForecastState`\n */\nasync function getForecast(location: Coordinates): Promise<ForecastState> {\n  const {\n    properties: {\n      relativeLocation: {\n        properties: { city, state },\n      },\n      gridId: wfo,\n      gridX: x,\n      gridY: y,\n    },\n  } = await nwsService.getPointInfo(location.latitude, location.longitude);\n  const forecastRes = await nwsService.getForecast({ wfo, x, y });\n  const hourlyForecastRes = await nwsService.getHourlyForecast({\n    wfo,\n    x,\n    y,\n  });\n  const stationsRes = await nwsService.getStations({ wfo, x, y });\n  const stationId = stationsRes.features[0].properties.stationIdentifier;\n  const observationRes = await nwsService.getStationObservations({\n    stationId,\n    limit: 1, // Only get the most recent observation\n  });\n  return {\n    location,\n    city,\n    state,\n    forecast: forecastRes,\n    hourlyForecast: hourlyForecastRes,\n    stationId,\n    observation: observationRes,\n  };\n}\n\nexport default function DashboardPage() {\n  const classes = useStyles();\n  const history = useHistory();\n  const { speedUnit, temperatureUnit } = useContext(SettingsContext);\n  const isOnline = useNetworkStatus();\n  const [loading, setLoading] = useState(false);\n  const [forecastState, forecastStateDispatch] = useReducer(\n    forecastReducer,\n    undefined,\n    initializeForecastState\n  );\n\n  const {\n    location,\n    city,\n    state,\n    forecast,\n    hourlyForecast,\n    observation,\n    stationId,\n  } = forecastState;\n\n  const currentWeather = observation?.features[0].properties ?? null;\n\n  const updateForecast = useCallback((location: Coordinates) => {\n    setLoading(true);\n    getForecast(location)\n      .then((state) =>\n        forecastStateDispatch({ type: \"updateForecast\", payload: state })\n      )\n      .finally(() => setLoading(false));\n  }, []);\n\n  // Fetch forecast data when the location gets updated\n  useEffect(() => {\n    if (!location || !isOnline) {\n      return;\n    }\n    updateForecast(location);\n  }, [isOnline, location, updateForecast]);\n\n  // Save information about the last location and forecast retrieved so it can\n  // be used after the application has been closed\n  useSerializeValue(\"location\", location);\n  useSerializeValue(\"city\", city);\n  useSerializeValue(\"state\", state);\n  useSerializeValue(\"forecast\", forecast);\n  useSerializeValue(\"hourlyForecast\", hourlyForecast);\n  useSerializeValue(\"forecastState\", forecastState);\n  useSerializeValue(\"stationId\", stationId);\n  useSerializeValue(\"observation\", observation);\n\n  const transformTemperature = (temperature: Temperature): Temperature =>\n    TemperatureUtils.round(\n      TemperatureUtils.convert(temperature, temperatureUnit)\n    );\n\n  const transformSpeed = (speed: Speed): Speed =>\n    SpeedUtils.round(SpeedUtils.convert(speed, speedUnit));\n\n  const currentDate = new Date();\n  const endDate = new Date(currentDate);\n  endDate.setDate(endDate.getDate() + 1);\n  endDate.setHours(0, 0, 0, 0);\n  const currentHourlyPeriods = hourlyForecast?.properties.periods.filter(\n    ({ endTime, startTime }) =>\n      new Date(endTime) > currentDate && new Date(startTime) < endDate\n  );\n\n  const updateLocation = () => {\n    geolocationService.getCurrentPosition().then(({ coords }) => {\n      forecastStateDispatch({\n        type: \"updateForecast\",\n        payload: {\n          location: { latitude: coords.latitude, longitude: coords.longitude },\n        },\n      });\n    });\n  };\n\n  const [menuAnchor, setMenuAnchor] = useState<null | HTMLElement>(null);\n\n  const [activeTab, setActiveTab] = useState(\"hourly\");\n\n  return (\n    <div className={classes.root}>\n      <TabContext value={activeTab}>\n        <AppBar position=\"sticky\">\n          <Toolbar>\n            <Typography variant=\"h6\">\n              {city || state\n                ? `${city ?? \"Unknown\"}, ${state ?? \"Unknown\"}`\n                : \"Unknown\"}\n            </Typography>\n            <IconButton color=\"inherit\" onClick={updateLocation}>\n              <MyLocationIcon />\n            </IconButton>\n            <Box className={classes.spacer} />\n            <IconButton\n              color=\"inherit\"\n              edge=\"end\"\n              onClick={(e) => setMenuAnchor(e.currentTarget)}\n            >\n              <MoreVertIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Menu\n          anchorEl={menuAnchor}\n          open={Boolean(menuAnchor)}\n          onClose={() => setMenuAnchor(null)}\n          onRefreshClicked={() => {\n            setMenuAnchor(null);\n            if (!location || !isOnline) {\n              return;\n            }\n            updateForecast(location);\n          }}\n          onSettingsClicked={() => {\n            setMenuAnchor(null);\n            history.push(routes.SETTINGS);\n          }}\n        />\n        {loading && <LinearProgress color=\"secondary\" />}\n        <main className={classes.main}>\n          <TabPanel\n            value=\"hourly\"\n            className={clsx(classes.tabPanel, classes.hourlyForecastTab)}\n          >\n            {currentWeather && currentHourlyPeriods?.length && (\n              <HourlyForecastPage\n                updateTime={new Date(currentWeather.timestamp)}\n                station={stationId ?? \"\"}\n                currentWeather={{\n                  icon: currentWeather.icon,\n                  shortForecast: currentWeather.textDescription,\n                  temperature: transformTemperature({\n                    value: currentWeather.temperature.value ?? 0,\n                    unit: TemperatureUnit.Celsius,\n                  }),\n                  windSpeed:\n                    currentWeather.windSpeed.value !== null\n                      ? transformSpeed({\n                          value: currentWeather.windSpeed.value,\n                          unit: SpeedUnit.KilometersPerHour,\n                        })\n                      : undefined,\n                  relativeHumidity:\n                    currentWeather.relativeHumidity.value ?? undefined,\n                }}\n                hourlyForecast={currentHourlyPeriods}\n              />\n            )}\n          </TabPanel>\n          <TabPanel value=\"daily\"></TabPanel>\n        </main>\n        <BottomNavigation\n          value={activeTab}\n          onChange={(e, value) => setActiveTab(value)}\n          showLabels\n          className={classes.bottomNavigation}\n        >\n          <BottomNavigationAction\n            icon={<ScheduleIcon />}\n            label=\"Hourly\"\n            value=\"hourly\"\n          />\n          <BottomNavigationAction\n            icon={<CalendarTodayIcon />}\n            label=\"Daily\"\n            value=\"daily\"\n          />\n        </BottomNavigation>\n      </TabContext>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\n/**\n * Returns the browser's online status.\n */\nexport default function useNetworkStatus() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n  useEffect(() => {\n    function setOffline() {\n      setIsOnline(false);\n    }\n    function setOnline() {\n      setIsOnline(true);\n    }\n    window.addEventListener(\"offline\", setOffline);\n    window.addEventListener(\"online\", setOnline);\n\n    return () => {\n      window.removeEventListener(\"offline\", setOffline);\n      window.removeEventListener(\"online\", setOnline);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import { Menu, MenuProps } from \"@material-ui/core\";\nimport { ReactNode } from \"react\";\n\ninterface UnitMenuProps {\n  open?: boolean;\n  anchorEl?: MenuProps[\"anchorEl\"];\n  anchorOrigin?: MenuProps[\"anchorOrigin\"];\n  children?: ReactNode;\n  onClose?: MenuProps[\"onClose\"];\n}\n\nexport default function UnitMenu({\n  open = false,\n  anchorEl,\n  anchorOrigin,\n  children,\n  onClose,\n}: UnitMenuProps) {\n  return (\n    <Menu\n      open={open}\n      anchorEl={anchorEl}\n      anchorOrigin={anchorOrigin}\n      onClose={onClose}\n    >\n      {children}\n    </Menu>\n  );\n}\n","import { createContext } from \"react\";\nimport Settings from \"../interfaces/settings\";\n\n/** Context for passing a callback to update settings. */\nexport const SettingsUpdateContext = createContext<\n  (update: Partial<Settings>) => void\n>(() => {});\n","import { SpeedUnit } from \"../../dashboard/enums/speed-unit.enum\";\n\nexport function toString(speedUnit: SpeedUnit): string {\n  switch (speedUnit) {\n    case SpeedUnit.KilometersPerHour:\n      return \"Kilometers per hour\";\n    case SpeedUnit.MetersPerSecond:\n      return \"Meters per second\";\n    case SpeedUnit.MilesPerHour:\n      return \"Miles per hour\";\n  }\n}\n","import { TemperatureUnit } from \"../../dashboard/enums/temperature-unit\";\n\nexport function toString(temperatureUnit: TemperatureUnit): string {\n  switch (temperatureUnit) {\n    case TemperatureUnit.Celsius:\n      return \"Celsius\";\n    case TemperatureUnit.Fahrenheit:\n      return \"Fahrenheit\";\n    case TemperatureUnit.Kelvin:\n      return \"Kelvin\";\n  }\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  listSubHeader: {\n    color: theme.palette.primary.main,\n    fontSize: theme.typography.body1.fontSize,\n    fontWeight: theme.typography.body1.fontWeight,\n    textAlign: \"start\",\n  },\n}));\n\nexport default useStyles;\n","import {\n  AppBar,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  ListSubheader,\n  MenuItem,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { ArrowBack as ArrowBackIcon } from \"@material-ui/icons\";\nimport { useContext, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { SpeedUnit } from \"../../dashboard/enums/speed-unit.enum\";\nimport { TemperatureUnit } from \"../../dashboard/enums/temperature-unit\";\nimport UnitMenu from \"../components/unit-menu\";\nimport { SettingsUpdateContext } from \"../contexts/settings-update.context\";\nimport { SettingsContext } from \"../contexts/settings.context\";\nimport * as SpeedUnitUtils from \"../utils/speed-unit.utils\";\nimport * as TemperatureUnitUtils from \"../utils/temperature-unit.utils\";\nimport useStyles from \"./settings.page.styles\";\n\nconst speedUnits = Object.keys(SpeedUnit).map(\n  (key) => SpeedUnit[key as keyof typeof SpeedUnit]\n);\n\nconst temperatureUnits = Object.keys(TemperatureUnit).map(\n  (key) => TemperatureUnit[key as keyof typeof TemperatureUnit]\n);\n\nexport default function SettingsPage() {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const updateSettings = useContext(SettingsUpdateContext);\n\n  const [\n    speedUnitMenuAnchor,\n    setSpeedUnitMenuAnchor,\n  ] = useState<null | Element>(null);\n  const [\n    temperatureUnitMenuAnchor,\n    setTemperatureUnitMenuAnchor,\n  ] = useState<null | Element>(null);\n\n  const { speedUnit, temperatureUnit } = useContext(SettingsContext);\n\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={() => history.goBack()}\n          >\n            <ArrowBackIcon />\n          </IconButton>\n          <Typography variant=\"h6\">Settings</Typography>\n        </Toolbar>\n      </AppBar>\n      <UnitMenu\n        anchorEl={speedUnitMenuAnchor}\n        open={Boolean(speedUnitMenuAnchor)}\n        onClose={() => setSpeedUnitMenuAnchor(null)}\n      >\n        {speedUnits.map((unit) => (\n          <MenuItem\n            onClick={() => {\n              updateSettings({ speedUnit: unit });\n              setSpeedUnitMenuAnchor(null);\n            }}\n          >\n            {SpeedUnitUtils.toString(unit)}\n          </MenuItem>\n        ))}\n      </UnitMenu>\n      <UnitMenu\n        anchorEl={temperatureUnitMenuAnchor}\n        open={Boolean(temperatureUnitMenuAnchor)}\n        onClose={() => setTemperatureUnitMenuAnchor(null)}\n      >\n        {temperatureUnits.map((unit) => (\n          <MenuItem\n            onClick={() => {\n              updateSettings({ temperatureUnit: unit });\n              setTemperatureUnitMenuAnchor(null);\n            }}\n          >\n            {TemperatureUnitUtils.toString(unit)}\n          </MenuItem>\n        ))}\n      </UnitMenu>\n      <List>\n        <ListSubheader inset className={classes.listSubHeader}>\n          Units\n        </ListSubheader>\n        <ListItem\n          button\n          onClick={(e) =>\n            setSpeedUnitMenuAnchor(\n              // Align the menu to the top of the list item's primary text\n              e.currentTarget.firstElementChild?.firstElementChild ?? null\n            )\n          }\n        >\n          <ListItemText\n            inset\n            primary=\"Speed unit\"\n            secondary={SpeedUnitUtils.toString(speedUnit)}\n          />\n        </ListItem>\n        <ListItem\n          button\n          onClick={(e) =>\n            setTemperatureUnitMenuAnchor(\n              e.currentTarget.firstElementChild?.firstElementChild ?? null\n            )\n          }\n        >\n          <ListItemText\n            inset\n            primary=\"Temperature unit\"\n            secondary={TemperatureUnitUtils.toString(temperatureUnit)}\n          />\n        </ListItem>\n      </List>\n    </>\n  );\n}\n","import Settings from \"../interfaces/settings\";\n\nexport type Action = { type: \"update\"; update: Partial<Settings> };\n\nexport function settingsReducer(state: Settings, action: Action): Settings {\n  const { type, update } = action;\n  switch (type) {\n    case \"update\":\n      return { ...state, ...update };\n  }\n}\n","import { HashRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport DashboardPage from \"./dashboard/pages/dashboard.page\";\nimport SettingsPage from \"./settings/pages/settings.page\";\nimport routes from \"./common/constants/routes.json\";\nimport { SettingsContext } from \"./settings/contexts/settings.context\";\nimport { useReducer } from \"react\";\nimport { settingsReducer } from \"./settings/reducers/settings.reducer\";\nimport { defaultSettings } from \"./settings/constants/default-settings\";\nimport { SettingsUpdateContext } from \"./settings/contexts/settings-update.context\";\n\nexport default function App() {\n  const [settingsState, settingsDispatch] = useReducer(\n    settingsReducer,\n    defaultSettings\n  );\n\n  return (\n    <SettingsContext.Provider value={settingsState}>\n      <SettingsUpdateContext.Provider\n        value={(update) => settingsDispatch({ type: \"update\", update })}\n      >\n        <div className=\"App\">\n          <HashRouter>\n            <Switch>\n              <Route path={routes.DASHBOARD} exact>\n                <DashboardPage />\n              </Route>\n              <Route path={routes.SETTINGS}>\n                <SettingsPage />\n              </Route>\n            </Switch>\n          </HashRouter>\n        </div>\n      </SettingsUpdateContext.Provider>\n    </SettingsContext.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}