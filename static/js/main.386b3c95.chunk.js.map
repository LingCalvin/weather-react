{"version":3,"sources":["common/services/geolocation.service.ts","nws/services/nws.service.ts","common/services/localStorage.service.ts","dashboard/utils/temperature.utils.ts","dashboard/components/weather-card.tsx","dashboard/reducers/forecast-reducer.ts","common/hooks/use-serialize-value.tsx","dashboard/components/menu.tsx","dashboard/pages/dashboard.styles.tsx","dashboard/components/hourly-forecast-grid-list-item.styles.tsx","dashboard/components/hourly-forecast-grid-list-tile.tsx","dashboard/components/hourly-forecast-grid-list.styles.tsx","dashboard/components/hourly-forecast-grid-list.tsx","dashboard/pages/dashboard.page.tsx","common/hooks/use-network-status.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["geolocationService","getCurrentPosition","Promise","res","rej","navigator","geolocation","nwsService","apiClient","latitude","longitude","a","this","get","data","wfo","x","y","stationId","queryParams","params","axios","create","baseURL","headers","Accept","localStorageService","setItem","key","value","localStorage","JSON","stringify","getItem","parse","format","unit","WeatherCard","icon","shortForecast","temperature","temperatureUnit","updateTime","Card","CardContent","Typography","variant","Box","display","justifyContent","alignItems","alt","src","temperatureUtils","toLocaleString","forecastReducer","state","action","type","payload","useSerializeValue","useEffect","Menu","open","anchorEl","anchorOrigin","onClose","onRefreshClicked","MenuItem","onClick","useStyles","makeStyles","theme","spacer","flexGrow","main","flexDirection","gap","spacing","root","HourlyForecastGridListTile","time","classes","className","toLocaleTimeString","gridList","gridAutoFlow","overflowX","HourlyForecastGridList","periods","map","index","startTime","Date","length","Divider","orientation","initializeForecastState","location","city","forecast","hourlyForecast","observation","getPointInfo","properties","relativeLocation","gridId","gridX","gridY","getForecast","forecastRes","getHourlyForecast","hourlyForecastRes","getStations","stationsRes","features","stationIdentifier","getStationObservations","limit","observationRes","DashboardPage","isOnline","useState","window","onLine","setIsOnline","setOffline","setOnline","addEventListener","removeEventListener","useNetworkStatus","loading","setLoading","useReducer","undefined","forecastState","forecastStateDispatch","currentWeather","updateForecast","useCallback","then","finally","menuAnchor","setMenuAnchor","AppBar","position","Toolbar","IconButton","color","coords","MyLocation","edge","e","currentTarget","MoreVert","Boolean","LinearProgress","Math","round","NaN","textDescription","timestamp","App","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.386b3c95.chunk.js","sourcesContent":["/**\n * Wraps `navigator.geolocation.getCurrentPosition()` in a Promise.\n */\nfunction getCurrentPosition(): Promise<GeolocationPosition> {\n  return new Promise<GeolocationPosition>((res, rej) =>\n    navigator.geolocation.getCurrentPosition(res, rej)\n  );\n}\n\n/**\n * Provides convenience wrappers for function of `navigator.geolocation`.\n */\nconst geolocationService = {\n  getCurrentPosition,\n};\n\nexport default geolocationService;\n","import axios, { AxiosInstance } from \"axios\";\nimport ForecastResponse from \"../interfaces/forecast-response\";\nimport PointInfo from \"../interfaces/point-info\";\nimport StationObservationsResponse from \"../interfaces/station-observations-response\";\nimport StationsResponse from \"../interfaces/stations-response\";\n\nclass NWSService {\n  constructor(private apiClient: AxiosInstance) {}\n\n  async getPointInfo(latitude: number, longitude: number): Promise<PointInfo> {\n    return (await this.apiClient.get(`/points/${latitude},${longitude}`)).data;\n  }\n\n  async getForecast({\n    wfo,\n    x,\n    y,\n  }: GridPointsParams): Promise<ForecastResponse> {\n    return (await this.apiClient.get(`/gridpoints/${wfo}/${x},${y}/forecast`))\n      .data;\n  }\n\n  async getHourlyForecast({\n    wfo,\n    x,\n    y,\n  }: GridPointsParams): Promise<ForecastResponse> {\n    return (\n      await this.apiClient.get(`/gridpoints/${wfo}/${x},${y}/forecast/hourly`)\n    ).data;\n  }\n\n  async getStations({\n    wfo,\n    x,\n    y,\n  }: GridPointsParams): Promise<StationsResponse> {\n    return (await this.apiClient.get(`/gridpoints/${wfo}/${x},${y}/stations`))\n      .data;\n  }\n\n  async getStationObservations({\n    stationId,\n    ...queryParams\n  }: GetStationObservationsParams): Promise<StationObservationsResponse> {\n    return (\n      await this.apiClient.get(`/stations/${stationId}/observations`, {\n        params: queryParams,\n      })\n    ).data;\n  }\n}\n\ninterface GetStationObservationsParams {\n  stationId: string;\n  station?: string[];\n  start?: string;\n  end?: string;\n  limit?: number;\n}\n\ninterface GridPointsParams {\n  wfo: string;\n  x: number;\n  y: number;\n}\n\nconst nwsService = new NWSService(\n  axios.create({\n    baseURL: \"https://api.weather.gov\",\n    headers: { Accept: \"application/geo+json\" },\n  })\n);\n\nexport default nwsService;\n","/**\n * Calls `localStorage.setItem()` with `key` and the result of calling\n * `JSON.stringify()` with `value` for `value`.\n */\nfunction setItem(key: string, value: any) {\n  localStorage.setItem(key, JSON.stringify(value));\n}\n\n/**\n * Calls `localStorage.getItem()` with `key`. If the result is `null`, it gets\n * returned. Otherwise, the result of calling `JSON.parse()` with the value is\n * returned.\n */\nfunction getItem(key: string): any | null {\n  const value = localStorage.getItem(key);\n  if (value === null) {\n    return null;\n  }\n  return JSON.parse(value);\n}\n\n/**\n * Provides convenience wrappers for functions of `localStorage`.\n */\nconst localStorageService = {\n  setItem,\n  getItem,\n};\n\nexport default localStorageService;\n","/**\n * Returns a formatted temperature string.\n *\n * @param value - The temperature sans unit\n * @param unit - The unit\n * @returns The temperature formatted as a string\n */\nexport function format(value: number, unit: string): string {\n  switch (unit) {\n    case \"F\":\n      return `${value}℉`;\n    case \"C\":\n      return `${value}℃`;\n    case \"K\":\n      return `${value}K`;\n    default:\n      return `${value}`;\n  }\n}\n","import { Box, Card, CardContent, Typography } from \"@material-ui/core\";\nimport * as temperatureUtils from \"../utils/temperature.utils\";\n\ninterface WeatherCardProps {\n  icon: string;\n  shortForecast: string;\n  temperature: number;\n  temperatureUnit: string;\n  updateTime?: Date;\n}\n\nexport default function WeatherCard({\n  icon,\n  shortForecast,\n  temperature,\n  temperatureUnit,\n  updateTime,\n}: WeatherCardProps) {\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\">{shortForecast}</Typography>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <img alt=\"\" src={icon} />\n          <Typography variant=\"h3\">\n            {temperatureUtils.format(temperature, temperatureUnit)}\n          </Typography>\n        </Box>\n        {updateTime && (\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n            <Typography variant=\"caption\">\n              {updateTime.toLocaleString()}\n            </Typography>\n          </Box>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","import ForecastState from \"../interfaces/forecast-state\";\n\ntype Action = { type: \"updateForecast\"; payload: Partial<ForecastState> };\n\nexport default function forecastReducer(\n  state: ForecastState,\n  action: Action\n): ForecastState {\n  switch (action.type) {\n    case \"updateForecast\":\n      return { ...state, ...action.payload };\n  }\n}\n","import { useEffect } from \"react\";\nimport localStorageService from \"../services/localStorage.service\";\n\n/**\n * Writes a value to localStorage whenever the value changes.\n *\n * @param key - The key in localStorage to use\n * @param value - The value to store in localStorage\n */\nexport default function useSerializeValue(key: string, value: any) {\n  useEffect(() => {\n    localStorageService.setItem(key, value);\n  }, [key, value]);\n}\n","import {\n  Menu as MuiMenu,\n  MenuProps as MuiMenuProps,\n  MenuItem,\n} from \"@material-ui/core\";\n\ninterface MenuProps {\n  open?: boolean;\n  anchorEl?: MuiMenuProps[\"anchorEl\"];\n  anchorOrigin?: MuiMenuProps[\"anchorOrigin\"];\n  onClose?: MuiMenuProps[\"onClose\"];\n  onRefreshClicked?: () => void;\n}\n\nexport default function Menu({\n  open = false,\n  anchorEl,\n  anchorOrigin,\n  onClose,\n  onRefreshClicked,\n}: MenuProps) {\n  return (\n    <MuiMenu\n      open={open}\n      anchorEl={anchorEl}\n      anchorOrigin={anchorOrigin}\n      onClose={onClose}\n    >\n      <MenuItem onClick={onRefreshClicked}>Refresh</MenuItem>\n    </MuiMenu>\n  );\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    flexGrow: 1,\n  },\n  main: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: theme.spacing(1),\n  },\n}));\n\nexport default useStyles;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(1),\n  },\n}));\n\nexport default useStyles;\n","import { Typography } from \"@material-ui/core\";\nimport * as temperatureUtils from \"../utils/temperature.utils\";\nimport useStyles from \"./hourly-forecast-grid-list-item.styles\";\n\ninterface HourlyForecastGridListTileProps {\n  temperature: number;\n  temperatureUnit: string;\n  time: Date;\n  icon: string;\n}\n\nexport default function HourlyForecastGridListTile({\n  temperature,\n  temperatureUnit,\n  time,\n  icon,\n}: HourlyForecastGridListTileProps) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Typography>{time.toLocaleTimeString()}</Typography>\n      <img src={icon} alt=\"\" />\n      <Typography variant=\"h6\">\n        {temperatureUtils.format(temperature, temperatureUnit)}\n      </Typography>\n    </div>\n  );\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridList: {\n    display: \"grid\",\n    gridAutoFlow: \"column\",\n    gap: theme.spacing(4),\n    overflowX: \"auto\",\n  },\n}));\n\nexport default useStyles;\n","import { Card, CardContent, Divider } from \"@material-ui/core\";\nimport { Fragment } from \"react\";\nimport { Period } from \"../../nws/interfaces/forecast-response\";\nimport HourlyForecastGridListTile from \"./hourly-forecast-grid-list-tile\";\nimport useStyles from \"./hourly-forecast-grid-list.styles\";\n\ninterface HourlyForecastGridListProps {\n  periods: Period[];\n}\n\nexport default function HourlyForecastGridList({\n  periods,\n}: HourlyForecastGridListProps) {\n  const classes = useStyles();\n  return (\n    <Card>\n      <CardContent>\n        <div className={classes.gridList}>\n          {periods.map(\n            (\n              { temperature, temperatureUnit, startTime: time, icon },\n              index\n            ) => (\n              <Fragment key={time}>\n                <HourlyForecastGridListTile\n                  temperature={temperature}\n                  temperatureUnit={temperatureUnit}\n                  time={new Date(time)}\n                  icon={icon}\n                />\n                {index !== periods.length - 1 && (\n                  <Divider orientation=\"vertical\" />\n                )}\n              </Fragment>\n            )\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useCallback, useEffect, useReducer, useState } from \"react\";\nimport {\n  AppBar,\n  Box,\n  IconButton,\n  LinearProgress,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport {\n  MoreVert as MoreVertIcon,\n  MyLocation as MyLocationIcon,\n} from \"@material-ui/icons\";\nimport geolocationService from \"../../common/services/geolocation.service\";\nimport nwsService from \"../../nws/services/nws.service\";\nimport localStorageService from \"../../common/services/localStorage.service\";\nimport useNetworkStatus from \"../../common/hooks/use-network-status\";\nimport WeatherCard from \"../components/weather-card\";\nimport forecastReducer from \"../reducers/forecast-reducer\";\nimport ForecastState from \"../interfaces/forecast-state\";\nimport useSerializeValue from \"../../common/hooks/use-serialize-value\";\nimport Menu from \"../components/menu\";\nimport Coordinates from \"../../common/interfaces/coordinates\";\nimport useStyles from \"./dashboard.styles\";\nimport HourlyForecastGridList from \"../components/hourly-forecast-grid-list\";\n\nfunction initializeForecastState(): ForecastState {\n  return {\n    location: localStorageService.getItem(\"location\"),\n    city: localStorageService.getItem(\"city\"),\n    state: localStorageService.getItem(\"state\"),\n    forecast: localStorageService.getItem(\"forecast\"),\n    hourlyForecast: localStorageService.getItem(\"hourlyForecast\"),\n    stationId: localStorageService.getItem(\"stationId\"),\n    observation: localStorageService.getItem(\"observation\"),\n  };\n}\n\n/**\n * Returns a new `ForecastState` based on `location`.\n *\n * @param location - The location to get the forecast for\n * @returns A `Promise` for the new `ForecastState`\n */\nasync function getForecast(location: Coordinates): Promise<ForecastState> {\n  const {\n    properties: {\n      relativeLocation: {\n        properties: { city, state },\n      },\n      gridId: wfo,\n      gridX: x,\n      gridY: y,\n    },\n  } = await nwsService.getPointInfo(location.latitude, location.longitude);\n  const forecastRes = await nwsService.getForecast({ wfo, x, y });\n  const hourlyForecastRes = await nwsService.getHourlyForecast({\n    wfo,\n    x,\n    y,\n  });\n  const stationsRes = await nwsService.getStations({ wfo, x, y });\n  const stationId = stationsRes.features[0].properties.stationIdentifier;\n  const observationRes = await nwsService.getStationObservations({\n    stationId,\n    limit: 1, // Only get the most recent observation\n  });\n  return {\n    location,\n    city,\n    state,\n    forecast: forecastRes,\n    hourlyForecast: hourlyForecastRes,\n    stationId,\n    observation: observationRes,\n  };\n}\n\nexport default function DashboardPage() {\n  const classes = useStyles();\n  const isOnline = useNetworkStatus();\n  const [loading, setLoading] = useState(false);\n  const [forecastState, forecastStateDispatch] = useReducer(\n    forecastReducer,\n    undefined,\n    initializeForecastState\n  );\n\n  const {\n    location,\n    city,\n    state,\n    forecast,\n    hourlyForecast,\n    observation,\n    stationId,\n  } = forecastState;\n\n  const currentWeather = observation?.features[0].properties ?? null;\n\n  const updateForecast = useCallback((location: Coordinates) => {\n    setLoading(true);\n    getForecast(location)\n      .then((state) =>\n        forecastStateDispatch({ type: \"updateForecast\", payload: state })\n      )\n      .finally(() => setLoading(false));\n  }, []);\n\n  // Fetch forecast data when the location gets updated\n  useEffect(() => {\n    if (!location || !isOnline) {\n      return;\n    }\n    updateForecast(location);\n  }, [isOnline, location, updateForecast]);\n\n  // Save information about the last location and forecast retrieved so it can\n  // be used after the application has been closed\n  useSerializeValue(\"location\", location);\n  useSerializeValue(\"city\", city);\n  useSerializeValue(\"state\", state);\n  useSerializeValue(\"forecast\", forecast);\n  useSerializeValue(\"hourlyForecast\", hourlyForecast);\n  useSerializeValue(\"forecastState\", forecastState);\n  useSerializeValue(\"station\", stationId);\n  useSerializeValue(\"observation\", observation);\n\n  const updateLocation = () => {\n    geolocationService.getCurrentPosition().then(({ coords }) => {\n      forecastStateDispatch({\n        type: \"updateForecast\",\n        payload: {\n          location: { latitude: coords.latitude, longitude: coords.longitude },\n        },\n      });\n    });\n  };\n\n  const [menuAnchor, setMenuAnchor] = useState<null | HTMLElement>(null);\n\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            {city || state\n              ? `${city ?? \"Unknown\"}, ${state ?? \"Unknown\"}`\n              : \"Unknown\"}\n          </Typography>\n          <IconButton color=\"inherit\" onClick={updateLocation}>\n            <MyLocationIcon />\n          </IconButton>\n          <Box className={classes.spacer} />\n          <IconButton\n            color=\"inherit\"\n            edge=\"end\"\n            onClick={(e) => setMenuAnchor(e.currentTarget)}\n          >\n            <MoreVertIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Menu\n        anchorEl={menuAnchor}\n        open={Boolean(menuAnchor)}\n        onClose={() => setMenuAnchor(null)}\n        onRefreshClicked={() => {\n          setMenuAnchor(null);\n          if (!location || !isOnline) {\n            return;\n          }\n          updateForecast(location);\n        }}\n      />\n      {loading && <LinearProgress color=\"secondary\" />}\n      <main className={classes.main}>\n        {currentWeather !== null && (\n          <WeatherCard\n            temperature={Math.round(currentWeather.temperature.value ?? NaN)}\n            temperatureUnit=\"C\"\n            icon={currentWeather.icon}\n            shortForecast={currentWeather.textDescription}\n            updateTime={new Date(currentWeather.timestamp)}\n          />\n        )}\n        <HourlyForecastGridList\n          periods={hourlyForecast?.properties.periods ?? []}\n        />\n      </main>\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\n/**\n * Returns the browser's online status.\n */\nexport default function useNetworkStatus() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n  useEffect(() => {\n    function setOffline() {\n      setIsOnline(false);\n    }\n    function setOnline() {\n      setIsOnline(true);\n    }\n    window.addEventListener(\"offline\", setOffline);\n    window.addEventListener(\"online\", setOnline);\n\n    return () => {\n      window.removeEventListener(\"offline\", setOffline);\n      window.removeEventListener(\"online\", setOnline);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import \"./App.css\";\nimport DashboardPage from \"./dashboard/pages/dashboard.page\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <DashboardPage />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}