{"version":3,"sources":["nws/enums/distance-unit.ts","nws/enums/forecast-type.ts","nws/enums/pressure-unit.ts","nws/enums/speed-unit.ts","nws/enums/temperature-unit.ts","nws/exceptions/unexpected-unit-code.exceptions.ts","nws/services/nws.service.ts","common/services/local-storage.service.ts","dashboard/reducers/forecast-reducer.ts","dashboard/components/menu.tsx","dashboard/pages/dashboard.page.styles.tsx","common/components/image.tsx","dashboard/components/hourly-forecast.styles.tsx","dashboard/enums/nws-icon-size.ts","dashboard/utils/temperature.utils.ts","dashboard/components/hourly-forecast.tsx","dashboard/utils/speed.utils.ts","dashboard/components/weather-card.styles.ts","dashboard/components/weather-card.tsx","dashboard/pages/hourly-forecast.page.tsx","settings/constants/default-settings.ts","settings/contexts/settings.context.tsx","dashboard/pages/daily-forecast.page.styles.tsx","dashboard/pages/daily-forecast.page.tsx","arcgis-geocoding/services/arcgis-geocoding.service.ts","arcgis-geocoding/components/search.tsx","common/hooks/use-debounced-value.tsx","common/services/geolocation.service.ts","dashboard/components/app-bar.styles.tsx","dashboard/components/app-bar.tsx","dashboard/pages/dashboard.page.tsx","common/hooks/use-serialize-value.tsx","common/hooks/use-network-status.tsx","settings/components/unit-menu.tsx","settings/contexts/settings-update.context.tsx","settings/utils/speed-unit.utils.ts","settings/utils/temperature-unit.utils.ts","settings/pages/settings.page.styles.tsx","settings/pages/settings.page.tsx","settings/reducers/settings.reducer.ts","settings/services/settings.service.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["DistanceUnit","ForecastType","PressureUnit","SpeedUnit","TemperatureUnit","UnexpectedUnitCodeException","unitCode","Error","captureStackTrace","name","nwsService","apiClient","latitude","longitude","a","this","get","data","getPointInfoRaw","rawPointInfo","coordinates","geometry","gridId","properties","gridX","gridY","timeZone","radarStation","relativeLocation","city","state","wfo","x","y","params","convertForecastResponseToForecast","getRawForecast","getRawHourlyForecast","getRawStations","features","map","id","stationIdentifier","stationId","queryParams","getRawStationObservations","station","timestamp","Date","description","textDescription","icon","temperature","convertTemperature","windDirection","value","undefined","windSpeed","convertSpeed","windGust","barometricPressure","convertPressure","seaLevelPressure","visibility","convertDistance","maxTemperatureLast24Hours","minTemperatureLast24Hours","precipitationLastHour","precipitationLast3Hours","precipitationLast6Hours","relativeHumidity","convertRelativeHumidity","windChill","heatIndex","axios","create","baseURL","headers","Accept","convertRawPeriodToPeriod","rawPeriod","startTime","endTime","isDayTime","isDaytime","temperatureUnit","shortForecast","detailedForecast","updatedTime","updateTime","type","Daily","periods","unit","Inch","Meter","Kilometer","KilometersPerHour","Celsius","Fahrenheit","Kelvin","Pascal","localStorageService","setItem","key","localStorage","JSON","stringify","getItem","reviver","parse","forecastReducer","action","payload","Menu","open","anchorEl","anchorOrigin","onClose","onRefreshClicked","onSettingsClicked","MenuItem","onClick","useStyles","makeStyles","theme","root","height","display","flexDirection","main","overflowY","flexGrow","hourlyForecastPage","gap","spacing","bottomNavigation","borderTop","borderColor","palette","divider","minHeight","Image","skeletonProps","className","imageProps","useState","loaded","setLoaded","Skeleton","variant","style","onLoad","NWSIconSize","alignItems","gridTemplateColumns","fontWeight","format","convert","targetUnit","kelvinValue","covertToKelvin","HourlyForecast","forecast","classes","Typography","toLocaleTimeString","hour","src","alt","Small","width","TemperatureUtils","toISOString","MetersPerSecond","MilesPerHour","speed","valueInMetersPerSecond","convertToMetersPerSecond","alignSelf","WeatherCard","Card","CardContent","Box","justifyContent","Medium","Math","round","SpeedUtils","toLocaleString","HourlyForecastPage","currentWeather","hourlyForecast","defaultSettings","speedUnit","SettingsContext","createContext","forecastTile","gridTemplateAreas","columnGap","forecastTileTitle","gridArea","justifySelf","forecastTileIcon","forecastTileDescription","forecastTileTemperature","DailyForecastPage","period","arcGISGeocodingService","suggestions","candidates","paramsSerializer","URLSearchParams","toString","Search","suggestParams","startAdornment","autocompleteProps","autoFocus","placeholder","onSelectionChange","setValue","inputValue","setInputValue","setSuggestions","debouncedInputValue","timeout","debouncedValue","setDebouncedValue","lastFired","useRef","now","useEffect","handle","setTimeout","current","clearTimeout","useDebouncedValue","inputChangeReason","length","suggest","text","f","then","Autocomplete","options","getOptionLabel","option","getOptionSelected","isCollection","magicKey","onInputChange","_e","reason","onChange","findAddressCandidates","SingeLine","maxLocations","outFields","renderInput","TextField","InputProps","InputAdornment","position","geolocationService","getCurrentPosition","Promise","res","rej","navigator","geolocation","searchContainer","backgroundColor","background","paper","padding","borderRadius","shape","searchOrLocateContainer","searchExitButton","spacer","AppBar","location","onShowMenu","onLocationChange","showSearch","setShowSearch","Toolbar","autoHighlight","fullWidth","IconButton","ArrowBack","category","countryCode","color","coords","MyLocation","edge","MoreVert","initializeForecastState","upperCasedKey","toLocaleUpperCase","includes","observations","getPointInfo","getForecast","getHourlyForecast","getStations","stations","getStationObservations","limit","DashboardPage","history","useHistory","useContext","isOnline","window","onLine","setIsOnline","setOffline","setOnline","addEventListener","removeEventListener","useNetworkStatus","loading","setLoading","useReducer","forecastState","forecastStateDispatch","updateForecast","useCallback","finally","transformTemperature","rest","transformForecast","transformedForecast","useMemo","transformedHourlyForecast","currentDate","endDate","setDate","getDate","setHours","currentHourlyPeriods","filter","menuAnchor","setMenuAnchor","activeTab","setActiveTab","TabContext","e","currentTarget","Boolean","push","routes","SETTINGS","LinearProgress","TabPanel","BottomNavigation","showLabels","BottomNavigationAction","Schedule","label","CalendarToday","UnitMenu","children","SettingsUpdateContext","listSubHeader","primary","fontSize","typography","body1","textAlign","speedUnits","Object","keys","temperatureUnits","SettingsPage","updateSettings","speedUnitMenuAnchor","setSpeedUnitMenuAnchor","temperatureUnitMenuAnchor","setTemperatureUnitMenuAnchor","goBack","SpeedUnitUtils","TemperatureUnitUtils","List","ListSubheader","inset","ListItem","button","firstElementChild","ListItemText","secondary","settingsReducer","update","generateKey","settingsService","defaultValue","loadOrDefault","App","loadAllOrDefault","settingsState","settingsDispatch","Provider","forEach","save","path","DASHBOARD","exact","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6KAAYA,ECAAC,ECAAC,ECAAC,ECAAC,E,oNJAAJ,K,YAAAA,E,cAAAA,E,YAAAA,E,uBAAAA,M,cCAAC,O,iBAAAA,I,oBAAAA,M,cCAAC,K,gBAAAA,E,+CAAAA,E,6CAAAA,E,WAAAA,M,cCAAC,K,wCAAAA,E,oCAAAA,E,+BAAAA,M,cCAAC,K,kBAAAA,E,wBAAAA,E,iBAAAA,M,yCCASC,E,kDACnB,WAAmBC,GAAmB,IAAD,8BACnC,8CAA+BA,KADdA,WAGbC,MAAMC,mBACRD,MAAMC,kBAAN,eAA8BH,GAGhC,EAAKI,KAAO,8BAPuB,E,sBADkBF,QCsK1CG,EAPI,I,WAxIjB,WAAoBC,GAA2B,yBAA3BA,Y,0FAEpB,WACEC,EACAC,GAFF,SAAAC,EAAA,sEAIgBC,KAAKJ,UAAUK,IAAf,kBAA8BJ,EAA9B,YAA0CC,IAJ1D,uCAIwEI,MAJxE,gD,0HAOA,WAAmBL,EAAkBC,GAArC,eAAAC,EAAA,sEAC6BC,KAAKG,gBAAgBN,EAAUC,GAD5D,cACQM,EADR,yBAES,CACLC,YAAa,CACXD,EAAaE,SAASD,YAAY,GAClCD,EAAaE,SAASD,YAAY,IAEpCE,OAAQH,EAAaI,WAAWD,OAChCE,MAAOL,EAAaI,WAAWC,MAC/BC,MAAON,EAAaI,WAAWE,MAC/BC,SAAUP,EAAaI,WAAWG,SAClCC,aAAcR,EAAaI,WAAWG,SACtCE,iBAAkB,CAChBC,KAAMV,EAAaI,WAAWK,iBAAiBL,WAAWM,KAC1DC,MAAOX,EAAaI,WAAWK,iBAAiBL,WAAWO,SAdjE,gD,4HAmBA,iCAAAhB,EAAA,6DACEiB,EADF,EACEA,IACAC,EAFF,EAEEA,EACAC,EAHF,EAGEA,EAHF,SAKgBlB,KAAKJ,UAAUK,IAAf,sBAAkCe,EAAlC,YAAyCC,EAAzC,YAA8CC,EAA9C,cALhB,uCAMKhB,MANL,gD,uHASA,WAAkBiB,GAAlB,SAAApB,EAAA,kEACSqB,EADT,SACiDpB,KAAKqB,eAAeF,GADrE,4G,gIAIA,iCAAApB,EAAA,6DACEiB,EADF,EACEA,IACAC,EAFF,EAEEA,EACAC,EAHF,EAGEA,EAHF,SAMUlB,KAAKJ,UAAUK,IAAf,sBAAkCe,EAAlC,YAAyCC,EAAzC,YAA8CC,EAA9C,qBANV,uCAOIhB,MAPJ,gD,6HAUA,WAAwBiB,GAAxB,SAAApB,EAAA,kEACSqB,EADT,SAEUpB,KAAKsB,qBAAqBH,GAFpC,4G,0HAMA,iCAAApB,EAAA,6DACEiB,EADF,EACEA,IACAC,EAFF,EAEEA,EACAC,EAHF,EAGEA,EAHF,SAKgBlB,KAAKJ,UAAUK,IAAf,sBAAkCe,EAAlC,YAAyCC,EAAzC,YAA8CC,EAA9C,cALhB,uCAMKhB,MANL,gD,uHASA,WAAkBiB,GAAlB,iBAAApB,EAAA,sEAC6BC,KAAKuB,eAAeJ,GADjD,uBACUK,EADV,EACUA,SADV,kBAESA,EAASC,KAAI,gBAAGjB,EAAH,EAAGA,WAAH,MAAqB,CACvCkB,GAAIlB,EAAWmB,kBACfjC,KAAMc,EAAWd,KACjBiB,SAAUH,EAAWG,cALzB,gD,qIASA,+BAAAZ,EAAA,6DACE6B,EADF,EACEA,UACGC,EAFL,sCAKU7B,KAAKJ,UAAUK,IAAf,oBAAgC2B,EAAhC,iBAA0D,CAC9DT,OAAQU,IANd,uCAQI3B,MARJ,gD,kIAWA,WACEiB,GADF,iBAAApB,EAAA,sEAG6BC,KAAK8B,0BAA0BX,GAH5D,uBAGUK,EAHV,EAGUA,SAHV,kBAISA,EAASC,KAAI,kBAAGjB,EAAH,EAAGA,WAAH,MAAqB,CACvCuB,QAASvB,EAAWuB,QACpBC,UAAW,IAAIC,KAAKzB,EAAWwB,WAC/BE,YAAa1B,EAAW2B,gBACxBC,KAAM5B,EAAW4B,KACjBC,YAAaC,EAAmB9B,EAAW6B,aAC3CE,cAAa,UAAE/B,EAAW+B,cAAcC,aAA3B,aAAoCC,EACjDC,UAAWC,EAAanC,EAAWkC,WACnCE,SAAUD,EAAanC,EAAWoC,UAClCC,mBAAoBC,EAAgBtC,EAAWqC,oBAC/CE,iBAAkBD,EAAgBtC,EAAWuC,kBAC7CC,WAAYC,EAAgBzC,EAAWwC,YACvCE,0BAA2BZ,EACzB9B,EAAW0C,2BAEbC,0BAA2Bb,EACzB9B,EAAW2C,2BAEbC,sBAAuBH,EAAgBzC,EAAW4C,uBAClDC,wBAAyBJ,EACvBzC,EAAW6C,yBAEbC,wBAAyBL,EACvBzC,EAAW8C,yBAEbC,iBAAkBC,EAAwBhD,EAAW+C,kBACrDE,UAAWnB,EAAmB9B,EAAWiD,WACzCC,UAAWpB,EAAmB9B,EAAWkD,gBA/B7C,gD,8DAkDiB,CACjBC,IAAMC,OAAO,CACXC,QAAS,0BACTC,QAAS,CAAEC,OAAQ,2BAQvB,SAASC,EAAyBC,GAChC,MAAO,CACLvE,KAAMuE,EAAUvE,KAChBwE,UAAW,IAAIjC,KAAKgC,EAAUC,WAC9BC,QAAS,IAAIlC,KAAKgC,EAAUE,SAC5BC,UAAWH,EAAUI,UACrBhC,YAAaC,EAAmB,CAC9BE,MAAOyB,EAAU5B,YACjB9C,SAAU0E,EAAUK,kBAEtBlC,KAAM6B,EAAU7B,KAChBmC,cAAeN,EAAUM,cACzBC,iBAAkBP,EAAUO,kBAIhC,SAASpD,EAAT,GAEgC,IAD9BZ,EAC6B,EAD7BA,WAEA,MAAO,CACLiE,YAAa,IAAIxC,KAAKzB,EAAWkE,YACjCC,KAAMzF,EAAa0F,MACnBC,QAASrE,EAAWqE,QAAQpD,IAAIuC,IAIpC,SAASf,EAAT,GAGyD,IAFvDT,EAEsD,EAFtDA,MACAjD,EACsD,EADtDA,SAEA,GAAc,OAAViD,EAAJ,CAGA,GAAiB,YAAbjD,EACF,MAAO,CAAEiD,QAAOsC,KAAM7F,EAAa8F,MAErC,GAAiB,WAAbxF,EACF,MAAO,CAAEiD,QAAOsC,KAAM7F,EAAa+F,OAErC,GAAiB,YAAbzF,EACF,MAAO,CAAEiD,QAAOsC,KAAM7F,EAAagG,WAErC,MAAM,IAAI3F,EAA4BC,IAGxC,SAASiE,EAAT,GAGuD,IAFrDhB,EAEoD,EAFpDA,MACAjD,EACoD,EADpDA,SAEA,GAAc,OAAViD,EAAJ,CAGA,GAAiB,iBAAbjD,EACF,OAAOiD,EAET,MAAM,IAAIlD,EAA4BC,IAGxC,SAASoD,EAAT,GAGsD,IAFpDH,EAEmD,EAFnDA,MACAjD,EACmD,EADnDA,SAEA,GAAc,OAAViD,EAAJ,CAGA,GAAiB,gBAAbjD,EACF,MAAO,CAAEiD,QAAOsC,KAAM1F,EAAU8F,mBAElC,MAAM,IAAI5F,EAA4BC,IAcxC,SAAS+C,EAAT,GAG4D,IAF1DE,EAEyD,EAFzDA,MACAjD,EACyD,EADzDA,SAEA,GAAc,OAAViD,EAAJ,CAGA,GAAiB,MAAbjD,GAAiC,cAAbA,EACtB,MAAO,CAAEiD,QAAOsC,KAAMzF,EAAgB8F,SAExC,GAAiB,MAAb5F,EACF,MAAO,CAAEiD,QAAOsC,KAAMzF,EAAgB+F,YAExC,GAAiB,MAAb7F,EACF,MAAO,CAAEiD,QAAOsC,KAAMzF,EAAgBgG,QAExC,MAAM,IAAI/F,EAA4BC,IAGxC,SAASuD,EAAT,GAGyD,IAFvDN,EAEsD,EAFtDA,MACAjD,EACsD,EADtDA,SAEA,GAAc,OAAViD,EAAJ,CAGA,GAAiB,YAAbjD,EACF,MAAO,CAAEiD,QAAOsC,KAAM3F,EAAamG,QAErC,MAAM,IAAIhG,EAA4BC,IC9PxC,IAKegG,EALa,CAC1BC,QAxBF,SAAiBC,EAAajD,GAC5BkD,aAAaF,QAAQC,EAAKE,KAAKC,UAAUpD,KAwBzCqD,QAhBF,SACEJ,EACAK,GAEA,IAAMtD,EAAQkD,aAAaG,QAAQJ,GACnC,OAAc,OAAVjD,EACK,KAEFmD,KAAKI,MAAMvD,EAAOsD,KCjBZ,SAASE,EACtBjF,EACAkF,GAEA,OAAQA,EAAOtB,MACb,IAAK,iBACH,OAAO,2BAAK5D,GAAUkF,EAAOC,U,4BCKpB,SAASC,EAAT,GAOA,IAAD,IANZC,YAMY,SALZC,EAKY,EALZA,SACAC,EAIY,EAJZA,aACAC,EAGY,EAHZA,QACAC,EAEY,EAFZA,iBACAC,EACY,EADZA,kBAEA,OACE,eAAC,IAAD,CACEL,KAAMA,EACNC,SAAUA,EACVC,aAAcA,EACdC,QAASA,EAJX,UAME,cAACG,EAAA,EAAD,CAAUC,QAASH,EAAnB,qBACA,cAACE,EAAA,EAAD,CAAUC,QAASF,EAAnB,yB,aCNSG,EAvBGC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,OAAQ,OACRC,QAAS,OACTC,cAAe,UAEjBC,KAAM,CACJC,UAAW,OACXC,SAAU,GAEZC,mBAAoB,CAClBL,QAAS,OACTC,cAAe,SACfK,IAAKT,EAAMU,QAAQ,IAErBC,iBAAkB,CAChBC,UAAW,YACXC,YAAab,EAAMc,QAAQC,QAE3BC,UAAW,Y,iBCXA,SAASC,EAAT,GAIC,IAHdC,EAGa,EAHbA,cACAC,EAEa,EAFbA,UACGC,EACU,+CACeC,oBAAS,GADxB,mBACNC,EADM,KACEC,EADF,KAGb,OACE,sCACID,GACA,cAACE,EAAA,EAAD,aAAUL,UAAWA,EAAWM,QAAQ,QAAWP,IAErD,iCACEC,UAAWA,EACXO,MAAO,CAAEvB,QAASmB,OAAS3F,EAAY,QACvCgG,OAAQ,kBAAMJ,GAAU,KACpBH,OCxBZ,ICFYQ,GDcG9B,GAZGC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJE,QAAS,OACT0B,WAAY,SACZC,oBAAqB,kBACrBrB,IAAKT,EAAMU,QAAQ,IAErBnF,YAAa,CACXwG,WAAY,YEAT,SAASC,GAAT,GAAuD,IAArCtG,EAAoC,EAApCA,MACvB,OAD2D,EAA7BsC,MAE5B,KAAKzF,EAAgB8F,QACnB,MAAM,GAAN,OAAU3C,EAAV,UACF,KAAKnD,EAAgB+F,WACnB,MAAM,GAAN,OAAU5C,EAAV,UACF,KAAKnD,EAAgBgG,OACnB,MAAM,GAAN,OAAU7C,EAAV,UACF,QACE,MAAM,GAAN,OAAUA,IA8BT,SAASuG,GACd1G,EACA2G,GACc,IACCC,EAzBjB,YAAoE,IAA1CzG,EAAyC,EAAzCA,MAAOsC,EAAkC,EAAlCA,KAC/B,OAAQA,GACN,KAAKzF,EAAgB8F,QACnB,MAAO,CAAE3C,MAAOA,EAAQ,OAAQsC,KAAMzF,EAAgBgG,QACxD,KAAKhG,EAAgB+F,WACnB,MAAO,CACL5C,MAAuB,GAAdA,EAAQ,IAAW,EAAI,OAChCsC,KAAMzF,EAAgBgG,QAE1B,KAAKhG,EAAgBgG,OACnB,MAAO,CAAE7C,QAAOsC,SAeWoE,CAAe7G,GAAtCG,MACR,OAAQwG,GACN,KAAK3J,EAAgB8F,QACnB,MAAO,CAAE3C,MAAOyG,EAAc,OAAQnE,KAAMkE,GAC9C,KAAK3J,EAAgB+F,WACnB,MAAO,CACL5C,MAAiC,GAAxByG,EAAc,QAAe,EAAI,GAC1CnE,KAAMkE,GAEV,KAAK3J,EAAgBgG,OACnB,MAAO,CAAE7C,MAAOyG,EAAanE,KAAMkE,ICnD1B,SAASG,GAAT,GAA4D,IAAlCC,EAAiC,EAAjCA,SACjCC,EAAUzC,KAChB,OACE,qBAAKqB,UAAWoB,EAAQtC,KAAxB,SACGqC,EAAS3H,KAAI,gBAAGyC,EAAH,EAAGA,UAAW9B,EAAd,EAAcA,KAAMmC,EAApB,EAAoBA,cAAelC,EAAnC,EAAmCA,YAAnC,OACZ,eAAC,WAAD,WACE,cAACiH,EAAA,EAAD,CAAYrB,UAAWoB,EAAQhH,YAA/B,SACG6B,EAAUqF,wBAAmB9G,EAAW,CAAE+G,KAAM,cAEnD,cAACzB,EAAD,CACE0B,IAAKrH,EACLsH,IAAI,GACJ1C,OAAQ0B,GAAYiB,MACpBC,MAAOlB,GAAYiB,MACnB3B,cAAe,CACbhB,OAAQ0B,GAAYiB,MACpBC,MAAOlB,GAAYiB,SAGvB,cAACL,EAAA,EAAD,UAAa/E,IACb,cAAC+E,EAAA,EAAD,UAAaO,GAAwBxH,OAfxB6B,EAAU4F,qB,SFjBrBpB,O,kBAAAA,I,oBAAAA,I,oBAAAA,Q,uCGQL,SAASI,GAAT,GAAiD,IAA/BtG,EAA8B,EAA9BA,MACvB,OADqD,EAAvBsC,MAE5B,KAAK1F,EAAU8F,kBACb,MAAM,GAAN,OAAU1C,EAAV,SACF,KAAKpD,EAAU2K,gBACb,MAAM,GAAN,OAAUvH,EAAV,QACF,KAAKpD,EAAU4K,aACb,MAAM,GAAN,OAAUxH,EAAV,QACF,QACE,MAAM,GAAN,OAAUA,IA2BT,SAASuG,GAAQkB,EAAcjB,GAA+B,IACpDkB,EAnBjB,YAAkE,IAA9B1H,EAA6B,EAA7BA,MAAOsC,EAAsB,EAAtBA,KACzC,OAAQA,GACN,KAAK1F,EAAU8F,kBACb,MAAO,CAAE1C,MAAOA,EAAQ,IAAKsC,KAAM1F,EAAU2K,iBAC/C,KAAK3K,EAAU2K,gBACb,MAAO,CAAEvH,QAAOsC,QAClB,KAAK1F,EAAU4K,aACb,MAAO,CAAExH,MAAOA,EAAQ,MAAOsC,KAAM1F,EAAU2K,kBAYTI,CAAyBF,GAA3DzH,MACR,OAAQwG,GACN,KAAK5J,EAAU8F,kBACb,MAAO,CAAE1C,MAAgC,IAAzB0H,EAA8BpF,KAAMkE,GACtD,KAAK5J,EAAU2K,gBACb,MAAO,CAAEvH,MAAO0H,EAAwBpF,KAAMkE,GAChD,KAAK5J,EAAU4K,aACb,MAAO,CAAExH,MAAgC,MAAzB0H,EAAgCpF,KAAMkE,IClD5D,IAMepC,GANGC,YAAW,CAC3BzE,KAAM,CACJgI,UAAW,gBCeA,SAASC,GAAT,GAQO,IAPpBjI,EAOmB,EAPnBA,KACAmC,EAMmB,EANnBA,cACAlC,EAKmB,EALnBA,YACAK,EAImB,EAJnBA,UACAa,EAGmB,EAHnBA,iBACAmB,EAEmB,EAFnBA,WACA3C,EACmB,EADnBA,QAEMsH,EAAUzC,KAChB,OACE,cAAC0D,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,WACE,cAACjB,EAAA,EAAD,CAAYf,QAAQ,KAApB,SAA0BhE,IAC1B,eAACiG,GAAA,EAAD,CAAKvD,QAAQ,OAAOwD,eAAe,gBAAgB9B,WAAW,SAA9D,UACE,cAACZ,EAAD,CACEE,UAAWoB,EAAQjH,KACnBsH,IAAI,GACJD,IAAKrH,EACL4E,OAAQ0B,GAAYgC,OACpBd,MAAOlB,GAAYgC,OACnB1C,cAAe,CACbhB,OAAQ0B,GAAYgC,OACpBd,MAAOlB,GAAYgC,UAGvB,eAACF,GAAA,EAAD,CAAKvD,QAAQ,OAAOC,cAAc,SAASyB,WAAW,WAAtD,UACE,cAACW,EAAA,EAAD,CAAYf,QAAQ,KAApB,SACGsB,GAAwBxH,UAELI,IAArBc,GACC,cAAC+F,EAAA,EAAD,8BAA0BqB,KAAKC,MAC7BrH,GADF,YAIad,IAAdC,GACC,cAAC4G,EAAA,EAAD,0BAAsBuB,GAAkBnI,MAEzCgC,GACC,cAAC8F,GAAA,EAAD,CAAKvD,QAAQ,OAAOwD,eAAe,WAAnC,SACE,cAACnB,EAAA,EAAD,CAAYf,QAAQ,UAApB,SACG7D,EAAWoG,qBAIjBpG,GACC,cAAC8F,GAAA,EAAD,CAAKvD,QAAQ,OAAOwD,eAAe,WAAnC,SACE,cAACnB,EAAA,EAAD,CAAYf,QAAQ,UAApB,SAA+BxG,iBCtDhC,SAASgJ,GAAT,GAMc,IAL3BC,EAK0B,EAL1BA,eACAC,EAI0B,EAJ1BA,eACAvG,EAG0B,EAH1BA,WACA3C,EAE0B,EAF1BA,QACAkG,EAC0B,EAD1BA,UAEA,OACE,sBAAKA,UAAWA,EAAhB,UACE,cAACoC,GAAD,CACEjI,KAAM4I,EAAe5I,KACrBmC,cAAeyG,EAAezG,cAC9BlC,YAAa2I,EAAe3I,YAC5BK,UAAWsI,EAAetI,UAC1Ba,iBAAkByH,EAAezH,iBACjCmB,WAAYA,EACZ3C,QAASA,IAEX,cAACoH,GAAD,CAAgBC,SAAU6B,O,aCzBnBC,GAA4B,CACvCC,UAAW/L,EAAU4K,aACrB1F,gBAAiBjF,EAAgB+F,YCFtBgG,GAAkBC,wBAAwBH,IC4BxCtE,GA/BGC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJE,QAAS,OACTC,cAAe,SACfK,IAAKT,EAAMU,QAAQ,IAErB8D,aAAc,CACZrE,QAAS,OACTsE,kBAAkB,8IAIlB5C,WAAY,SACZ6C,UAAW1E,EAAMU,QAAQ,IAE3BiE,kBAAmB,CACjBC,SAAU,oBACVC,YAAa,SAEfC,iBAAkB,CAChBF,SAAU,oBAEZG,wBAAyB,CACvBH,SAAU,2BAEZI,wBAAyB,CACvBJ,SAAU,0BACVC,YAAa,WClBF,SAASI,GAAT,GAEa,IAD1B3C,EACyB,EADzBA,SAEMC,EAAUzC,KAChB,OACE,qBAAKqB,UAAWoB,EAAQtC,KAAxB,SACGqC,EAAS3H,KAAI,SAACuK,GAAD,OACZ,sBACE/D,UAAWoB,EAAQiC,aADrB,UAIE,cAAChC,EAAA,EAAD,CAAYrB,UAAWoB,EAAQoC,kBAAmBlD,QAAQ,KAA1D,SACGyD,EAAOtM,OAEV,cAACqI,EAAD,CACEE,UAAWoB,EAAQuC,iBACnBnC,IAAKuC,EAAO5J,KACZsH,IAAI,GACJ1C,OAAQ0B,GAAYgC,OACpBd,MAAOlB,GAAYgC,OACnB1C,cAAe,CACbhB,OAAQ0B,GAAYgC,OACpBd,MAAOlB,GAAYgC,UAGvB,cAACpB,EAAA,EAAD,CAAYrB,UAAWoB,EAAQwC,wBAA/B,SACGG,EAAOzH,gBAEV,cAAC+E,EAAA,EAAD,CAAYf,QAAQ,KAAKN,UAAWoB,EAAQyC,wBAA5C,SACGjC,GAAwBmC,EAAO3J,iBApB7B2J,EAAO9H,UAAU4F,oB,wGCZzB,IAoCQmC,GAXgB,IAzB/B,WACE,WAAoBrM,GAA2B,yBAA3BA,YADtB,kFAGE,WAAcuB,GAAd,iBAAApB,EAAA,sEAGYC,KAAKJ,UAAUK,IAAqB,WAAY,CACxDkB,WAJJ,uBAEY+K,EAFZ,EAEIhM,KAAQgM,YAFZ,kBAMSA,GANT,gDAHF,iIAYE,WACE/K,GADF,iBAAApB,EAAA,sEAKYC,KAAKJ,UAAUK,IACvB,yBACA,CAAEkB,WAPN,uBAIYgL,EAJZ,EAIIjM,KAAQiM,WAJZ,kBASSA,GATT,gDAZF,8DAyB+B,CAC7BxI,IAAMC,OAAO,CACXC,QACE,sEACFuI,iBAAkB,SAACjL,GAEjB,OAAO,IAAIkL,gBAAgBlL,GAAQmL,eCX1B,SAASC,GAAT,GAOE,IANfC,EAMc,EANdA,cACAC,EAKc,EALdA,eACAC,EAIc,EAJdA,kBACAC,EAGc,EAHdA,UACAC,EAEc,EAFdA,YACAC,EACc,EADdA,kBACc,EACY1E,mBAA4B,MADxC,mBACP3F,EADO,KACAsK,EADA,OAEsB3E,mBAAS,IAF/B,mBAEP4E,EAFO,KAEKC,EAFL,OAGwB7E,mBAAuB,IAH/C,mBAGP+D,EAHO,KAGMe,EAHN,KAKRC,ECtCO,SAA8B1K,EAAU2K,GAAqB,IAAD,EAC7BhF,mBAAS3F,GADoB,mBAClE4K,EADkE,KAClDC,EADkD,KAEnEC,EAAYC,iBAAOtL,KAAKuL,OAU9B,OARAC,qBAAU,WACR,IAAMC,EAASC,YAAW,WACxBN,EAAkB7K,GAClB8K,EAAUM,QAAU3L,KAAKuL,QACxBL,GAAWlL,KAAKuL,MAAQF,EAAUM,UACrC,OAAO,kBAAMC,aAAaH,MACzB,CAAClL,EAAO2K,IAEJC,ED0BqBU,CAAkBf,EAAY,KACpDgB,EAAoBR,iBAAO,IAqBjC,OAnBAE,qBAAU,WAENP,EAAoBc,OAAS,GAGC,UAA9BD,EAAkBH,QAElB3B,GACGgC,QADH,aAEIC,KAAMhB,EACNiB,EAAG,QACA3B,IAEJ4B,MAAK,SAAClC,GAAD,OAAiBe,EAAef,MAExCe,EAAe,MAEhB,CAACC,EAAqBV,IAGvB,cAAC6B,GAAA,EAAD,aACEC,QAASpC,EACTqC,eAAgB,SAACC,GAAD,OAAYA,EAAON,MACnCO,kBAAmB,SAACD,EAAQhM,GAC1B,OACEgM,EAAOE,eAAiBlM,EAAMkM,cAC9BF,EAAOG,WAAanM,EAAMmM,UAC1BH,EAAON,OAAS1L,EAAM0L,MAG1BnB,WAAYA,EACZ6B,cAAe,SAACC,EAAIrM,EAAOsM,GACzBf,EAAkBH,QAAUkB,EAC5B9B,EAAcxK,IAEhBA,MAAOA,EACPuM,SAAU,SAACF,EAAIrM,GACbsK,EAAStK,GACTyJ,GACG+C,sBAAsB,CACrBb,EAAG,OACHc,UAAS,OAAEzM,QAAF,IAAEA,OAAF,EAAEA,EAAO0L,KAClBS,SAAQ,OAAEnM,QAAF,IAAEA,OAAF,EAAEA,EAAOmM,SACjBO,aAAc,EACdC,UAAW,CAAC,OAAQ,gBAErBf,MAAK,SAACjC,GAAD,cAAgBU,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAoBV,EAAW,QAEzDiD,YAAa,SAACjO,GAAD,OACX,cAACkO,GAAA,EAAD,2BACMlO,GADN,IAEEmO,WAAU,2BACLnO,EAAOmO,YADF,IAER7C,eAAgBA,EACd,cAAC8C,GAAA,EAAD,CAAgBC,SAAS,QAAzB,SAAkC/C,SAChChK,IAENkK,UAAWA,EACXC,YAAaA,OAGbF,IE5FV,IAIe+C,GAJY,CACzBC,mBAVF,WACE,OAAO,IAAIC,SAA6B,SAACC,EAAKC,GAAN,OACtCC,UAAUC,YAAYL,mBAAmBE,EAAKC,QCsBnCjJ,GAzBGC,aAAW,SAACC,GAAD,MAAY,CACvCkJ,gBAAiB,CACfC,gBAAiBnJ,EAAMc,QAAQsI,WAAWC,MAC1CvG,MAAO,OACPwG,QAAQ,GAAD,OAAKtJ,EAAMU,QAAQ,IAAnB,cAA6BV,EAAMU,QAAQ,GAA3C,MACPP,QAAS,OACT0B,WAAY,SACZpB,IAAKT,EAAMU,QAAQ,GACnB6I,aAAcvJ,EAAMwJ,MAAMD,aAC1BhJ,SAAU,GAEZkJ,wBAAyB,CACvB3G,MAAO,OACP3C,QAAS,OACT0B,WAAY,SACZpB,IAAKT,EAAMU,QAAQ,IAErBgJ,iBAAkB,CAChBJ,QAAS,GAEXK,OAAQ,CACNpJ,SAAU,OCEC,SAASqJ,GAAT,GAIE,IAHfC,EAGc,EAHdA,SACAC,EAEc,EAFdA,WACAC,EACc,EADdA,iBAEMxH,EAAUzC,KADF,EAEsBuB,oBAAS,GAF/B,mBAEP2I,EAFO,KAEKC,EAFL,KAGd,OACE,cAAC,KAAD,CAAWvB,SAAS,SAApB,SACE,cAACwB,GAAA,EAAD,UACIF,EAYA,sBAAK7I,UAAWoB,EAAQkH,wBAAxB,UACE,qBAAKtI,UAAWoB,EAAQ2G,gBAAxB,SACE,cAAC,GAAD,CACErD,WAAS,EACTC,YAAY,kBACZF,kBAAmB,CACjBuE,eAAe,EACfC,WAAW,GAEbzE,eACE,cAAC0E,GAAA,EAAD,CACElJ,UAAWoB,EAAQmH,iBACnB7J,QAAS,kBAAMoK,GAAc,IAF/B,SAIE,cAACK,GAAA,EAAD,MAGJ5E,cAAe,CACb6E,SAAU,CAAC,SAAU,mBACrBC,YAAa,OAEfzE,kBAAmB,YAA6B,IAAD,IAAzB8D,SAAY1P,EAAa,EAAbA,EAAGC,EAAU,EAAVA,EACnC6P,GAAc,GACE,OAAhBF,QAAgB,IAAhBA,KAAmB3P,EAAGD,QAI5B,cAACkQ,GAAA,EAAD,CACEI,MAAM,UACNtJ,UAAWoB,EAAQmH,iBACnB7J,QAAS,WACPoK,GAAc,GACVF,GACFpB,GAAmBC,qBAAqBtB,MAAK,YAAiB,IAAdoD,EAAa,EAAbA,OAC9CX,EAAiBW,EAAO3R,SAAU2R,EAAO1R,eAPjD,SAYE,cAAC2R,GAAA,EAAD,SAlDJ,qCACE,cAACnI,EAAA,EAAD,CAAYf,QAAQ,KAApB,gBAA0BoI,QAA1B,IAA0BA,IAAY,YACtC,cAACQ,GAAA,EAAD,CAAYI,MAAM,UAAU5K,QAAS,kBAAMoK,GAAc,IAAzD,SACE,cAACxE,GAAA,EAAD,MAEF,cAAC/B,GAAA,EAAD,CAAKvC,UAAWoB,EAAQoH,SACxB,cAACU,GAAA,EAAD,CAAYI,MAAM,UAAUG,KAAK,MAAM/K,QAASiK,EAAhD,SACE,cAACe,GAAA,EAAD,aCFd,SAASC,KAA0C,IAAD,EAChD,iBACErM,EAAoBM,QAAQ,kBAAkB,SAACJ,EAAKjD,GAClD,IAAMqP,EAAgBpM,EAAIqM,oBAC1B,OAAID,EAAcE,SAAS,SAAWF,EAAcE,SAAS,QACpD,IAAI9P,KAAKO,GAEXA,YANX,QAOQ,CACJmO,SAAU,KACV7P,KAAM,KACNC,MAAO,KACPqI,SAAU,KACV6B,eAAgB,KAChBrJ,UAAW,KACXoQ,aAAc,M,8CAWpB,WAA2BrB,GAA3B,qCAAA5Q,EAAA,sEAMYJ,EAAWsS,aAAatB,EAAS9Q,SAAU8Q,EAAS7Q,WANhE,2BAEIe,iBAAoBC,EAFxB,EAEwBA,KAAMC,EAF9B,EAE8BA,MAClBC,EAHZ,EAGIT,OACOU,EAJX,EAIIR,MACOS,EALX,EAKIR,MALJ,UAOyBf,EAAWuS,YAAY,CAAElR,MAAKC,IAAGC,MAP1D,eAOQkI,EAPR,iBAQ+BzJ,EAAWwS,kBAAkB,CACxDnR,MACAC,IACAC,MAXJ,eAQQ+J,EARR,iBAayBtL,EAAWyS,YAAY,CAAEpR,MAAKC,IAAGC,MAb1D,eAaQmR,EAbR,OAcczQ,EAAcyQ,EAAS,GAA3B3Q,GAdV,UAe6B/B,EAAW2S,uBAAuB,CAC3D1Q,YACA2Q,MAAO,IAjBX,eAeQP,EAfR,yBAmBS,CACLrB,WACA7P,OACAC,QACAqI,WACA6B,iBACArJ,YACAoQ,iBA1BJ,6C,sBA8Be,SAASQ,KAAiB,IAAD,QCxFE/M,EAAajD,EDyF/C6G,EAAUzC,IACV6L,EAAUC,cAFsB,EAGCC,qBAAWvH,IAA1CD,EAH8B,EAG9BA,UAAW7G,EAHmB,EAGnBA,gBACbsO,EEhGO,WAA6B,IAAD,EACTzK,mBAAS0K,OAAO/C,UAAUgD,QADjB,mBAClCF,EADkC,KACxBG,EADwB,KAkBzC,OAhBAtF,qBAAU,WACR,SAASuF,IACPD,GAAY,GAEd,SAASE,IACPF,GAAY,GAKd,OAHAF,OAAOK,iBAAiB,UAAWF,GACnCH,OAAOK,iBAAiB,SAAUD,GAE3B,WACLJ,OAAOM,oBAAoB,UAAWH,GACtCH,OAAOM,oBAAoB,SAAUF,MAEtC,IAEIL,EF8EUQ,GAJqB,EAKRjL,oBAAS,GALD,mBAK/BkL,EAL+B,KAKtBC,EALsB,OAMSC,qBAC7CvN,OACAvD,EACAmP,IAToC,mBAM/B4B,EAN+B,KAMhBC,EANgB,KAapC9C,EAOE6C,EAPF7C,SACA7P,EAME0S,EANF1S,KACAC,EAKEyS,EALFzS,MACAqI,EAIEoK,EAJFpK,SACA6B,EAGEuI,EAHFvI,eACA+G,EAEEwB,EAFFxB,aACApQ,EACE4R,EADF5R,UAGIoJ,EAAc,iBAAGgH,QAAH,IAAGA,OAAH,EAAGA,EAAe,UAAlB,QAAwB,KAEtC0B,EAAiBC,uBAAY,SAAChD,GAClC2C,GAAW,G,4CACXpB,CAAYvB,GACTvC,MAAK,SAACrN,GAAD,OACJ0S,EAAsB,CAAE9O,KAAM,iBAAkBuB,QAASnF,OAE1D6S,SAAQ,kBAAMN,GAAW,QAC3B,IAGH7F,qBAAU,WACHkD,GAAaiC,GAGlBc,EAAe/C,KACd,CAACiC,EAAUjC,EAAU+C,IC/HgBjO,EDmItB,iBCnImCjD,EDmIjBgR,EClIpC/F,qBAAU,WACRlI,EAAoBC,QAAQC,EAAKjD,KAChC,CAACiD,EAAKjD,IDkIT,IAAMqR,EAAuBF,uBAC3B,SAACtR,GAAD,OhBvEG,YAA8D,IAA7CG,EAA4C,EAA5CA,MAAUsR,EAAkC,yBAClE,OAAO,aAAEtR,MAAOmI,KAAKC,MAAMpI,IAAWsR,GgBuElCjK,CACEA,GAAyBxH,EAAaiC,MAE1C,CAACA,IAMGyP,EAAoBJ,uBACxB,SAACvK,GACC,OAAO,2BACFA,GADL,IAEEvE,QAASuE,EAASvE,QAAQpD,KAAI,gBAAGY,EAAH,EAAGA,YAAgByR,EAAnB,mDAC5BzR,YAAawR,EAAqBxR,IAC/ByR,UAIT,CAACD,IAGGG,EAAsBC,mBAC1B,kBAAoB,OAAb7K,EAAoB2K,EAAkB3K,GAAY,OACzD,CAACA,EAAU2K,IAGPG,EAA4BD,mBAChC,kBAA0B,OAAnBhJ,EAA0B8I,EAAkB9I,GAAkB,OACrE,CAACA,EAAgB8I,IAGbI,EAAc,IAAIlS,KAClBmS,EAAU,IAAInS,KAAKkS,GACzBC,EAAQC,QAAQD,EAAQE,UAAY,GACpCF,EAAQG,SAAS,EAAG,EAAG,EAAG,GAC1B,IA9BwBtK,GA8BlBuK,GAAoB,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EAA2BrP,QACrD4P,QACC,gBAAGtQ,EAAH,EAAGA,QAASD,EAAZ,EAAYA,UAAZ,OACE,IAAIjC,KAAKkC,GAAWgQ,GAAe,IAAIlS,KAAKiC,GAAakQ,KAE5D3S,KAAI,gBAAGY,EAAH,EAAGA,YAAgByR,EAAnB,mDACHzR,YAAawR,EAAqBxR,IAC/ByR,MA1F+B,GAsGF3L,mBAA6B,MAtG3B,qBAsG/BuM,GAtG+B,MAsGnBC,GAtGmB,SAwGJxM,mBAAS,UAxGL,qBAwG/ByM,GAxG+B,MAwGpBC,GAxGoB,MA0GtC,OACE,qBAAK5M,UAAWoB,EAAQtC,KAAxB,SACE,eAAC+N,EAAA,EAAD,CAAYtS,MAAOoS,GAAnB,UACE,cAAC,GAAD,CACEjE,SACE7P,GAAQC,EAAR,iBACOD,QADP,IACOA,IAAQ,UADf,oBAC6BC,QAD7B,IAC6BA,IAAS,gBAClC0B,EAENmO,WAAY,SAACmE,GAAD,OAAOJ,GAAcI,EAAEC,gBACnCnE,iBAvBe,SAAChR,EAAkBC,GACxC2T,EAAsB,CACpB9O,KAAM,iBACNuB,QAAS,CACPyK,SAAU,CAAE9Q,WAAUC,mBAqBtB,cAAC,EAAD,CACEuG,SAAUqO,GACVtO,KAAM6O,QAAQP,IACdnO,QAAS,kBAAMoO,GAAc,OAC7BnO,iBAAkB,WAChBmO,GAAc,MACThE,GAAaiC,GAGlBc,EAAe/C,IAEjBlK,kBAAmB,WACjBkO,GAAc,MACdlC,EAAQyC,KAAKC,GAAOC,aAGvB/B,GAAW,cAACgC,EAAA,EAAD,CAAgB9D,MAAM,cAClC,uBAAMtJ,UAAWoB,EAAQlC,KAAzB,UACE,cAACmO,EAAA,EAAD,CAAU9S,MAAM,SAAhB,SACGwI,IAAc,OAAIwJ,SAAJ,IAAIA,QAAJ,EAAIA,GAAsBxG,SACvC,cAACjD,GAAD,CACE9C,UAAWoB,EAAQ/B,mBACnB5C,WAAY,IAAIzC,KAAK+I,EAAehJ,WACpCD,QAAO,OAAEH,QAAF,IAAEA,IAAa,GACtBoJ,eAAgB,CACd5I,KAAM4I,EAAe5I,KACrBmC,cAAeyG,EAAe9I,YAC9BG,YAAawR,EAAqB,CAChCrR,MAAK,oBAAEwI,EAAe3I,mBAAjB,aAAE,EAA4BG,aAA9B,QAAuC,EAC5CsC,KAAMzF,EAAgB8F,UAExBzC,eACgCD,KAAhB,OAAduI,QAAc,IAAdA,OAAA,EAAAA,EAAgBtI,YAjGVuH,GAkGa,CACbzH,MAAOwI,EAAetI,UAAUF,MAChCsC,KAAM1F,EAAU8F,mBd7LnC,YAAkD,IAAjC1C,EAAgC,EAAhCA,MAAUsR,EAAsB,yBACtD,OAAO,aAAEtR,MAAOmI,KAAKC,MAAMpI,IAAWsR,GcyFpCjJ,CAAiBA,GAAmBZ,GAAOkB,UAqGvB1I,EACNc,iBAAkByH,EAAezH,kBAEnC0H,eAAgBuJ,OAItB,cAACc,EAAA,EAAD,CAAU9S,MAAM,QAAhB,SACE,cAACuJ,GAAD,CAAmB3C,SAAQ,iBAAE4K,QAAF,IAAEA,OAAF,EAAEA,EAAqBnP,eAAvB,QAAkC,UAGjE,eAAC0Q,EAAA,EAAD,CACE/S,MAAOoS,GACP7F,SAAU,SAACgG,EAAGvS,GAAJ,OAAcqS,GAAarS,IACrCgT,YAAU,EACVvN,UAAWoB,EAAQ5B,iBAJrB,UAME,cAACgO,EAAA,EAAD,CACErT,KAAM,cAACsT,EAAA,EAAD,IACNC,MAAM,SACNnT,MAAM,WAER,cAACiT,EAAA,EAAD,CACErT,KAAM,cAACwT,EAAA,EAAD,IACND,MAAM,QACNnT,MAAM,kB,4CG1QH,SAASqT,GAAT,GAMI,IAAD,IALhBzP,YAKgB,SAJhBC,EAIgB,EAJhBA,SACAC,EAGgB,EAHhBA,aACAwP,EAEgB,EAFhBA,SACAvP,EACgB,EADhBA,QAEA,OACE,cAACJ,EAAA,EAAD,CACEC,KAAMA,EACNC,SAAUA,EACVC,aAAcA,EACdC,QAASA,EAJX,SAMGuP,ICrBA,IAAMC,GAAwB1K,yBAEnC,eCJK,SAASiB,GAASnB,GACvB,OAAQA,GACN,KAAK/L,EAAU8F,kBACb,MAAO,sBACT,KAAK9F,EAAU2K,gBACb,MAAO,oBACT,KAAK3K,EAAU4K,aACb,MAAO,kBCPN,SAASsC,GAAShI,GACvB,OAAQA,GACN,KAAKjF,EAAgB8F,QACnB,MAAO,UACT,KAAK9F,EAAgB+F,WACnB,MAAO,aACT,KAAK/F,EAAgBgG,OACnB,MAAO,UCPb,IASeuB,GATGC,aAAW,SAACC,GAAD,MAAY,CACvCkP,cAAe,CACbzE,MAAOzK,EAAMc,QAAQqO,QAAQ9O,KAC7B+O,SAAUpP,EAAMqP,WAAWC,MAAMF,SACjCrN,WAAY/B,EAAMqP,WAAWC,MAAMvN,WACnCwN,UAAW,aCgBTC,GAAaC,OAAOC,KAAKpX,GAAWqC,KACxC,SAACgE,GAAD,OAASrG,EAAUqG,MAGfgR,GAAmBF,OAAOC,KAAKnX,GAAiBoC,KACpD,SAACgE,GAAD,OAASpG,EAAgBoG,MAGZ,SAASiR,KACtB,IAAMrN,EAAUzC,KACV6L,EAAUC,cAEViE,EAAiBhE,qBAAWoD,IAJG,EASjC5N,mBAAyB,MATQ,mBAOnCyO,EAPmC,KAQnCC,EARmC,OAajC1O,mBAAyB,MAbQ,mBAWnC2O,EAXmC,KAYnCC,EAZmC,OAeEpE,qBAAWvH,IAA1CD,EAf6B,EAe7BA,UAAW7G,EAfkB,EAelBA,gBAEnB,OACE,qCACE,cAACoM,GAAA,EAAD,CAAQlB,SAAS,SAAjB,SACE,eAACwB,GAAA,EAAD,WACE,cAACG,GAAA,EAAD,CACEO,KAAK,QACLH,MAAM,UACN5K,QAAS,kBAAM8L,EAAQuE,UAHzB,SAKE,cAAC5F,GAAA,EAAD,MAEF,cAAC9H,EAAA,EAAD,CAAYf,QAAQ,KAApB,2BAGJ,cAACsN,GAAD,CACExP,SAAUuQ,EACVxQ,KAAM6O,QAAQ2B,GACdrQ,QAAS,kBAAMsQ,EAAuB,OAHxC,SAKGP,GAAW7U,KAAI,SAACqD,GAAD,OACd,cAAC4B,EAAA,EAAD,CAEEC,QAAS,WACPgQ,EAAe,CAAExL,UAAWrG,IAC5B+R,EAAuB,OAJ3B,SAOGI,GAAwBnS,IANpBA,QAUX,cAAC+Q,GAAD,CACExP,SAAUyQ,EACV1Q,KAAM6O,QAAQ6B,GACdvQ,QAAS,kBAAMwQ,EAA6B,OAH9C,SAKGN,GAAiBhV,KAAI,SAACqD,GAAD,OACpB,cAAC4B,EAAA,EAAD,CAEEC,QAAS,WACPgQ,EAAe,CAAErS,gBAAiBQ,IAClCiS,EAA6B,OAJjC,SAOGG,GAA8BpS,IAN1BA,QAUX,eAACqS,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,CAAeC,OAAK,EAACpP,UAAWoB,EAAQ2M,cAAxC,mBAGA,cAACsB,GAAA,EAAD,CACEC,QAAM,EACN5Q,QAAS,SAACoO,GAAD,eACP8B,EAAsB,QAAC,EAAD,UAEpB9B,EAAEC,cAAcwC,yBAFI,aAEpB,EAAmCA,yBAFf,QAEoC,OAL9D,SASE,cAACC,GAAA,EAAD,CACEJ,OAAK,EACLpB,QAAQ,aACRyB,UAAWT,GAAwB9L,OAGvC,cAACmM,GAAA,EAAD,CACEC,QAAM,EACN5Q,QAAS,SAACoO,GAAD,eACPgC,EAA4B,oBAC1BhC,EAAEC,cAAcwC,yBADU,aAC1B,EAAmCA,yBADT,QAC8B,OAJ9D,SAQE,cAACC,GAAA,EAAD,CACEJ,OAAK,EACLpB,QAAQ,mBACRyB,UAAWR,GAA8B5S,aC1H9C,SAASqT,GAAgB5W,EAAiBkF,GAA2B,IAClEtB,EAAiBsB,EAAjBtB,KAAMiT,EAAW3R,EAAX2R,OACd,OAAQjT,GACN,IAAK,SACH,OAAO,2BAAK5D,GAAU6W,ICC5B,SAASC,GAAYpS,GACnB,MAAM,oBAAN,OAA2BA,GAMtB,IA+CQqS,GADS,IA9CxB,oFAOE,SAAQrS,EAAajD,GACnB+C,EAAoBC,QAAQqS,GAAYpS,GAAMjD,KARlD,kBAiBE,SAAQiD,GAAgC,IAAD,EACrC,iBAAOF,EAAoBM,QAAQgS,GAAYpS,WAA/C,QAAwD,OAlB5D,2BA2BE,SAAiBA,EAAqBsS,GAAqB,IAAD,EACxD,iBAAOxS,EAAoBM,QAAQgS,GAAYpS,WAA/C,QAAwDsS,IA5B5D,8BAmCE,WACE,MAAO,CACL5M,UAAWnL,KAAKgY,cAAc,YAAa9M,GAAgBC,WAC3D7G,gBAAiBtE,KAAKgY,cACpB,kBACA9M,GAAgB5G,sBAxCxB,MCJe,SAAS2T,KAAO,IAAD,EACc1E,qBACxCoE,GACAG,GAAgBI,oBAHU,mBACrBC,EADqB,KACNC,EADM,KAM5B,OACE,cAAChN,GAAgBiN,SAAjB,CAA0B7V,MAAO2V,EAAjC,SACE,cAACpC,GAAsBsC,SAAvB,CACE7V,MAAO,SAACoV,GACNrB,OAAOC,KAAKoB,GAAQU,SAAQ,SAAC7S,GAC3BqS,GAAgBS,KAAK9S,EAAKmS,EAAOnS,OAEnC2S,EAAiB,CAAEzT,KAAM,SAAUiT,YALvC,SAQE,qBAAK3P,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuQ,KAAMrD,GAAOsD,UAAWC,OAAK,EAApC,SACE,cAAClG,GAAD,MAEF,cAAC,IAAD,CAAOgG,KAAMrD,GAAOC,SAApB,SACE,cAACsB,GAAD,iBCvBIzB,QACW,cAA7BpC,OAAOlC,SAASgI,UAEe,UAA7B9F,OAAOlC,SAASgI,UAEhB9F,OAAOlC,SAASgI,SAASC,MACvB,2DChBN,IAYeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3K,MAAK,YAAkD,IAA/C4K,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,aAAD,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SF6HpB,kBAAmB1J,WACrBA,UAAU2J,cAAcC,MACrBtL,MAAK,SAACuL,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YExH5BnB,M","file":"static/js/main.9ba84fcb.chunk.js","sourcesContent":["export enum DistanceUnit {\n  Inch = \"INCH\",\n  Meter = \"METER\",\n  Mile = \"MILE\",\n  Kilometer = \"KILOMETER\",\n}\n","export enum ForecastType {\n  Daily,\n  Hourly,\n}\n","export enum PressureUnit {\n  Pascal = \"PASCAL\",\n  NewtonPerSquareMeter = \"NEWTON_PER_SQUARE_METER\",\n  PoundsPerSquareInch = \"POUNDS_PER_SQUARE_INCH\",\n  Bar = \"BAR\",\n}\n","export enum SpeedUnit {\n  KilometersPerHour = \"KILOMETERS_PER_HOUR\",\n  MetersPerSecond = \"METERS_PER_SECOND\",\n  MilesPerHour = \"MILES_PER_HOUR\",\n}\n","export enum TemperatureUnit {\n  Celsius = \"CELSIUS\",\n  Fahrenheit = \"FAHRENHEIT\",\n  Kelvin = \"KELVIN\",\n}\n","export default class UnexpectedUnitCodeException extends Error {\n  constructor(public unitCode: string) {\n    super(`Unexpected unit code: ${unitCode}`);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, UnexpectedUnitCodeException);\n    }\n\n    this.name = \"UnexpectedUnitCodeException\";\n  }\n}\n","import axios, { AxiosInstance } from \"axios\";\nimport { DistanceUnit } from \"../enums/distance-unit\";\nimport { ForecastType } from \"../enums/forecast-type\";\nimport { PressureUnit } from \"../enums/pressure-unit\";\nimport { SpeedUnit } from \"../enums/speed-unit\";\nimport { TemperatureUnit } from \"../enums/temperature-unit\";\nimport UnexpectedUnitCodeException from \"../exceptions/unexpected-unit-code.exceptions\";\nimport { Forecast, Period } from \"../interfaces/forecast\";\nimport ForecastResponse, {\n  Period as RawPeriod,\n} from \"../interfaces/forecast-response\";\nimport { Observation } from \"../interfaces/observation\";\nimport { PointInfo } from \"../interfaces/point-info\";\nimport PointInfoResponse from \"../interfaces/point-info-response\";\nimport { Station } from \"../interfaces/station\";\nimport StationObservationsResponse from \"../interfaces/station-observations-response\";\nimport StationsResponse from \"../interfaces/stations-response\";\nimport { Distance } from \"../types/distance\";\nimport { Pressure } from \"../types/pressure\";\nimport { Speed } from \"../types/speed\";\nimport { Temperature } from \"../types/temperature\";\n\nclass NWSService {\n  constructor(private apiClient: AxiosInstance) {}\n\n  async getPointInfoRaw(\n    latitude: number,\n    longitude: number\n  ): Promise<PointInfoResponse> {\n    return (await this.apiClient.get(`/points/${latitude},${longitude}`)).data;\n  }\n\n  async getPointInfo(latitude: number, longitude: number): Promise<PointInfo> {\n    const rawPointInfo = await this.getPointInfoRaw(latitude, longitude);\n    return {\n      coordinates: [\n        rawPointInfo.geometry.coordinates[0],\n        rawPointInfo.geometry.coordinates[1],\n      ],\n      gridId: rawPointInfo.properties.gridId,\n      gridX: rawPointInfo.properties.gridX,\n      gridY: rawPointInfo.properties.gridY,\n      timeZone: rawPointInfo.properties.timeZone,\n      radarStation: rawPointInfo.properties.timeZone,\n      relativeLocation: {\n        city: rawPointInfo.properties.relativeLocation.properties.city,\n        state: rawPointInfo.properties.relativeLocation.properties.state,\n      },\n    };\n  }\n\n  async getRawForecast({\n    wfo,\n    x,\n    y,\n  }: GridPointsParams): Promise<ForecastResponse> {\n    return (await this.apiClient.get(`/gridpoints/${wfo}/${x},${y}/forecast`))\n      .data;\n  }\n\n  async getForecast(params: GridPointsParams): Promise<Forecast> {\n    return convertForecastResponseToForecast(await this.getRawForecast(params));\n  }\n\n  async getRawHourlyForecast({\n    wfo,\n    x,\n    y,\n  }: GridPointsParams): Promise<ForecastResponse> {\n    return (\n      await this.apiClient.get(`/gridpoints/${wfo}/${x},${y}/forecast/hourly`)\n    ).data;\n  }\n\n  async getHourlyForecast(params: GridPointsParams): Promise<Forecast> {\n    return convertForecastResponseToForecast(\n      await this.getRawHourlyForecast(params)\n    );\n  }\n\n  async getRawStations({\n    wfo,\n    x,\n    y,\n  }: GridPointsParams): Promise<StationsResponse> {\n    return (await this.apiClient.get(`/gridpoints/${wfo}/${x},${y}/stations`))\n      .data;\n  }\n\n  async getStations(params: GridPointsParams): Promise<Station[]> {\n    const { features } = await this.getRawStations(params);\n    return features.map(({ properties }) => ({\n      id: properties.stationIdentifier,\n      name: properties.name,\n      timeZone: properties.timeZone,\n    }));\n  }\n\n  async getRawStationObservations({\n    stationId,\n    ...queryParams\n  }: GetStationObservationsParams): Promise<StationObservationsResponse> {\n    return (\n      await this.apiClient.get(`/stations/${stationId}/observations`, {\n        params: queryParams,\n      })\n    ).data;\n  }\n\n  async getStationObservations(\n    params: GetStationObservationsParams\n  ): Promise<Observation[]> {\n    const { features } = await this.getRawStationObservations(params);\n    return features.map(({ properties }) => ({\n      station: properties.station, // NOTE: Not ID\n      timestamp: new Date(properties.timestamp),\n      description: properties.textDescription,\n      icon: properties.icon,\n      temperature: convertTemperature(properties.temperature),\n      windDirection: properties.windDirection.value ?? undefined,\n      windSpeed: convertSpeed(properties.windSpeed),\n      windGust: convertSpeed(properties.windGust),\n      barometricPressure: convertPressure(properties.barometricPressure),\n      seaLevelPressure: convertPressure(properties.seaLevelPressure),\n      visibility: convertDistance(properties.visibility),\n      maxTemperatureLast24Hours: convertTemperature(\n        properties.maxTemperatureLast24Hours\n      ),\n      minTemperatureLast24Hours: convertTemperature(\n        properties.minTemperatureLast24Hours\n      ),\n      precipitationLastHour: convertDistance(properties.precipitationLastHour),\n      precipitationLast3Hours: convertDistance(\n        properties.precipitationLast3Hours\n      ),\n      precipitationLast6Hours: convertDistance(\n        properties.precipitationLast6Hours\n      ),\n      relativeHumidity: convertRelativeHumidity(properties.relativeHumidity),\n      windChill: convertTemperature(properties.windChill),\n      heatIndex: convertTemperature(properties.heatIndex),\n    }));\n  }\n}\n\ninterface GetStationObservationsParams {\n  stationId: string;\n  station?: string[];\n  start?: string;\n  end?: string;\n  limit?: number;\n}\n\ninterface GridPointsParams {\n  wfo: string;\n  x: number;\n  y: number;\n}\n\nconst nwsService = new NWSService(\n  axios.create({\n    baseURL: \"https://api.weather.gov\",\n    headers: { Accept: \"application/geo+json\" },\n  })\n);\n\nexport default nwsService;\n\n// Internal conversion functions\n\nfunction convertRawPeriodToPeriod(rawPeriod: RawPeriod): Period {\n  return {\n    name: rawPeriod.name,\n    startTime: new Date(rawPeriod.startTime),\n    endTime: new Date(rawPeriod.endTime),\n    isDayTime: rawPeriod.isDaytime,\n    temperature: convertTemperature({\n      value: rawPeriod.temperature,\n      unitCode: rawPeriod.temperatureUnit,\n    }),\n    icon: rawPeriod.icon,\n    shortForecast: rawPeriod.shortForecast,\n    detailedForecast: rawPeriod.detailedForecast,\n  };\n}\n\nfunction convertForecastResponseToForecast({\n  properties,\n}: ForecastResponse): Forecast {\n  return {\n    updatedTime: new Date(properties.updateTime),\n    type: ForecastType.Daily,\n    periods: properties.periods.map(convertRawPeriodToPeriod),\n  };\n}\n\nfunction convertDistance({\n  value,\n  unitCode,\n}: PossiblyNullValueWithUnitCode): Distance | undefined {\n  if (value === null) {\n    return undefined;\n  }\n  if (unitCode === \"unit:in\") {\n    return { value, unit: DistanceUnit.Inch };\n  }\n  if (unitCode === \"unit:m\") {\n    return { value, unit: DistanceUnit.Meter };\n  }\n  if (unitCode === \"unit:km\") {\n    return { value, unit: DistanceUnit.Kilometer };\n  }\n  throw new UnexpectedUnitCodeException(unitCode);\n}\n\nfunction convertRelativeHumidity({\n  value,\n  unitCode,\n}: PossiblyNullValueWithUnitCode): number | undefined {\n  if (value === null) {\n    return undefined;\n  }\n  if (unitCode === \"unit:percent\") {\n    return value;\n  }\n  throw new UnexpectedUnitCodeException(unitCode);\n}\n\nfunction convertSpeed({\n  value,\n  unitCode,\n}: PossiblyNullValueWithUnitCode): Speed | undefined {\n  if (value === null) {\n    return undefined;\n  }\n  if (unitCode === \"unit:km_h-1\") {\n    return { value, unit: SpeedUnit.KilometersPerHour };\n  }\n  throw new UnexpectedUnitCodeException(unitCode);\n}\n\nfunction convertTemperature(params: {\n  value: null;\n  unitCode: string;\n}): undefined;\nfunction convertTemperature(params: {\n  value: number;\n  unitCode: string;\n}): Temperature;\nfunction convertTemperature(\n  params: PossiblyNullValueWithUnitCode\n): Temperature | undefined;\nfunction convertTemperature({\n  value,\n  unitCode,\n}: PossiblyNullValueWithUnitCode): Temperature | undefined {\n  if (value === null) {\n    return undefined;\n  }\n  if (unitCode === \"C\" || unitCode === \"unit:degC\") {\n    return { value, unit: TemperatureUnit.Celsius };\n  }\n  if (unitCode === \"F\") {\n    return { value, unit: TemperatureUnit.Fahrenheit };\n  }\n  if (unitCode === \"K\") {\n    return { value, unit: TemperatureUnit.Kelvin };\n  }\n  throw new UnexpectedUnitCodeException(unitCode);\n}\n\nfunction convertPressure({\n  value,\n  unitCode,\n}: PossiblyNullValueWithUnitCode): Pressure | undefined {\n  if (value === null) {\n    return undefined;\n  }\n  if (unitCode === \"unit:Pa\") {\n    return { value, unit: PressureUnit.Pascal };\n  }\n  throw new UnexpectedUnitCodeException(unitCode);\n}\n\ntype PossiblyNullValueWithUnitCode = { value: number | null; unitCode: string };\n","/**\n * Calls `localStorage.setItem()` with `key` and the result of calling\n * `JSON.stringify()` with `value` for `value`.\n */\nfunction setItem(key: string, value: any) {\n  localStorage.setItem(key, JSON.stringify(value));\n}\n\n/**\n * Calls `localStorage.getItem()` with `key`. If the result is `null`, it gets\n * returned. Otherwise, the result of calling `JSON.parse()` with the value is\n * returned.\n */\nfunction getItem(\n  key: string,\n  reviver?: (this: any, key: string, value: any) => any\n): any | null {\n  const value = localStorage.getItem(key);\n  if (value === null) {\n    return null;\n  }\n  return JSON.parse(value, reviver);\n}\n\n/**\n * Provides convenience wrappers for functions of `localStorage`.\n */\nconst localStorageService = {\n  setItem,\n  getItem,\n};\n\nexport default localStorageService;\n","import ForecastState from \"../interfaces/forecast-state\";\n\ntype Action = { type: \"updateForecast\"; payload: Partial<ForecastState> };\n\nexport default function forecastReducer(\n  state: ForecastState,\n  action: Action\n): ForecastState {\n  switch (action.type) {\n    case \"updateForecast\":\n      return { ...state, ...action.payload };\n  }\n}\n","import {\n  Menu as MuiMenu,\n  MenuProps as MuiMenuProps,\n  MenuItem,\n} from \"@material-ui/core\";\n\ninterface MenuProps {\n  open?: boolean;\n  anchorEl?: MuiMenuProps[\"anchorEl\"];\n  anchorOrigin?: MuiMenuProps[\"anchorOrigin\"];\n  onClose?: MuiMenuProps[\"onClose\"];\n  onRefreshClicked?: () => void;\n  onSettingsClicked?: () => void;\n}\n\nexport default function Menu({\n  open = false,\n  anchorEl,\n  anchorOrigin,\n  onClose,\n  onRefreshClicked,\n  onSettingsClicked,\n}: MenuProps) {\n  return (\n    <MuiMenu\n      open={open}\n      anchorEl={anchorEl}\n      anchorOrigin={anchorOrigin}\n      onClose={onClose}\n    >\n      <MenuItem onClick={onRefreshClicked}>Refresh</MenuItem>\n      <MenuItem onClick={onSettingsClicked}>Settings</MenuItem>\n    </MuiMenu>\n  );\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  main: {\n    overflowY: \"auto\",\n    flexGrow: 1,\n  },\n  hourlyForecastPage: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: theme.spacing(1),\n  },\n  bottomNavigation: {\n    borderTop: \"1px solid\",\n    borderColor: theme.palette.divider,\n    // Prevent the navigation bar from changing height when changing tabs\n    minHeight: \"56px\",\n  },\n}));\n\nexport default useStyles;\n","/* eslint-disable jsx-a11y/alt-text */\nimport { Skeleton, SkeletonProps } from \"@material-ui/lab\";\nimport React, { ImgHTMLAttributes, useState } from \"react\";\n\ninterface ImageProps extends ImgHTMLAttributes<HTMLImageElement> {\n  skeletonProps?: SkeletonProps;\n  className?: string;\n}\n\n/** A component which shows a placeholder until the image has loaded. */\nexport default function Image({\n  skeletonProps,\n  className,\n  ...imageProps\n}: ImageProps) {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <>\n      {!loaded && (\n        <Skeleton className={className} variant=\"rect\" {...skeletonProps} />\n      )}\n      <img\n        className={className}\n        style={{ display: loaded ? undefined : \"none\" }}\n        onLoad={() => setLoaded(true)}\n        {...imageProps}\n      />\n    </>\n  );\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"grid\",\n    alignItems: \"center\",\n    gridTemplateColumns: \"repeat(4, auto)\",\n    gap: theme.spacing(1),\n  },\n  temperature: {\n    fontWeight: \"bold\",\n  },\n}));\n\nexport default useStyles;\n","export enum NWSIconSize {\n  Small = 56,\n  Medium = 86,\n  large = 134,\n}\n","import { TemperatureUnit } from \"../../nws/enums/temperature-unit\";\nimport { Temperature } from \"../../nws/types/temperature\";\n\n/**\n * Returns a formatted temperature string.\n *\n * @param value - The temperature sans unit\n * @param unit - The unit\n * @returns The temperature formatted as a string\n */\nexport function format({ value, unit }: Temperature): string {\n  switch (unit) {\n    case TemperatureUnit.Celsius:\n      return `${value}℃`;\n    case TemperatureUnit.Fahrenheit:\n      return `${value}℉`;\n    case TemperatureUnit.Kelvin:\n      return `${value}K`;\n    default:\n      return `${value}`;\n  }\n}\n\n/**\n * Converts temperature to Kelvin.\n *\n * @returns A `Temperature` object in Kelvin\n */\nfunction covertToKelvin({ value, unit }: Temperature): Temperature {\n  switch (unit) {\n    case TemperatureUnit.Celsius:\n      return { value: value + 273.15, unit: TemperatureUnit.Kelvin };\n    case TemperatureUnit.Fahrenheit:\n      return {\n        value: ((value - 32) * 5) / 9 + 273.15,\n        unit: TemperatureUnit.Kelvin,\n      };\n    case TemperatureUnit.Kelvin:\n      return { value, unit };\n  }\n}\n\n/**\n * Converts a temperature to a specified unit.\n *\n * @param temperature - The temperature to convert\n * @param targetUnit - The target unit\n * @returns The `temperature` in `targetUnit`\n */\nexport function convert(\n  temperature: Temperature,\n  targetUnit: TemperatureUnit\n): Temperature {\n  const { value: kelvinValue } = covertToKelvin(temperature);\n  switch (targetUnit) {\n    case TemperatureUnit.Celsius:\n      return { value: kelvinValue - 273.15, unit: targetUnit };\n    case TemperatureUnit.Fahrenheit:\n      return {\n        value: ((kelvinValue - 273.15) * 9) / 5 + 32,\n        unit: targetUnit,\n      };\n    case TemperatureUnit.Kelvin:\n      return { value: kelvinValue, unit: targetUnit };\n  }\n}\n\n/**\n * Rounds a temperature to the nearest integer.\n *\n * @returns A `Temperature` object with value rounded to the nearest integer\n */\nexport function round({ value, ...rest }: Temperature): Temperature {\n  return { value: Math.round(value), ...rest };\n}\n","import { Typography } from \"@material-ui/core\";\nimport Image from \"../../common/components/image\";\nimport { Period } from \"../../nws/interfaces/forecast\";\nimport useStyles from \"./hourly-forecast.styles\";\nimport * as TemperatureUtils from \"../utils/temperature.utils\";\nimport { NWSIconSize } from \"../enums/nws-icon-size\";\nimport { Fragment } from \"react\";\n\ninterface HourlyForecastProps {\n  forecast: Period[];\n}\n\nexport default function HourlyForecast({ forecast }: HourlyForecastProps) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      {forecast.map(({ startTime, icon, shortForecast, temperature }) => (\n        <Fragment key={startTime.toISOString()}>\n          <Typography className={classes.temperature}>\n            {startTime.toLocaleTimeString(undefined, { hour: \"numeric\" })}\n          </Typography>\n          <Image\n            src={icon}\n            alt=\"\"\n            height={NWSIconSize.Small}\n            width={NWSIconSize.Small}\n            skeletonProps={{\n              height: NWSIconSize.Small,\n              width: NWSIconSize.Small,\n            }}\n          />\n          <Typography>{shortForecast}</Typography>\n          <Typography>{TemperatureUtils.format(temperature)}</Typography>\n        </Fragment>\n      ))}\n    </div>\n  );\n}\n","import { SpeedUnit } from \"../../nws/enums/speed-unit\";\nimport { Speed } from \"../../nws/types/speed\";\n\n/**\n * Returns a formatted speed string.\n *\n * @returns The speed formatted as a string\n */\nexport function format({ value, unit }: Speed): string {\n  switch (unit) {\n    case SpeedUnit.KilometersPerHour:\n      return `${value} km/h`;\n    case SpeedUnit.MetersPerSecond:\n      return `${value} m/s`;\n    case SpeedUnit.MilesPerHour:\n      return `${value} mph`;\n    default:\n      return `${value}`;\n  }\n}\n\n/**\n * Converts a `Speed` object to meters per second.\n *\n * @returns A `Speed` object with a value in meters per second\n */\nfunction convertToMetersPerSecond({ value, unit }: Speed): Speed {\n  switch (unit) {\n    case SpeedUnit.KilometersPerHour:\n      return { value: value / 3.6, unit: SpeedUnit.MetersPerSecond };\n    case SpeedUnit.MetersPerSecond:\n      return { value, unit };\n    case SpeedUnit.MilesPerHour:\n      return { value: value / 2.237, unit: SpeedUnit.MetersPerSecond };\n  }\n}\n\n/**\n * Converts a speed to the target unit.\n *\n * @param speed - The speed to convert\n * @param targetUnit - The unit to convert `speed` to\n * @returns The `Speed` object converted to `targetUnit`\n */\nexport function convert(speed: Speed, targetUnit: SpeedUnit): Speed {\n  const { value: valueInMetersPerSecond } = convertToMetersPerSecond(speed);\n  switch (targetUnit) {\n    case SpeedUnit.KilometersPerHour:\n      return { value: valueInMetersPerSecond * 3.6, unit: targetUnit };\n    case SpeedUnit.MetersPerSecond:\n      return { value: valueInMetersPerSecond, unit: targetUnit };\n    case SpeedUnit.MilesPerHour:\n      return { value: valueInMetersPerSecond * 2.237, unit: targetUnit };\n  }\n}\n\n/**\n * Rounds a speed to the nearest integer.\n *\n * @returns The `Speed` object with value rounded to the nearest integer\n */\nexport function round({ value, ...rest }: Speed): Speed {\n  return { value: Math.round(value), ...rest };\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  icon: {\n    alignSelf: \"flex-start\",\n  },\n});\n\nexport default useStyles;\n","import { Box, Card, CardContent, Typography } from \"@material-ui/core\";\nimport Image from \"../../common/components/image\";\nimport { Speed } from \"../../nws/types/speed\";\nimport { Temperature } from \"../../nws/types/temperature\";\nimport { NWSIconSize } from \"../enums/nws-icon-size\";\nimport * as SpeedUtils from \"../utils/speed.utils\";\nimport * as TemperatureUtils from \"../utils/temperature.utils\";\nimport useStyles from \"./weather-card.styles\";\n\nexport interface WeatherCardProps {\n  icon: string;\n  shortForecast: string;\n  temperature: Temperature;\n  windSpeed?: Speed;\n  relativeHumidity?: number;\n  updateTime?: Date;\n  station?: string;\n}\n\nexport default function WeatherCard({\n  icon,\n  shortForecast,\n  temperature,\n  windSpeed,\n  relativeHumidity,\n  updateTime,\n  station,\n}: WeatherCardProps) {\n  const classes = useStyles();\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\">{shortForecast}</Typography>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Image\n            className={classes.icon}\n            alt=\"\"\n            src={icon}\n            height={NWSIconSize.Medium}\n            width={NWSIconSize.Medium}\n            skeletonProps={{\n              height: NWSIconSize.Medium,\n              width: NWSIconSize.Medium,\n            }}\n          />\n          <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-end\">\n            <Typography variant=\"h3\">\n              {TemperatureUtils.format(temperature)}\n            </Typography>\n            {relativeHumidity !== undefined && (\n              <Typography>{`Humidity: ${Math.round(\n                relativeHumidity\n              )}%`}</Typography>\n            )}\n            {windSpeed !== undefined && (\n              <Typography>{`Wind: ${SpeedUtils.format(windSpeed)}`}</Typography>\n            )}\n            {updateTime && (\n              <Box display=\"flex\" justifyContent=\"flex-end\">\n                <Typography variant=\"caption\">\n                  {updateTime.toLocaleString()}\n                </Typography>\n              </Box>\n            )}\n            {updateTime && (\n              <Box display=\"flex\" justifyContent=\"flex-end\">\n                <Typography variant=\"caption\">{station}</Typography>\n              </Box>\n            )}\n          </Box>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n","import { Period } from \"../../nws/interfaces/forecast\";\nimport HourlyForecast from \"../components/hourly-forecast\";\nimport WeatherCard, { WeatherCardProps } from \"../components/weather-card\";\n\ninterface HourlyForecastPageProps {\n  currentWeather: Omit<WeatherCardProps, \"updateTime\" | \"station\">;\n  hourlyForecast: Period[];\n  updateTime: Date;\n  station: string;\n  className?: string;\n}\n\nexport default function HourlyForecastPage({\n  currentWeather,\n  hourlyForecast,\n  updateTime,\n  station,\n  className,\n}: HourlyForecastPageProps) {\n  return (\n    <div className={className}>\n      <WeatherCard\n        icon={currentWeather.icon}\n        shortForecast={currentWeather.shortForecast}\n        temperature={currentWeather.temperature}\n        windSpeed={currentWeather.windSpeed}\n        relativeHumidity={currentWeather.relativeHumidity}\n        updateTime={updateTime}\n        station={station}\n      />\n      <HourlyForecast forecast={hourlyForecast} />\n    </div>\n  );\n}\n","import { SpeedUnit } from \"../../nws/enums/speed-unit\";\nimport { TemperatureUnit } from \"../../nws/enums/temperature-unit\";\nimport Settings from \"../interfaces/settings\";\n\n/** The default settings to use when not set. */\nexport const defaultSettings: Settings = {\n  speedUnit: SpeedUnit.MilesPerHour,\n  temperatureUnit: TemperatureUnit.Fahrenheit,\n};\n","import { createContext } from \"react\";\nimport { defaultSettings } from \"../constants/default-settings\";\nimport Settings from \"../interfaces/settings\";\n\n/** Context for user settings. */\nexport const SettingsContext = createContext<Settings>(defaultSettings);\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: theme.spacing(2),\n  },\n  forecastTile: {\n    display: \"grid\",\n    gridTemplateAreas: `\n    \"forecastTileTitle forecastTileTitle forecastTileTitle\"\n    \"forecastTileIcon forecastTileDescription forecastTileTemperature\"\n    `,\n    alignItems: \"center\",\n    columnGap: theme.spacing(1),\n  },\n  forecastTileTitle: {\n    gridArea: \"forecastTileTitle\",\n    justifySelf: \"start\",\n  },\n  forecastTileIcon: {\n    gridArea: \"forecastTileIcon\",\n  },\n  forecastTileDescription: {\n    gridArea: \"forecastTileDescription\",\n  },\n  forecastTileTemperature: {\n    gridArea: \"forecastTileTemperature\",\n    justifySelf: \"end\",\n  },\n}));\n\nexport default useStyles;\n","import { Typography } from \"@material-ui/core\";\nimport { Period } from \"../../nws/interfaces/forecast\";\nimport useStyles from \"./daily-forecast.page.styles\";\nimport * as TemperatureUtils from \"../utils/temperature.utils\";\nimport Image from \"../../common/components/image\";\nimport { NWSIconSize } from \"../enums/nws-icon-size\";\n\ninterface DailyForecastPageProps {\n  forecast: Period[];\n}\n\nexport default function DailyForecastPage({\n  forecast,\n}: DailyForecastPageProps) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      {forecast.map((period) => (\n        <div\n          className={classes.forecastTile}\n          key={period.startTime.toISOString()}\n        >\n          <Typography className={classes.forecastTileTitle} variant=\"h6\">\n            {period.name}\n          </Typography>\n          <Image\n            className={classes.forecastTileIcon}\n            src={period.icon}\n            alt=\"\"\n            height={NWSIconSize.Medium}\n            width={NWSIconSize.Medium}\n            skeletonProps={{\n              height: NWSIconSize.Medium,\n              width: NWSIconSize.Medium,\n            }}\n          />\n          <Typography className={classes.forecastTileDescription}>\n            {period.shortForecast}\n          </Typography>\n          <Typography variant=\"h6\" className={classes.forecastTileTemperature}>\n            {TemperatureUtils.format(period.temperature)}\n          </Typography>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import axios, { AxiosInstance } from \"axios\";\nimport Candidate from \"../interfaces/candidate\";\nimport FindAddressCandidatesParams from \"../interfaces/find-address-candidates-params\";\nimport FindAddressCandidatesResponse from \"../interfaces/find-address-candidates-response\";\nimport SuggestParams from \"../interfaces/suggest-params\";\nimport SuggestResponse from \"../interfaces/suggest-response\";\nimport Suggestion from \"../interfaces/suggestion\";\n\nexport class ArcGISGeocodingService {\n  constructor(private apiClient: AxiosInstance) {}\n\n  async suggest(params: SuggestParams): Promise<Suggestion[]> {\n    const {\n      data: { suggestions },\n    } = await this.apiClient.get<SuggestResponse>(\"/suggest\", {\n      params,\n    });\n    return suggestions;\n  }\n\n  async findAddressCandidates(\n    params: FindAddressCandidatesParams\n  ): Promise<Candidate[]> {\n    const {\n      data: { candidates },\n    } = await this.apiClient.get<FindAddressCandidatesResponse>(\n      \"/findAddressCandidates\",\n      { params }\n    );\n    return candidates;\n  }\n}\n\nconst arcGISGeocodingService = new ArcGISGeocodingService(\n  axios.create({\n    baseURL:\n      \"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer\",\n    paramsSerializer: (params) => {\n      // Ensure array entries are converted to a format that the API expects\n      return new URLSearchParams(params).toString();\n    },\n  })\n);\n\nexport default arcGISGeocodingService;\n","import { InputAdornment, InputProps, TextField } from \"@material-ui/core\";\nimport { Autocomplete, AutocompleteProps } from \"@material-ui/lab\";\nimport { useEffect, useRef, useState } from \"react\";\nimport useDebouncedValue from \"../../common/hooks/use-debounced-value\";\nimport Candidate from \"../interfaces/candidate\";\nimport SuggestParams from \"../interfaces/suggest-params\";\nimport Suggestion from \"../interfaces/suggestion\";\nimport arcGISGeocodingService from \"../services/arcgis-geocoding.service\";\n\ninterface SearchProps {\n  suggestParams?: Omit<SuggestParams, \"text\" | \"f\">;\n  startAdornment?: InputProps[\"startAdornment\"];\n  autocompleteProps?: Omit<\n    AutocompleteProps<Suggestion, undefined, undefined, undefined>,\n    | \"options\"\n    | \"getOptionLabel\"\n    | \"getOptionSelected\"\n    | \"inputValue\"\n    | \"onInputChange\"\n    | \"value\"\n    | \"onChange\"\n    | \"renderInput\"\n  >;\n  autoFocus?: boolean;\n  placeholder?: string;\n  onSelectionChange?: (value: Candidate) => void;\n}\n\nexport default function Search({\n  suggestParams,\n  startAdornment,\n  autocompleteProps,\n  autoFocus,\n  placeholder,\n  onSelectionChange,\n}: SearchProps) {\n  const [value, setValue] = useState<Suggestion | null>(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);\n\n  const debouncedInputValue = useDebouncedValue(inputValue, 100);\n  const inputChangeReason = useRef(\"\");\n\n  useEffect(() => {\n    if (\n      debouncedInputValue.length > 0 &&\n      // Do not send a request if the reason inputValue changed was because a\n      // value was selected or the value was cleared\n      inputChangeReason.current === \"input\"\n    ) {\n      arcGISGeocodingService\n        .suggest({\n          text: debouncedInputValue,\n          f: \"json\",\n          ...suggestParams,\n        })\n        .then((suggestions) => setSuggestions(suggestions));\n    } else {\n      setSuggestions([]);\n    }\n  }, [debouncedInputValue, suggestParams]);\n\n  return (\n    <Autocomplete\n      options={suggestions}\n      getOptionLabel={(option) => option.text}\n      getOptionSelected={(option, value) => {\n        return (\n          option.isCollection === value.isCollection &&\n          option.magicKey === value.magicKey &&\n          option.text === value.text\n        );\n      }}\n      inputValue={inputValue}\n      onInputChange={(_e, value, reason) => {\n        inputChangeReason.current = reason;\n        setInputValue(value);\n      }}\n      value={value}\n      onChange={(_e, value) => {\n        setValue(value);\n        arcGISGeocodingService\n          .findAddressCandidates({\n            f: \"json\",\n            SingeLine: value?.text,\n            magicKey: value?.magicKey,\n            maxLocations: 1,\n            outFields: [\"City\", \"RegionAbbr\"],\n          })\n          .then((candidates) => onSelectionChange?.(candidates[0]));\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          InputProps={{\n            ...params.InputProps,\n            startAdornment: startAdornment ? (\n              <InputAdornment position=\"start\">{startAdornment}</InputAdornment>\n            ) : undefined,\n          }}\n          autoFocus={autoFocus}\n          placeholder={placeholder}\n        />\n      )}\n      {...autocompleteProps}\n    />\n  );\n}\n","import { useEffect, useRef, useState } from \"react\";\n\nexport default function useDebouncedValue<T>(value: T, timeout: number): T {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  const lastFired = useRef(Date.now());\n\n  useEffect(() => {\n    const handle = setTimeout(() => {\n      setDebouncedValue(value);\n      lastFired.current = Date.now();\n    }, timeout - (Date.now() - lastFired.current));\n    return () => clearTimeout(handle);\n  }, [value, timeout]);\n\n  return debouncedValue;\n}\n","/**\n * Wraps `navigator.geolocation.getCurrentPosition()` in a Promise.\n */\nfunction getCurrentPosition(): Promise<GeolocationPosition> {\n  return new Promise<GeolocationPosition>((res, rej) =>\n    navigator.geolocation.getCurrentPosition(res, rej)\n  );\n}\n\n/**\n * Provides convenience wrappers for function of `navigator.geolocation`.\n */\nconst geolocationService = {\n  getCurrentPosition,\n};\n\nexport default geolocationService;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  searchContainer: {\n    backgroundColor: theme.palette.background.paper,\n    width: \"100%\",\n    padding: `${theme.spacing(0.5)}px ${theme.spacing(1)}px`,\n    display: \"flex\",\n    alignItems: \"center\",\n    gap: theme.spacing(1),\n    borderRadius: theme.shape.borderRadius,\n    flexGrow: 1,\n  },\n  searchOrLocateContainer: {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    gap: theme.spacing(1),\n  },\n  searchExitButton: {\n    padding: 0,\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n}));\n\nexport default useStyles;\n","import {\n  AppBar as MuiAppBar,\n  Toolbar,\n  Typography,\n  IconButton,\n  Box,\n  IconButtonProps,\n} from \"@material-ui/core\";\nimport {\n  ArrowBack as ArrowBackIcon,\n  MoreVert as MoreVertIcon,\n  MyLocation as MyLocationIcon,\n  Search as SearchIcon,\n} from \"@material-ui/icons\";\nimport { useState } from \"react\";\nimport Search from \"../../arcgis-geocoding/components/search\";\nimport geolocationService from \"../../common/services/geolocation.service\";\nimport useStyles from \"./app-bar.styles\";\n\ninterface AppBarProps {\n  location?: string;\n  onShowMenu?: IconButtonProps[\"onClick\"];\n  onLocationChange?: (latitude: number, longitude: number) => void;\n}\n\nexport default function AppBar({\n  location,\n  onShowMenu,\n  onLocationChange,\n}: AppBarProps) {\n  const classes = useStyles();\n  const [showSearch, setShowSearch] = useState(false);\n  return (\n    <MuiAppBar position=\"sticky\">\n      <Toolbar>\n        {!showSearch ? (\n          <>\n            <Typography variant=\"h6\">{location ?? \"Unknown\"}</Typography>\n            <IconButton color=\"inherit\" onClick={() => setShowSearch(true)}>\n              <SearchIcon />\n            </IconButton>\n            <Box className={classes.spacer} />\n            <IconButton color=\"inherit\" edge=\"end\" onClick={onShowMenu}>\n              <MoreVertIcon />\n            </IconButton>\n          </>\n        ) : (\n          <div className={classes.searchOrLocateContainer}>\n            <div className={classes.searchContainer}>\n              <Search\n                autoFocus\n                placeholder=\"Search location\"\n                autocompleteProps={{\n                  autoHighlight: true,\n                  fullWidth: true,\n                }}\n                startAdornment={\n                  <IconButton\n                    className={classes.searchExitButton}\n                    onClick={() => setShowSearch(false)}\n                  >\n                    <ArrowBackIcon />\n                  </IconButton>\n                }\n                suggestParams={{\n                  category: [\"Postal\", \"Populated Place\"],\n                  countryCode: \"USA\",\n                }}\n                onSelectionChange={({ location: { x, y } }) => {\n                  setShowSearch(false);\n                  onLocationChange?.(y, x);\n                }}\n              />\n            </div>\n            <IconButton\n              color=\"inherit\"\n              className={classes.searchExitButton}\n              onClick={() => {\n                setShowSearch(false);\n                if (onLocationChange) {\n                  geolocationService.getCurrentPosition().then(({ coords }) => {\n                    onLocationChange(coords.latitude, coords.longitude);\n                  });\n                }\n              }}\n            >\n              <MyLocationIcon />\n            </IconButton>\n          </div>\n        )}\n      </Toolbar>\n    </MuiAppBar>\n  );\n}\n","import {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState,\n} from \"react\";\nimport {\n  BottomNavigation,\n  BottomNavigationAction,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport {\n  Schedule as ScheduleIcon,\n  CalendarToday as CalendarTodayIcon,\n} from \"@material-ui/icons\";\nimport { TabContext, TabPanel } from \"@material-ui/lab\";\nimport nwsService from \"../../nws/services/nws.service\";\nimport localStorageService from \"../../common/services/local-storage.service\";\nimport useNetworkStatus from \"../../common/hooks/use-network-status\";\nimport forecastReducer from \"../reducers/forecast-reducer\";\nimport ForecastState from \"../interfaces/forecast-state\";\nimport useSerializeValue from \"../../common/hooks/use-serialize-value\";\nimport Menu from \"../components/menu\";\nimport Coordinates from \"../../common/interfaces/coordinates\";\nimport useStyles from \"./dashboard.page.styles\";\nimport HourlyForecastPage from \"./hourly-forecast.page\";\nimport { useHistory } from \"react-router\";\nimport routes from \"../../common/constants/routes.json\";\nimport * as TemperatureUtils from \"../utils/temperature.utils\";\nimport * as SpeedUtils from \"../utils/speed.utils\";\nimport { SettingsContext } from \"../../settings/contexts/settings.context\";\nimport DailyForecastPage from \"./daily-forecast.page\";\nimport { SpeedUnit } from \"../../nws/enums/speed-unit\";\nimport { TemperatureUnit } from \"../../nws/enums/temperature-unit\";\nimport { Speed } from \"../../nws/types/speed\";\nimport { Temperature } from \"../../nws/types/temperature\";\nimport { Forecast } from \"../../nws/interfaces/forecast\";\nimport AppBar from \"../components/app-bar\";\n\nfunction initializeForecastState(): ForecastState {\n  return (\n    localStorageService.getItem(\"cachedForecast\", (key, value) => {\n      const upperCasedKey = key.toLocaleUpperCase();\n      if (upperCasedKey.includes(\"TIME\") || upperCasedKey.includes(\"DATE\")) {\n        return new Date(value);\n      }\n      return value;\n    }) ?? {\n      location: null,\n      city: null,\n      state: null,\n      forecast: null,\n      hourlyForecast: null,\n      stationId: null,\n      observations: null,\n    }\n  );\n}\n\n/**\n * Returns a new `ForecastState` based on `location`.\n *\n * @param location - The location to get the forecast for\n * @returns A `Promise` for the new `ForecastState`\n */\nasync function getForecast(location: Coordinates): Promise<ForecastState> {\n  const {\n    relativeLocation: { city, state },\n    gridId: wfo,\n    gridX: x,\n    gridY: y,\n  } = await nwsService.getPointInfo(location.latitude, location.longitude);\n  const forecast = await nwsService.getForecast({ wfo, x, y });\n  const hourlyForecast = await nwsService.getHourlyForecast({\n    wfo,\n    x,\n    y,\n  });\n  const stations = await nwsService.getStations({ wfo, x, y });\n  const { id: stationId } = stations[0];\n  const observations = await nwsService.getStationObservations({\n    stationId,\n    limit: 1, // Only get the most recent observation\n  });\n  return {\n    location,\n    city,\n    state,\n    forecast,\n    hourlyForecast,\n    stationId,\n    observations,\n  };\n}\n\nexport default function DashboardPage() {\n  const classes = useStyles();\n  const history = useHistory();\n  const { speedUnit, temperatureUnit } = useContext(SettingsContext);\n  const isOnline = useNetworkStatus();\n  const [loading, setLoading] = useState(false);\n  const [forecastState, forecastStateDispatch] = useReducer(\n    forecastReducer,\n    undefined,\n    initializeForecastState\n  );\n\n  const {\n    location,\n    city,\n    state,\n    forecast,\n    hourlyForecast,\n    observations,\n    stationId,\n  } = forecastState;\n\n  const currentWeather = observations?.[0] ?? null;\n\n  const updateForecast = useCallback((location: Coordinates) => {\n    setLoading(true);\n    getForecast(location)\n      .then((state) =>\n        forecastStateDispatch({ type: \"updateForecast\", payload: state })\n      )\n      .finally(() => setLoading(false));\n  }, []);\n\n  // Fetch forecast data when the location gets updated\n  useEffect(() => {\n    if (!location || !isOnline) {\n      return;\n    }\n    updateForecast(location);\n  }, [isOnline, location, updateForecast]);\n\n  // Save information about the last location and forecast retrieved so it can\n  // be used after the application has been closed\n  useSerializeValue(\"cachedForecast\", forecastState);\n\n  const transformTemperature = useCallback(\n    (temperature: Temperature): Temperature =>\n      TemperatureUtils.round(\n        TemperatureUtils.convert(temperature, temperatureUnit)\n      ),\n    [temperatureUnit]\n  );\n\n  const transformSpeed = (speed: Speed): Speed =>\n    SpeedUtils.round(SpeedUtils.convert(speed, speedUnit));\n\n  const transformForecast = useCallback(\n    (forecast: Forecast): Forecast => {\n      return {\n        ...forecast,\n        periods: forecast.periods.map(({ temperature, ...rest }) => ({\n          temperature: transformTemperature(temperature),\n          ...rest,\n        })),\n      };\n    },\n    [transformTemperature]\n  );\n\n  const transformedForecast = useMemo(\n    () => (forecast !== null ? transformForecast(forecast) : null),\n    [forecast, transformForecast]\n  );\n\n  const transformedHourlyForecast = useMemo(\n    () => (hourlyForecast !== null ? transformForecast(hourlyForecast) : null),\n    [hourlyForecast, transformForecast]\n  );\n\n  const currentDate = new Date();\n  const endDate = new Date(currentDate);\n  endDate.setDate(endDate.getDate() + 1);\n  endDate.setHours(0, 0, 0, 0);\n  const currentHourlyPeriods = transformedHourlyForecast?.periods\n    .filter(\n      ({ endTime, startTime }) =>\n        new Date(endTime) > currentDate && new Date(startTime) < endDate\n    )\n    .map(({ temperature, ...rest }) => ({\n      temperature: transformTemperature(temperature),\n      ...rest,\n    }));\n\n  const updateLocation = (latitude: number, longitude: number) => {\n    forecastStateDispatch({\n      type: \"updateForecast\",\n      payload: {\n        location: { latitude, longitude },\n      },\n    });\n  };\n\n  const [menuAnchor, setMenuAnchor] = useState<null | HTMLElement>(null);\n\n  const [activeTab, setActiveTab] = useState(\"hourly\");\n\n  return (\n    <div className={classes.root}>\n      <TabContext value={activeTab}>\n        <AppBar\n          location={\n            city || state\n              ? `${city ?? \"Unknown\"}, ${state ?? \"Unknown\"}`\n              : undefined\n          }\n          onShowMenu={(e) => setMenuAnchor(e.currentTarget)}\n          onLocationChange={updateLocation}\n        />\n        <Menu\n          anchorEl={menuAnchor}\n          open={Boolean(menuAnchor)}\n          onClose={() => setMenuAnchor(null)}\n          onRefreshClicked={() => {\n            setMenuAnchor(null);\n            if (!location || !isOnline) {\n              return;\n            }\n            updateForecast(location);\n          }}\n          onSettingsClicked={() => {\n            setMenuAnchor(null);\n            history.push(routes.SETTINGS);\n          }}\n        />\n        {loading && <LinearProgress color=\"secondary\" />}\n        <main className={classes.main}>\n          <TabPanel value=\"hourly\">\n            {currentWeather && currentHourlyPeriods?.length && (\n              <HourlyForecastPage\n                className={classes.hourlyForecastPage}\n                updateTime={new Date(currentWeather.timestamp)}\n                station={stationId ?? \"\"}\n                currentWeather={{\n                  icon: currentWeather.icon,\n                  shortForecast: currentWeather.description,\n                  temperature: transformTemperature({\n                    value: currentWeather.temperature?.value ?? 0,\n                    unit: TemperatureUnit.Celsius,\n                  }),\n                  windSpeed:\n                    currentWeather?.windSpeed !== undefined\n                      ? transformSpeed({\n                          value: currentWeather.windSpeed.value,\n                          unit: SpeedUnit.KilometersPerHour,\n                        })\n                      : undefined,\n                  relativeHumidity: currentWeather.relativeHumidity,\n                }}\n                hourlyForecast={currentHourlyPeriods}\n              />\n            )}\n          </TabPanel>\n          <TabPanel value=\"daily\">\n            <DailyForecastPage forecast={transformedForecast?.periods ?? []} />\n          </TabPanel>\n        </main>\n        <BottomNavigation\n          value={activeTab}\n          onChange={(e, value) => setActiveTab(value)}\n          showLabels\n          className={classes.bottomNavigation}\n        >\n          <BottomNavigationAction\n            icon={<ScheduleIcon />}\n            label=\"Hourly\"\n            value=\"hourly\"\n          />\n          <BottomNavigationAction\n            icon={<CalendarTodayIcon />}\n            label=\"Daily\"\n            value=\"daily\"\n          />\n        </BottomNavigation>\n      </TabContext>\n    </div>\n  );\n}\n","import { useEffect } from \"react\";\nimport localStorageService from \"../services/local-storage.service\";\n\n/**\n * Writes a value to localStorage whenever the value changes.\n *\n * @param key - The key in localStorage to use\n * @param value - The value to store in localStorage\n */\nexport default function useSerializeValue(key: string, value: any) {\n  useEffect(() => {\n    localStorageService.setItem(key, value);\n  }, [key, value]);\n}\n","import { useEffect, useState } from \"react\";\n\n/**\n * Returns the browser's online status.\n */\nexport default function useNetworkStatus() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n  useEffect(() => {\n    function setOffline() {\n      setIsOnline(false);\n    }\n    function setOnline() {\n      setIsOnline(true);\n    }\n    window.addEventListener(\"offline\", setOffline);\n    window.addEventListener(\"online\", setOnline);\n\n    return () => {\n      window.removeEventListener(\"offline\", setOffline);\n      window.removeEventListener(\"online\", setOnline);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import { Menu, MenuProps } from \"@material-ui/core\";\nimport { ReactNode } from \"react\";\n\ninterface UnitMenuProps {\n  open?: boolean;\n  anchorEl?: MenuProps[\"anchorEl\"];\n  anchorOrigin?: MenuProps[\"anchorOrigin\"];\n  children?: ReactNode;\n  onClose?: MenuProps[\"onClose\"];\n}\n\nexport default function UnitMenu({\n  open = false,\n  anchorEl,\n  anchorOrigin,\n  children,\n  onClose,\n}: UnitMenuProps) {\n  return (\n    <Menu\n      open={open}\n      anchorEl={anchorEl}\n      anchorOrigin={anchorOrigin}\n      onClose={onClose}\n    >\n      {children}\n    </Menu>\n  );\n}\n","import { createContext } from \"react\";\nimport Settings from \"../interfaces/settings\";\n\n/** Context for passing a callback to update settings. */\nexport const SettingsUpdateContext = createContext<\n  (update: Partial<Settings>) => void\n>(() => {});\n","import { SpeedUnit } from \"../../nws/enums/speed-unit\";\n\nexport function toString(speedUnit: SpeedUnit): string {\n  switch (speedUnit) {\n    case SpeedUnit.KilometersPerHour:\n      return \"Kilometers per hour\";\n    case SpeedUnit.MetersPerSecond:\n      return \"Meters per second\";\n    case SpeedUnit.MilesPerHour:\n      return \"Miles per hour\";\n  }\n}\n","import { TemperatureUnit } from \"../../nws/enums/temperature-unit\";\n\nexport function toString(temperatureUnit: TemperatureUnit): string {\n  switch (temperatureUnit) {\n    case TemperatureUnit.Celsius:\n      return \"Celsius\";\n    case TemperatureUnit.Fahrenheit:\n      return \"Fahrenheit\";\n    case TemperatureUnit.Kelvin:\n      return \"Kelvin\";\n  }\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  listSubHeader: {\n    color: theme.palette.primary.main,\n    fontSize: theme.typography.body1.fontSize,\n    fontWeight: theme.typography.body1.fontWeight,\n    textAlign: \"start\",\n  },\n}));\n\nexport default useStyles;\n","import {\n  AppBar,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  ListSubheader,\n  MenuItem,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { ArrowBack as ArrowBackIcon } from \"@material-ui/icons\";\nimport { useContext, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { SpeedUnit } from \"../../nws/enums/speed-unit\";\nimport { TemperatureUnit } from \"../../nws/enums/temperature-unit\";\nimport UnitMenu from \"../components/unit-menu\";\nimport { SettingsUpdateContext } from \"../contexts/settings-update.context\";\nimport { SettingsContext } from \"../contexts/settings.context\";\nimport * as SpeedUnitUtils from \"../utils/speed-unit.utils\";\nimport * as TemperatureUnitUtils from \"../utils/temperature-unit.utils\";\nimport useStyles from \"./settings.page.styles\";\n\nconst speedUnits = Object.keys(SpeedUnit).map(\n  (key) => SpeedUnit[key as keyof typeof SpeedUnit]\n);\n\nconst temperatureUnits = Object.keys(TemperatureUnit).map(\n  (key) => TemperatureUnit[key as keyof typeof TemperatureUnit]\n);\n\nexport default function SettingsPage() {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const updateSettings = useContext(SettingsUpdateContext);\n\n  const [\n    speedUnitMenuAnchor,\n    setSpeedUnitMenuAnchor,\n  ] = useState<null | Element>(null);\n  const [\n    temperatureUnitMenuAnchor,\n    setTemperatureUnitMenuAnchor,\n  ] = useState<null | Element>(null);\n\n  const { speedUnit, temperatureUnit } = useContext(SettingsContext);\n\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={() => history.goBack()}\n          >\n            <ArrowBackIcon />\n          </IconButton>\n          <Typography variant=\"h6\">Settings</Typography>\n        </Toolbar>\n      </AppBar>\n      <UnitMenu\n        anchorEl={speedUnitMenuAnchor}\n        open={Boolean(speedUnitMenuAnchor)}\n        onClose={() => setSpeedUnitMenuAnchor(null)}\n      >\n        {speedUnits.map((unit) => (\n          <MenuItem\n            key={unit}\n            onClick={() => {\n              updateSettings({ speedUnit: unit });\n              setSpeedUnitMenuAnchor(null);\n            }}\n          >\n            {SpeedUnitUtils.toString(unit)}\n          </MenuItem>\n        ))}\n      </UnitMenu>\n      <UnitMenu\n        anchorEl={temperatureUnitMenuAnchor}\n        open={Boolean(temperatureUnitMenuAnchor)}\n        onClose={() => setTemperatureUnitMenuAnchor(null)}\n      >\n        {temperatureUnits.map((unit) => (\n          <MenuItem\n            key={unit}\n            onClick={() => {\n              updateSettings({ temperatureUnit: unit });\n              setTemperatureUnitMenuAnchor(null);\n            }}\n          >\n            {TemperatureUnitUtils.toString(unit)}\n          </MenuItem>\n        ))}\n      </UnitMenu>\n      <List>\n        <ListSubheader inset className={classes.listSubHeader}>\n          Units\n        </ListSubheader>\n        <ListItem\n          button\n          onClick={(e) =>\n            setSpeedUnitMenuAnchor(\n              // Align the menu to the top of the list item's primary text\n              e.currentTarget.firstElementChild?.firstElementChild ?? null\n            )\n          }\n        >\n          <ListItemText\n            inset\n            primary=\"Speed unit\"\n            secondary={SpeedUnitUtils.toString(speedUnit)}\n          />\n        </ListItem>\n        <ListItem\n          button\n          onClick={(e) =>\n            setTemperatureUnitMenuAnchor(\n              e.currentTarget.firstElementChild?.firstElementChild ?? null\n            )\n          }\n        >\n          <ListItemText\n            inset\n            primary=\"Temperature unit\"\n            secondary={TemperatureUnitUtils.toString(temperatureUnit)}\n          />\n        </ListItem>\n      </List>\n    </>\n  );\n}\n","import Settings from \"../interfaces/settings\";\n\nexport type Action = { type: \"update\"; update: Partial<Settings> };\n\nexport function settingsReducer(state: Settings, action: Action): Settings {\n  const { type, update } = action;\n  switch (type) {\n    case \"update\":\n      return { ...state, ...update };\n  }\n}\n","import localStorageService from \"../../common/services/local-storage.service\";\nimport { defaultSettings } from \"../constants/default-settings\";\nimport Settings from \"../interfaces/settings\";\n/**\n * Returns a key for loading and saving preferences.\n *\n * @param key - The key.\n * @returns The key to be used when saving and loading preferences.\n */\nfunction generateKey(key: string): string {\n  return `userPreferences::${key}`;\n}\n\n/**\n * Service for saving and loading settings.\n */\nexport class SettingsService {\n  /**\n   * Saves a setting.\n   *\n   * @param key - The key for the setting.\n   * @param value - The setting to save.\n   */\n  save<T>(key: string, value: T) {\n    localStorageService.setItem(generateKey(key), value);\n  }\n  /**\n   * Loads a setting.\n   *\n   * @param key - The key for the setting.\n   * @param defaultValue - The default value to use if `key` is not found.\n   * @returns The setting or null if it is not found.\n   */\n  load<T>(key: keyof Settings): T | null {\n    return localStorageService.getItem(generateKey(key)) ?? null;\n  }\n  /**\n   * Loads a setting.\n   *\n   * @param key - The key for the setting.\n   * @param defaultValue - The default value to use if `key` is not found.\n   * @returns The setting or null if it is not found.\n   */\n  loadOrDefault<T>(key: keyof Settings, defaultValue: T): T {\n    return localStorageService.getItem(generateKey(key)) ?? defaultValue;\n  }\n  /**\n   * Retrieves user settings.\n   *\n   * @returns All settings with either user set preferences or default values\n   */\n  loadAllOrDefault(): Settings {\n    return {\n      speedUnit: this.loadOrDefault(\"speedUnit\", defaultSettings.speedUnit),\n      temperatureUnit: this.loadOrDefault(\n        \"temperatureUnit\",\n        defaultSettings.temperatureUnit\n      ),\n    };\n  }\n}\n\nconst settingsService = new SettingsService();\nexport default settingsService;\n","import { HashRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport DashboardPage from \"./dashboard/pages/dashboard.page\";\nimport SettingsPage from \"./settings/pages/settings.page\";\nimport routes from \"./common/constants/routes.json\";\nimport { SettingsContext } from \"./settings/contexts/settings.context\";\nimport { useReducer } from \"react\";\nimport { settingsReducer } from \"./settings/reducers/settings.reducer\";\nimport { SettingsUpdateContext } from \"./settings/contexts/settings-update.context\";\nimport settingsService from \"./settings/services/settings.service\";\nimport Settings from \"./settings/interfaces/settings\";\n\nexport default function App() {\n  const [settingsState, settingsDispatch] = useReducer(\n    settingsReducer,\n    settingsService.loadAllOrDefault()\n  );\n\n  return (\n    <SettingsContext.Provider value={settingsState}>\n      <SettingsUpdateContext.Provider\n        value={(update) => {\n          Object.keys(update).forEach((key) => {\n            settingsService.save(key, update[key as keyof Settings]);\n          });\n          settingsDispatch({ type: \"update\", update });\n        }}\n      >\n        <div className=\"App\">\n          <HashRouter>\n            <Switch>\n              <Route path={routes.DASHBOARD} exact>\n                <DashboardPage />\n              </Route>\n              <Route path={routes.SETTINGS}>\n                <SettingsPage />\n              </Route>\n            </Switch>\n          </HashRouter>\n        </div>\n      </SettingsUpdateContext.Provider>\n    </SettingsContext.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}